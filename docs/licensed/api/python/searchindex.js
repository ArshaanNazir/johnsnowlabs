Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "healthcar": [0, 1, 10, 12, 33, 35, 41, 92], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 72, 74, 75, 77, 78, 80, 82, 85, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 114, 116, 126, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 196, 197, 200, 201, 202, 204, 207, 208, 212, 213, 220], "commerci": 0, "extens": [0, 77], "clinic": [0, 43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 82, 85, 88, 89, 90, 91, 93, 95, 99, 102, 103, 104, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 185, 188, 190], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 85, 88, 89, 90, 91, 92, 93, 95, 97, 99, 102, 103, 104, 105, 108, 109, 110, 112, 114, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 198, 200, 201, 205, 206, 210], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 67, 68, 70, 78, 80, 81, 82, 85, 89, 91, 93, 94, 97, 100, 102, 103, 104, 105, 108, 112, 116, 124, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 188, 189, 190, 192, 196, 204, 208, 213], "you": [0, 10, 33, 41, 42, 43, 51, 65, 67, 70, 89, 92, 99, 102, 104, 108, 110, 124, 128, 130, 148, 155, 161, 163, 182, 189, 204, 206], "don": [0, 52, 100, 108, 200, 201], "t": [0, 10, 23, 24, 43, 52, 65, 67, 82, 89, 99, 100, 102, 108, 114, 126, 128, 144, 148, 150, 155, 161, 178, 182, 184, 189, 200, 201, 206, 220], "have": [0, 23, 24, 41, 43, 50, 51, 52, 53, 55, 67, 78, 85, 89, 92, 102, 108, 128, 130, 134, 135, 144, 152, 155, 161, 163, 167, 168, 178, 185, 189, 192, 196, 200], "subscript": 0, "yet": [0, 24], "can": [0, 10, 23, 33, 41, 43, 44, 45, 48, 50, 52, 62, 63, 64, 65, 67, 68, 70, 74, 78, 80, 82, 85, 89, 91, 97, 99, 100, 102, 104, 105, 108, 112, 114, 128, 130, 137, 141, 143, 144, 148, 150, 154, 155, 161, 163, 170, 174, 177, 178, 182, 184, 188, 189, 196, 197, 200, 201, 206, 212, 213], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": [0, 78], "try": [0, 57, 58, 82, 94, 108, 124, 137, 145, 170, 179], "http": [0, 20, 22, 23, 24, 41, 74, 104, 108], "www": [0, 209], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 110, 113, 114, 118, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 110, 113, 114, 118, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 209], "provid": [0, 22, 23, 24, 41, 43, 51, 63, 65, 67, 89, 90, 108, 122, 128, 130, 144, 154, 155, 161, 163, 178, 188, 189, 204, 207], "specif": [0, 10, 33, 78, 89, 104, 116, 155, 189, 192], "annot": [0, 10, 33, 41, 120, 121, 122, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 159, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 201, 203, 205, 206, 210, 218], "pipelin": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 102, 103, 104, 105, 108, 109, 110, 114, 126, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190, 191, 192, 197, 201, 203, 218], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 72, 74, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 99, 102, 103, 104, 105, 108, 112, 113, 114, 116, 118, 121, 124, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 158, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 197, 200, 201, 203, 206, 208], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 48, 50, 53, 55, 62, 63, 64, 67, 68, 70, 72, 74, 80, 84, 88, 89, 90, 91, 102, 103, 104, 105, 108, 110, 127, 128, 130, 135, 137, 140, 143, 144, 152, 154, 155, 159, 161, 163, 168, 170, 173, 177, 178, 185, 188, 189, 200, 201], "entiti": [0, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 63, 65, 67, 70, 71, 72, 74, 78, 81, 85, 89, 90, 91, 92, 93, 94, 100, 102, 103, 104, 105, 107, 108, 110, 128, 130, 134, 135, 137, 140, 141, 152, 154, 155, 157, 160, 161, 163, 167, 168, 170, 173, 174, 185, 188, 189, 190, 192, 196, 200, 201, 202, 204, 206, 210], "recognit": [0, 24, 63, 89, 93, 154, 155, 157, 188, 189, 190], "link": [0, 74], "normal": [0, 13, 24, 36, 57, 58, 65, 84, 108, 116, 137, 144, 145, 159, 170, 178, 179, 200], "assert": [0, 10, 33, 41, 48, 52, 84, 133, 142, 159, 166, 175, 206, 207, 210, 215], "statu": [0, 43, 44, 45, 128, 161, 206], "detect": [0, 44, 218], "de": [0, 67, 70], "identif": [0, 204], "relat": [0, 10, 33, 41, 53, 55, 78, 102, 103, 104, 105, 116, 134, 135, 140, 141, 152, 160, 167, 168, 173, 174, 185, 192, 201, 210], "extract": [0, 41, 43, 45, 48, 50, 65, 74, 77, 89, 90, 102, 103, 105, 108, 128, 137, 140, 141, 155, 161, 170, 173, 174, 189, 191, 192, 200, 201], "spell": [0, 127, 200], "check": [0, 10, 33, 41, 43, 45, 65, 95, 99, 104, 116, 148, 182, 208, 220], "correct": [0, 196], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 74, 77, 78, 80, 81, 82, 85, 89, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 108, 110, 112, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 197, 200, 202, 203, 204, 205, 206, 212], "librari": [0, 1, 41, 62, 63, 64, 75, 109, 124, 131, 143, 154, 159, 164, 177, 188], "offer": 0, "access": [0, 41], "sever": [0, 23, 43, 48, 67, 70, 108, 128, 130, 161, 163], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 85, 89, 90, 93, 94, 95, 100, 102, 103, 104, 105, 108, 109, 125, 128, 130, 131, 135, 137, 140, 141, 143, 144, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 174, 177, 178, 185, 188, 189, 190, 192], "jsl": [0, 41, 53, 55, 135, 152, 168, 185, 210, 218], "bert": [0, 62, 63, 64, 77, 78, 89, 103, 105, 108, 110, 140, 141, 143, 154, 155, 173, 174, 177, 188, 189], "biobert": [0, 192], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 108, 137, 170], "o": [0, 24, 63, 70, 72, 88, 91, 154, 188, 204, 206, 220], "It": [0, 22, 24, 41, 67, 68, 78, 80, 82, 89, 91, 130, 144, 155, 163, 178, 189, 192, 200, 202, 208, 212], "also": [0, 24, 62, 63, 64, 67, 74, 78, 89, 91, 100, 102, 108, 122, 130, 143, 154, 155, 163, 177, 188, 189, 200], "includ": [0, 21, 41, 43, 81, 85, 89, 91, 99, 104, 105, 115, 128, 148, 155, 161, 182, 189, 200, 201, 210], "over": [0, 19, 67, 89, 155, 189, 200, 201, 218], "50": [0, 10, 24, 33, 53, 55, 65, 82, 134, 135, 152, 155, 167, 168, 185], "pre": [0, 41, 50, 53, 55, 62, 63, 64, 75, 77, 89, 93, 102, 103, 105, 109, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 188, 189, 190], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 102, 103, 105, 108, 109, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 152, 154, 155, 157, 159, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 185, 188, 189, 190, 192, 197, 200], "recogn": [0, 78, 89, 91, 93, 105, 155, 189], "follow": [0, 19, 20, 65, 67, 70, 89, 91, 108, 130, 155, 163, 189, 192, 206, 209], "mani": [0, 18, 51, 74, 78, 112], "more": [0, 18, 19, 22, 23, 44, 50, 62, 64, 67, 75, 78, 91, 92, 109, 130, 131, 143, 154, 163, 164, 177, 188], "support": [0, 10, 33, 60, 67, 70, 89, 130, 144, 163, 178], "sign": [0, 206], "symptom": [0, 78, 102], "treatment": [0, 104, 105, 141, 174, 206], "procedur": 0, "test": [0, 43, 49, 51, 89, 104, 105, 110, 128, 144, 155, 161, 178, 189, 192, 197, 200, 201, 202, 206, 207, 213], "lab": [0, 41, 159, 206, 210], "section": [0, 92], "drug": [0, 78, 91, 95, 104, 105, 141, 174], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 124, 126, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 188, 189, 190, 196, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 218], "dosag": [0, 78, 91, 95], "strength": [0, 78, 91], "rout": 0, "durat": 0, "frequenc": [0, 24, 41, 91, 200, 201], "risk": 0, "factor": [0, 24], "smoke": 0, "obes": 0, "diabet": [0, 50, 77], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 63, 154, 188, 204], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 63, 89, 154, 155, 188, 189, 196, 204], "structur": [0, 105, 141, 174, 204, 212], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 67, 71, 72, 85, 88, 130, 158, 163, 204], "gender": [0, 67, 70, 85, 88, 130, 163, 192], "height": [0, 15, 38, 198], "weight": [0, 22, 24, 41, 77, 78, 116, 160, 198], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 206], "sensit": [0, 48, 65, 77, 102, 103, 104], "data": [0, 22, 23, 24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 82, 85, 88, 89, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 114, 116, 126, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 196, 197, 200, 201, 204, 206, 212], "patient": [0, 43, 52, 53, 55, 65, 68, 70, 72, 78, 99, 100, 128, 135, 148, 152, 161, 168, 182, 185, 204], "address": [0, 43, 45, 50, 57, 58, 59, 60, 67, 70, 74, 77, 78, 82, 85, 90, 99, 108, 113, 114, 148, 149, 150, 182, 183, 184, 189], "phone": [0, 67, 130, 163, 204], "email": [0, 204], "date": [0, 42, 51, 67, 68, 71, 81, 94, 110, 126, 130, 163, 204, 208, 212], "identifi": [0, 49, 50, 51, 85, 104, 108, 110, 197, 204, 206, 220], "For": [0, 19, 24, 41, 45, 48, 62, 63, 67, 75, 77, 78, 88, 89, 93, 95, 102, 103, 104, 105, 108, 109, 130, 131, 140, 141, 143, 144, 154, 155, 157, 163, 164, 173, 174, 177, 178, 188, 189, 190], "inform": [0, 1, 23, 24, 65, 67, 68, 85, 91, 94, 95, 102, 130, 163, 200, 206], "visit": [0, 102], "our": 0, "site": [0, 65], "built": [0, 24, 144, 178], "top": [0, 50, 62, 63, 64, 89, 112, 143, 154, 155, 177, 188, 189, 206], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 196], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 82, 85, 89, 90, 91, 93, 94, 97, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 116, 118, 126, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 157, 159, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 192, 197, 200, 201, 203, 204, 206, 210, 212, 218], "need": [0, 10, 18, 23, 24, 33, 45, 65, 67, 77, 89, 90, 100, 102, 108, 130, 155, 163, 189, 206], "java": [0, 92, 112, 113, 118, 120, 121, 127, 147, 149, 181, 183, 203], "8": [0, 24, 62, 64, 78, 89, 143, 154, 155, 177, 188, 189, 206], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 48, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 67, 70, 71, 74, 77, 78, 82, 85, 89, 91, 92, 93, 95, 97, 99, 102, 103, 104, 105, 108, 110, 112, 114, 116, 124, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 188, 189, 190, 192, 196, 200, 201, 204, 206, 208, 210, 220], "pyspark": [0, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 82, 85, 88, 89, 90, 91, 94, 99, 102, 103, 105, 109, 113, 114, 124, 128, 130, 131, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 161, 163, 164, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 191, 192, 197, 200, 201, 204, 205, 206, 210, 218], "6": [0, 10, 24, 33, 47, 104, 144, 178, 206], "7": [0, 2, 25, 206], "recommend": [0, 74, 89, 155, 189], "basic": [0, 22, 24], "knowledg": [0, 74, 108], "framework": 0, "work": [0, 89, 155, 189], "environ": [0, 213], "befor": [0, 24, 45, 50, 89, 92, 112, 113, 118, 121, 147, 149, 155, 181, 183, 189], "pleas": [0, 41, 62, 63, 71, 89, 103, 108, 140, 143, 144, 154, 155, 173, 177, 178, 188, 189], "refer": [0, 1, 41, 50, 67, 68, 70, 71, 75, 81, 102, 108, 109, 130, 131, 163, 164, 212], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 114, 126, 128, 130, 131, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 196, 200, 201, 205, 206, 210], "first": [0, 23, 24, 49, 51, 65, 67, 77, 89, 100, 102, 130, 155, 163, 189, 206], "let": [0, 102, 108], "": [0, 10, 24, 41, 45, 53, 67, 70, 74, 77, 92, 97, 99, 108, 112, 113, 114, 115, 118, 120, 121, 147, 148, 149, 150, 181, 182, 183, 184, 200, 201, 202], "make": [0, 41, 65, 67, 68, 92, 130, 163, 200], "sure": [0, 41, 67, 130, 163], "version": [0, 10, 33, 70, 91, 102, 122, 124, 158, 159, 203, 208], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 206], "extra": [0, 48, 91], "index": [0, 13, 36, 43, 44, 89, 92, 128, 161, 196, 197, 210], "url": [0, 41, 204], "pypi": 0, "secret": [0, 41, 159], "code": [0, 21, 24, 41, 65, 67, 68, 108, 137, 170, 204, 206], "upgrad": 0, "part": [0, 24, 68, 75, 109, 131, 164, 196, 197, 213], "split": [0, 18, 24, 51, 82, 89, 197, 200, 206, 210, 220], "e": [0, 24, 45, 50, 53, 62, 63, 64, 65, 67, 70, 78, 89, 92, 99, 100, 104, 108, 128, 137, 143, 148, 154, 155, 161, 170, 177, 182, 188, 189, 192, 196, 200, 201, 208, 220], "onli": [0, 20, 21, 24, 41, 50, 53, 67, 70, 82, 85, 89, 97, 99, 102, 104, 112, 130, 148, 155, 163, 182, 189, 200, 201, 206], "avail": [0, 10, 21, 33, 50, 62, 63, 78, 85, 89, 91, 99, 143, 144, 148, 154, 155, 177, 178, 182, 188, 189, 203], "user": [0, 41, 65, 91, 108, 201], "valid": [0, 10, 33, 41, 43, 82, 89, 104, 128, 144, 155, 161, 178, 189, 197], "licens": [0, 67, 91, 130, 159, 163], "did": 0, "receiv": [0, 24], "contact": [0, 204], "u": [0, 20, 24, 89, 126, 155, 189, 208], "href": 0, "mailto": 0, "info": [0, 196], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 41, 43, 45, 49, 50, 51, 53, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 72, 75, 77, 78, 85, 89, 91, 92, 95, 99, 100, 102, 104, 108, 112, 113, 116, 118, 121, 122, 126, 128, 130, 144, 145, 147, 148, 149, 155, 161, 163, 178, 179, 181, 182, 183, 189, 191, 192, 197, 200, 201, 202, 204, 206, 212, 213, 220, 221], "simpl": [0, 24], "piec": [0, 51], "import": [0, 10, 33, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 94, 102, 103, 108, 109, 128, 130, 131, 135, 137, 140, 143, 144, 145, 152, 154, 155, 159, 161, 163, 164, 168, 170, 173, 177, 178, 179, 185, 188, 189, 198, 206, 214], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 62, 63, 64, 89, 99, 103, 105, 113, 114, 124, 140, 141, 143, 148, 149, 150, 154, 155, 159, 173, 174, 177, 182, 183, 184, 188, 189, 192, 197, 200, 201, 204, 205, 210, 218], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 62, 63, 64, 99, 105, 113, 114, 124, 141, 143, 148, 149, 150, 154, 174, 177, 182, 183, 184, 188, 191, 192, 197, 200, 201, 204, 205, 206, 210, 215, 218], "builder": [0, 116], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 43, 62, 63, 64, 67, 77, 82, 89, 93, 99, 102, 105, 108, 113, 114, 128, 130, 137, 141, 143, 144, 148, 149, 150, 154, 155, 157, 161, 163, 170, 174, 177, 178, 182, 183, 184, 188, 189, 190], "config": [0, 65], "driver": 0, "memori": [0, 22, 23, 24, 62, 64, 89, 99, 143, 148, 154, 155, 177, 182, 188, 189], "16": [0, 47, 206], "maxresults": 0, "2g": 0, "jar": [0, 41, 210, 218], "nlp_2": 0, "11": [0, 9, 32, 45, 52, 67, 71, 94, 130, 163, 206], "version_publ": 0, "getorcr": 0, "main": 1, "page": [1, 45, 196, 221], "workshop": [1, 24, 41, 75, 89, 109, 131, 144, 155, 164, 178, 189], "hub": [1, 45, 62, 63, 78, 89, 102, 103, 108, 143, 144, 154, 155, 177, 178, 188, 189], "welcom": 1, "python": [1, 19, 20, 21, 24], "legal": [1, 53, 55, 62, 63, 64, 89, 93, 102, 103, 105, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 159], "financ": [1, 53, 55, 62, 63, 64, 89, 93, 102, 103, 105, 159, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 188, 190], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 53, 55, 62, 63, 64, 67, 68, 70, 71, 75, 85, 89, 91, 92, 102, 103, 108, 109, 115, 116, 120, 121, 122, 128, 130, 131, 134, 135, 137, 140, 143, 152, 154, 155, 161, 163, 164, 167, 168, 170, 173, 177, 185, 188, 189, 192, 197, 201, 202, 204, 206, 212], "how": [1, 48, 50, 53, 62, 63, 64, 71, 74, 82, 85, 89, 91, 100, 102, 112, 143, 144, 154, 155, 177, 178, 188, 189], "exampl": [1, 10, 19, 24, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 114, 128, 130, 131, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 204, 206, 209], "get": [1, 13, 36, 41, 43, 67, 72, 89, 99, 114, 116, 128, 144, 148, 150, 159, 161, 178, 182, 184, 189, 197, 200, 201, 210], "start": [1, 10, 18, 22, 33, 43, 44, 45, 75, 85, 89, 102, 108, 109, 128, 131, 137, 155, 159, 161, 164, 170, 189, 200, 201, 206, 210, 220], "requir": [1, 22, 23, 24, 41, 43, 45, 57, 58, 62, 64, 71, 75, 89, 108, 109, 128, 131, 143, 145, 154, 155, 161, 164, 177, 179, 188, 189, 206, 213], "instal": [1, 10, 41, 213], "session": [1, 15, 16, 38, 39, 41, 192, 197, 200, 201, 206, 210, 218], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 99, 102, 103, 104, 108, 109, 110, 112, 113, 114, 116, 118, 121, 128, 130, 131, 135, 137, 140, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 200, 201, 202, 203, 206, 208, 209, 210], "api": [1, 100], "assertionmodel": [2, 25, 43, 45, 48, 128, 137, 161, 170], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 204], "cpu": [2, 23, 25], "sourc": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 118, 121, 126, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 159, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 192, 196, 198, 200, 201, 202, 203, 204, 206, 209, 210, 212, 213, 220], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 47, 68, 94, 99, 114, 144, 148, 150, 178, 182, 184, 206], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 82, 89, 128, 144, 155, 161, 178, 189, 200, 207, 217], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 52, 85, 88, 89, 144, 178, 206], "learning_r": [2, 4, 9, 25, 27, 32, 82], "01": [2, 15, 25, 38, 45, 67, 68, 71, 89, 94, 130, 155, 163, 189, 206], "dropout": [2, 15, 24, 25, 38, 43, 82, 89, 128, 144, 155, 161, 178, 189], "15": [2, 10, 25, 33, 68, 85, 88, 94], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 70, 89, 90, 105, 108, 128, 137, 141, 144, 155, 161, 170, 174, 178, 189, 192, 197, 200, 206], "calcul": [2, 23, 24, 25, 43, 50, 89, 108, 128, 155, 161, 189, 192, 197, 200, 201, 202], "accuraci": [2, 8, 25, 31, 89, 155, 189], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 116, 126, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 196, 200, 201, 210, 212, 218], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 191, 196, 197, 200, 201, 202, 210, 212, 218], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 89, 128, 144, 155, 161, 178, 189, 207, 217, 220], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 42, 43, 50, 51, 53, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 80, 82, 85, 89, 91, 92, 94, 99, 100, 102, 103, 108, 109, 110, 112, 116, 120, 121, 126, 127, 130, 131, 137, 143, 144, 145, 148, 154, 155, 163, 164, 170, 177, 178, 179, 182, 188, 189, 192, 197, 201, 203, 204, 206, 207, 210, 213, 217, 218, 220], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33, 41, 116], "param": [4, 6, 10, 27, 29, 33, 41, 53, 67, 70, 75, 85, 89, 92, 112, 113, 118, 121, 122, 130, 147, 149, 155, 159, 163, 181, 183, 189, 192, 196, 197, 200, 201, 202, 206, 210, 218], "run_test": [4, 6, 27, 29, 201], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 57, 58, 82, 145, 179], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 108, 110, 112, 113, 114, 115, 116, 118, 121, 125, 128, 130, 131, 135, 141, 147, 149, 150, 155, 159, 161, 163, 164, 168, 174, 181, 183, 184, 189, 192, 197, 200, 201, 202, 206, 207, 210, 218], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 44, 89, 155, 189, 207, 217], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 114, 126, 128, 130, 131, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 158, 159, 161, 163, 164, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 197, 200, 201, 204, 206, 210, 213, 218, 220], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 50, 67, 68, 82, 89, 92, 97, 99, 100, 102, 112, 114, 130, 144, 148, 150, 155, 163, 178, 182, 184, 189, 200, 201, 204, 206, 210, 212, 218], "enumer": [9, 32, 210], "deriv": [9, 32, 59, 60], "defin": [9, 22, 32, 41, 45, 48, 52, 57, 58, 65, 78, 81, 85, 89, 91, 94, 104, 108, 145, 155, 179, 189, 201, 210], "new": [9, 24, 32, 41, 43, 50, 54, 68, 72, 89, 91, 93, 97, 99, 102, 103, 108, 112, 114, 122, 137, 140, 148, 150, 155, 157, 170, 173, 182, 184, 189, 190, 191, 192, 196, 206, 208, 220], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 53, 55, 68, 95, 103, 108, 135, 137, 152, 168, 170, 185, 197, 206], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 82, 99, 114, 144, 148, 150, 178, 182, 184, 220], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 74, 75, 78, 82, 102, 103, 109, 112, 128, 131, 140, 160, 161, 164, 173, 206], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 99, 148, 182, 192, 207, 217], "predict": [9, 10, 15, 24, 32, 33, 38, 41, 43, 57, 58, 74, 82, 89, 128, 145, 155, 161, 179, 189, 192, 196, 197, 200, 201, 207, 217, 220], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 105], "genericclassifi": [9, 32, 59, 60, 116], "default_model_node_nam": [9, 32], "except": [10, 33, 89, 200, 201, 213], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 89, 213], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 62, 63, 64, 82, 89, 99, 102, 112, 114, 116, 128, 143, 144, 148, 150, 154, 155, 161, 177, 178, 182, 184, 188, 189], "current": [10, 24, 33, 62, 63, 64, 85, 89, 94, 99, 105, 113, 114, 116, 124, 141, 143, 148, 149, 150, 154, 155, 174, 177, 182, 183, 184, 188, 189, 205, 213, 220], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 44, 51, 65, 67, 78, 85, 89, 90, 91, 92, 94, 100, 102, 108, 112, 114, 128, 130, 137, 155, 161, 163, 170, 189, 200, 201, 203, 206, 213], "addon": 10, "tfgraphbuild": [10, 33, 102, 116], "creat": [10, 12, 22, 23, 33, 35, 41, 44, 53, 65, 68, 94, 102, 116, 125, 196, 197, 200, 201, 206], "graph": [10, 12, 33, 35, 43, 89, 102, 116, 128, 142, 155, 159, 161, 175, 189, 207], "ner_dl": [10, 11, 33, 34, 89, 155, 189], "generic_classifi": [10, 11, 33, 34, 84, 159], "assertion_dl": [10, 11, 33, 34, 43, 128, 161], "relation_extract": [10, 33, 84, 101, 138, 142, 171, 175], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 75, 76, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 109, 113, 114, 118, 131, 143, 144, 148, 149, 150, 154, 155, 159, 164, 177, 178, 182, 183, 184, 188, 189, 192, 206, 210, 218, 221], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 68, 70, 72, 74, 75, 77, 78, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 118, 122, 124, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 157, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 191, 196, 197, 200, 201, 204, 206, 207, 208, 209, 217, 218], "dict": [10, 33, 41, 43, 52, 65, 67, 78, 85, 91, 93, 99, 102, 103, 105, 159, 192, 196, 200, 201, 202, 204, 210, 212, 220], "tf_graph": [10, 33, 102, 206], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 43, 45, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 75, 77, 78, 82, 85, 89, 93, 99, 102, 103, 105, 107, 108, 109, 113, 114, 124, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 159, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 206, 207, 210, 213, 217, 218, 220], "automat": [10, 41, 67, 100, 105, 130, 141, 163, 174, 196], "file": [10, 16, 21, 33, 39, 41, 43, 52, 65, 67, 70, 81, 82, 85, 89, 91, 102, 108, 116, 126, 128, 130, 137, 144, 155, 161, 163, 170, 178, 189, 192, 196, 197, 200, 201, 204, 206, 207, 208, 210, 212, 217, 218], "method": [10, 22, 33, 41, 50, 65, 67, 70, 82, 91, 102, 130, 137, 163, 170, 196, 197, 200, 201, 206, 212, 221], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 59, 60, 92, 105, 112, 113, 118, 120, 121, 141, 147, 149, 174, 181, 183, 200, 201], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 50, 53, 55, 67, 68, 70, 77, 78, 85, 89, 99, 102, 105, 116, 126, 130, 135, 141, 148, 152, 155, 163, 168, 174, 182, 185, 189, 192, 200, 201, 213], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 72, 74, 75, 77, 78, 81, 82, 85, 89, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 113, 114, 116, 124, 128, 130, 131, 134, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 158, 161, 163, 164, 167, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 206, 210, 218, 220], "valu": [10, 22, 23, 33, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 80, 81, 82, 85, 89, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 108, 110, 112, 114, 115, 116, 118, 122, 125, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 188, 189, 190, 196, 197, 198, 200, 201, 202, 204, 212, 220], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 80, 81, 82, 85, 88, 89, 91, 93, 95, 99, 100, 102, 103, 104, 105, 108, 110, 113, 114, 115, 116, 124, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 159, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 192, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 217, 218], "ani": [10, 23, 33, 41, 42, 68, 78, 85, 89, 104, 110, 155, 189, 192, 200, 201], "retriev": [10, 33, 89, 155, 189, 200, 201], "found": [10, 33, 65, 75, 78, 109, 131, 164, 200, 201], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 62, 63, 64, 143, 154, 177, 188], "genericclassifierapproach": [10, 33, 82], "extend": [10, 33, 75, 89, 109, 131, 144, 155, 164, 178, 189, 206], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 48, 50, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 70, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 105, 108, 109, 112, 113, 114, 118, 120, 121, 122, 128, 130, 131, 135, 137, 140, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 159, 161, 163, 164, 168, 170, 173, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 192, 197, 200, 201, 202, 206, 210], "sparknlp": [10, 33, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 102, 103, 105, 109, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 185, 188, 189, 190, 192, 197, 200, 201, 210], "datafram": [10, 33, 41, 68, 104, 108, 191, 192, 196, 197, 200, 201, 204, 205, 206, 207, 210, 212], "pd": [10, 33, 41, 68, 210], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 41, 52, 65, 67, 70, 72, 80, 91, 126, 130, 144, 163, 178, 200, 201, 206, 212], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 102], "200": [10, 24, 33, 102, 218], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 116], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "output_act": 10, "softmax": [10, 18, 108, 116], "loss_func": 10, "cross_entropi": 10, "gc_graph": [10, 33], "auto": [10, 33, 116], "save": [10, 12, 16, 33, 35, 39, 41, 43, 53, 62, 63, 64, 67, 82, 89, 99, 102, 105, 113, 114, 126, 128, 141, 143, 144, 148, 149, 150, 154, 155, 161, 174, 177, 178, 182, 183, 184, 188, 189, 192, 196, 197, 200, 201, 206, 209, 218], "gcl": [10, 33], "pb": [10, 33, 82, 89, 102, 155, 189], "we": [10, 22, 24, 41, 51, 52, 53, 55, 57, 58, 67, 74, 78, 82, 89, 100, 108, 130, 134, 135, 137, 144, 145, 152, 163, 167, 168, 170, 178, 179, 185], "modelfil": [10, 82], "gen_clf": [10, 33, 57, 58, 82, 145, 179], "setlabelcolumn": [10, 33, 57, 82, 89, 102, 116, 144, 145, 155, 178, 179, 189], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 114, 116, 125, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190], "featur": [10, 24, 33, 45, 80, 82, 85, 89], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 80, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 110, 114, 125, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190], "setmodelfil": [10, 33, 82, 102], "setepochsnumb": [10, 33, 82, 102], "setbatchs": [10, 33, 43, 82, 89, 102, 103, 128, 144, 161, 178], "setfeaturesc": [10, 33, 82], "zscore": [10, 33, 82], "setfiximbal": [10, 33, 82, 102], "setlearningr": [10, 33, 43, 82, 102, 128, 161], "001": [10, 24, 33, 82, 89, 102, 155, 189], "setoutputlogspath": [10, 33, 43, 82], "log": [10, 33, 43, 45, 82, 89, 128, 144, 155, 161, 178, 189, 192, 197, 200, 201, 207, 217], "setvalidationsplit": [10, 33, 43, 82, 89, 102], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 48, 49, 52, 65, 67, 70, 72, 74, 85, 88, 90, 91, 94, 95, 99, 102, 103, 104, 108, 114, 128, 130, 137, 140, 148, 150, 161, 163, 170, 173, 182, 184], "features_asm": [10, 33, 82], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 48, 50, 53, 62, 64, 65, 67, 70, 72, 74, 75, 82, 89, 91, 95, 97, 99, 100, 102, 103, 104, 108, 112, 113, 114, 115, 116, 149, 159, 183, 200, 201, 204, 206, 210, 213, 218], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 48, 57, 58, 65, 67, 70, 74, 75, 77, 78, 80, 85, 89, 91, 93, 94, 102, 105, 108, 109, 122, 128, 130, 131, 137, 144, 145, 155, 157, 161, 163, 164, 170, 178, 179, 189, 190, 192, 197, 200, 201, 204, 206, 210, 218, 221], "otherwis": [10, 24, 33, 43, 45, 50, 57, 58, 59, 60, 67, 70, 72, 74, 75, 77, 78, 80, 82, 85, 89, 97, 99, 100, 102, 103, 108, 109, 112, 113, 114, 130, 131, 148, 149, 150, 155, 163, 164, 182, 183, 184, 189, 192, 207, 213, 217, 220], "locat": [10, 41, 53, 55, 62, 63, 64, 65, 74, 89, 91, 93, 102, 103, 105, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 188, 189, 190, 203, 204, 208], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 48, 53, 55, 67, 68, 75, 82, 88, 89, 100, 102, 103, 109, 116, 130, 131, 134, 135, 140, 152, 155, 163, 164, 167, 168, 173, 185, 189, 196, 197, 200, 201, 206, 208], "logregclassifiertfgraphbuild": 10, "svmclassifiertfgraphbuild": 10, "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 116, 128, 161], "blstm_34_32_30_": [10, 33], "_": [10, 33, 47, 71, 72, 89, 155, 189], "format": [10, 23, 33, 41, 43, 65, 67, 70, 85, 88, 89, 91, 94, 130, 155, 163, 189, 192, 196, 197, 200, 201, 202, 204, 206, 212, 218], "setlabelcol": [10, 33, 43, 45, 58, 82, 108, 128, 137, 161, 170], "label": [10, 33, 41, 43, 45, 52, 54, 57, 58, 59, 60, 62, 63, 64, 67, 81, 82, 85, 88, 89, 91, 93, 102, 103, 105, 107, 108, 116, 127, 128, 130, 137, 141, 143, 144, 145, 154, 155, 157, 160, 161, 163, 170, 174, 177, 178, 179, 188, 189, 190, 196, 197, 200, 206, 207, 210, 218], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 65, 67, 68, 70, 74, 75, 77, 78, 81, 85, 88, 90, 91, 92, 94, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 114, 128, 130, 131, 134, 135, 140, 141, 145, 148, 150, 152, 161, 163, 164, 167, 168, 173, 174, 179, 182, 184, 185, 196, 206, 207, 217, 218, 220], "128": [10, 12, 24, 33, 35, 43, 62, 63, 64, 128, 143, 154, 161, 177, 188], "setdropout": [10, 33, 43, 82, 89, 128, 144, 161, 178], "setepoch": [10, 33, 43, 128, 161], "setstartcol": [10, 33, 43, 45, 75, 128, 161], "setendcol": [10, 33, 43, 45, 128, 161], "end": [10, 23, 33, 43, 44, 45, 50, 67, 85, 88, 89, 100, 102, 112, 114, 128, 130, 155, 161, 163, 189, 200, 201, 206, 210, 220], "setmaxsentlen": [10, 33, 43, 128, 161], "250": [10, 33, 43, 78, 128, 161], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 89, 116], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 89, 116, 155, 189], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38, 89, 155, 189], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38, 89, 155, 189], "12": [10, 33, 47, 68, 94, 206], "medic": [10, 108, 116, 192, 204, 209], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 50, 52, 53, 55, 63, 67, 68, 70, 72, 74, 77, 78, 84, 85, 100, 104, 105, 127, 128, 130, 135, 141, 142, 152, 153, 159, 161, 163, 168, 174, 175, 185, 186, 192, 197, 200, 201, 206, 210, 218], "is_med": [10, 12, 33, 35, 192], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 77, 89, 102, 103, 140, 155, 173, 189], "sentenc": [10, 13, 15, 33, 36, 38, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 70, 72, 74, 77, 78, 85, 88, 89, 90, 91, 92, 93, 103, 104, 105, 107, 108, 110, 112, 114, 126, 128, 130, 134, 135, 137, 140, 141, 143, 144, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 185, 188, 189, 190, 192, 196, 197, 200, 201, 206, 210], "token": [10, 33, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 85, 88, 89, 90, 91, 93, 97, 99, 102, 103, 104, 105, 108, 109, 110, 112, 114, 126, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 159, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190, 196, 197, 200, 201, 206, 210], "setmaxepoch": [10, 33, 89, 144, 155, 178, 189], "setrandomse": [10, 33, 89, 92, 97, 112, 155, 189], "setverbos": [10, 33, 43, 89, 155, 189], "setevaluationlogextend": [10, 33], "setincludeconfid": [10, 33, 43, 89, 197], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 89], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 102, 116, 206], "6000": [10, 33], "relu": [10, 24, 33, 116], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 53, 55, 77, 78, 94, 134, 135, 152, 167, 168, 185, 206], "pos_tag": [10, 33, 78, 102, 104, 105, 196], "train_ner_chunk": [10, 33, 102, 206], "depend": [10, 23, 24, 33, 42, 51, 54, 78, 89, 99, 102, 103, 104, 105, 107, 110, 140, 148, 155, 173, 182, 189, 192, 201, 210], "70": [10, 33, 52, 89, 189, 218], "setfroment": [10, 33, 102], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 206], "settoent": [10, 33, 102], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 206], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 50, 80, 85, 89, 104, 155, 189, 200, 201, 206, 218], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 92, 93, 99, 102, 103, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203, 208], "spark": [10, 33, 41, 42, 43, 45, 47, 49, 50, 52, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 80, 82, 85, 88, 89, 91, 93, 94, 95, 99, 102, 103, 104, 105, 108, 109, 110, 113, 114, 124, 126, 127, 128, 130, 131, 140, 143, 144, 148, 149, 150, 154, 155, 157, 159, 161, 163, 164, 173, 177, 178, 182, 183, 184, 188, 189, 190, 192, 197, 200, 201, 204, 205, 206, 210, 212, 218, 221], "model_nam": [10, 33], "want": [10, 33, 41, 42, 43, 51, 53, 55, 65, 67, 74, 78, 89, 92, 99, 100, 102, 104, 108, 110, 128, 130, 135, 148, 161, 163, 168, 182, 204], "configur": [10, 33, 41], "path": [10, 33, 41, 43, 45, 49, 52, 53, 55, 57, 58, 65, 67, 77, 82, 85, 89, 91, 93, 99, 102, 108, 116, 128, 130, 134, 135, 137, 144, 152, 155, 157, 161, 163, 167, 168, 170, 178, 185, 189, 190, 192, 196, 197, 200, 201, 206, 207, 208, 209, 210, 212, 217, 218], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24, 102], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 50, 51, 53, 62, 64, 72, 102, 110, 143, 154, 177, 188, 204, 208], "descript": [10, 33, 41, 50, 99, 108, 137, 148, 170, 182, 201, 206], "everi": [10, 19, 33, 41, 67, 89, 130, 155, 163, 189, 200, 203], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 53, 55, 74, 78, 135, 152, 168, 185], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 50, 53, 57, 58, 62, 63, 64, 67, 68, 70, 74, 78, 82, 89, 92, 94, 97, 99, 102, 103, 104, 108, 110, 112, 114, 116, 118, 144, 150, 178, 184, 196, 197, 200, 201, 204, 206, 209, 212, 218], "lstm_size": [12, 35, 89, 155, 189], "gpu_devic": [12, 35], "nerdl": [12, 35, 192], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 41, 43, 53, 54, 55, 62, 63, 64, 77, 89, 93, 100, 102, 103, 105, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 159, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 188, 189, 190, 200, 203, 205, 206, 210, 213], "folder": [12, 16, 35, 39, 43, 62, 63, 64, 82, 89, 99, 103, 105, 113, 114, 116, 128, 140, 141, 143, 144, 148, 149, 150, 154, 155, 161, 173, 174, 177, 178, 182, 183, 184, 188, 189, 208, 218], "number": [12, 22, 23, 24, 35, 41, 43, 45, 50, 53, 57, 58, 67, 68, 82, 85, 89, 97, 99, 100, 102, 103, 108, 112, 114, 116, 128, 130, 140, 144, 145, 148, 150, 155, 161, 163, 173, 178, 179, 182, 184, 189, 192, 196, 197, 200, 201, 204, 209, 212, 220], "uniqu": [12, 35, 74, 89], "tag": [12, 16, 35, 39, 41, 43, 48, 52, 67, 81, 88, 89, 90, 91, 102, 128, 130, 144, 155, 161, 163, 178, 189, 196, 200, 207, 212, 217, 220], "dimens": [12, 19, 22, 24, 35, 89, 155, 189], "word": [12, 13, 35, 36, 53, 55, 67, 74, 88, 91, 93, 95, 97, 108, 112, 130, 135, 144, 157, 163, 168, 178, 190, 192, 200, 201, 220], "charact": [12, 13, 16, 35, 36, 39, 67, 70, 74, 91, 130, 163, 200, 201], "option": [12, 23, 24, 35, 41, 43, 45, 50, 52, 57, 58, 59, 60, 65, 67, 70, 74, 77, 78, 80, 82, 85, 89, 91, 99, 108, 113, 114, 144, 148, 149, 150, 155, 178, 182, 183, 184, 189, 196, 200, 201, 203, 204, 206, 213, 218], "size": [12, 22, 23, 24, 35, 43, 62, 64, 82, 89, 97, 112, 116, 118, 128, 143, 144, 154, 155, 161, 177, 178, 188, 189, 198], "hidden": [12, 15, 24, 35, 38, 63, 116, 154, 188, 198], "lstm": [12, 22, 24, 35, 89, 155, 189], "disk": [12, 16, 35, 39, 43, 82, 89, 102, 128, 144, 155, 161, 178, 189], "which": [12, 19, 23, 24, 35, 50, 52, 59, 60, 62, 63, 64, 65, 67, 77, 78, 80, 85, 89, 91, 93, 94, 97, 99, 102, 103, 104, 105, 108, 112, 114, 124, 128, 130, 137, 141, 143, 148, 150, 154, 155, 157, 161, 163, 170, 174, 177, 182, 184, 188, 189, 190, 196, 197, 200, 201, 208, 213], "gpu": [12, 23, 35, 159], "being": [12, 13, 24, 35, 36, 67, 110, 130, 163], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 93, 102, 103, 105, 116, 140, 141, 144, 157, 173, 174, 178, 190], "shuffl": [13, 36, 144, 178], "lower": [13, 36, 52, 53, 67, 75, 89, 109, 130, 131, 155, 163, 164, 189, 200], "case": [13, 18, 22, 24, 36, 41, 44, 48, 50, 53, 62, 64, 65, 67, 75, 77, 78, 89, 100, 102, 103, 104, 109, 130, 131, 143, 154, 155, 163, 164, 177, 188, 189, 200, 201, 220], "remov": [13, 36, 48, 50, 52, 95, 104, 200, 201], "addit": [13, 24, 36, 45, 67, 89, 104, 108, 137, 144, 155, 170, 178, 189], "white": [13, 36, 48, 52, 68, 91, 198], "space": [13, 23, 24, 36, 196, 200], "process": [13, 24, 36, 43, 48, 52, 62, 63, 64, 75, 81, 82, 89, 91, 99, 102, 103, 108, 109, 112, 114, 128, 131, 137, 140, 143, 148, 154, 155, 161, 164, 170, 173, 177, 182, 188, 189, 192, 197, 200, 201, 206, 218], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 48, 52, 53, 57, 58, 62, 63, 64, 67, 70, 78, 81, 85, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 104, 105, 108, 110, 112, 114, 115, 116, 128, 130, 137, 141, 148, 150, 155, 157, 161, 163, 170, 174, 182, 184, 189, 190, 196, 197, 200, 201, 203, 204, 205, 206, 207, 210, 212, 217, 218, 220, 221], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 59, 62, 63, 64, 82, 89, 116, 128, 143, 154, 155, 161, 177, 188, 189], "nermodel": [15, 38, 43, 48, 88, 89, 91, 128, 155, 161, 189], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 47, 67, 71, 100, 108, 130, 137, 163, 170, 206], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 89, 155, 189], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 57, 58, 62, 63, 64, 67, 75, 80, 85, 89, 90, 99, 109, 112, 114, 115, 128, 130, 131, 143, 144, 145, 148, 150, 154, 155, 161, 163, 164, 177, 178, 179, 182, 184, 188, 189, 197], "fill": [15, 38, 92], "l": [15, 38, 67, 70, 206], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 62, 64, 82, 89, 116, 128, 143, 144, 154, 155, 161, 177, 178, 188, 189], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 51, 68, 72, 74, 89, 102, 110, 128, 155, 161, 189], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 53, 55, 77, 78, 135, 168], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 47, 65, 110], "lr": [15, 38, 43, 89, 144, 155, 178, 189], "po": [15, 38, 42, 51, 52, 89, 102, 110, 127, 155, 189, 196, 200, 210], "65": [15, 38, 206], "measur": [15, 38, 50], "20": [15, 24, 38, 68, 82, 94, 144, 178], "get_softmax": [15, 38], "score": [15, 38, 43, 50, 59, 60, 82, 89, 93, 105, 128, 141, 155, 157, 161, 174, 189, 190, 196, 197, 202, 207, 217, 220], "threshold": [15, 38, 52, 53, 67, 74, 78, 91, 93, 102, 103, 108, 130, 163, 196, 197, 207, 217], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 43, 45, 50, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 99, 105, 108, 113, 114, 141, 143, 148, 149, 150, 154, 155, 174, 177, 182, 183, 184, 188, 189], "directori": [16, 39, 41], "save_model": [16, 39], "separ": [16, 39, 41, 50, 52, 67, 70, 85, 89, 91, 102, 104, 126, 155, 189, 192, 196, 212], "variabl": [16, 20, 22, 24, 39, 99, 148, 182], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 62, 63, 64, 67, 70, 74, 85, 97, 99, 112, 114, 116, 128, 130, 143, 148, 150, 154, 161, 163, 177, 182, 184, 188, 197, 200, 201], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 74, 89, 102, 192, 206], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 50], "ad": [18, 89, 91, 155, 189, 200, 201], "note": [18, 89, 144, 155, 178, 189, 220], "mai": [18, 22, 24, 44, 53, 65, 75, 78, 89, 104, 109, 131, 164], "effici": [18, 19, 22, 23, 41], "wrapper": [18, 20, 24, 100, 127], "instead": [18, 20, 45, 62, 64, 200], "concaten": [18, 23, 50], "whole": [18, 50], "sequenc": [18, 19, 22, 23, 62, 64, 67, 68, 116, 130, 143, 163, 177], "your": [18, 41, 51, 89, 144, 155, 159, 178, 189, 204], "time": [18, 19, 20, 23, 24, 41, 67, 70, 89, 112, 130, 163, 189, 200], "do": [18, 23, 65, 81, 89, 91, 92, 200, 201], "feed": [18, 62, 64, 89], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 74], "state": [18, 22, 23, 24, 63, 89, 99, 114, 144, 148, 154, 155, 178, 182, 188, 189, 200, 204, 206], "run": [18, 22, 23, 24, 200, 201], "num_proj": [18, 24], "activ": [18, 24, 102, 103, 116, 140, 173, 192, 197, 200, 201], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41], "construct": [19, 24, 63, 154, 188], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22], "object": [19, 41, 54, 62, 63, 64, 89, 102, 127, 143, 144, 154, 155, 177, 178, 188, 189], "repres": [19, 24, 41, 48, 50, 52, 67, 81, 85, 108, 130, 163, 218], "A": [19, 22, 23, 24, 47, 50, 53, 55, 62, 63, 64, 65, 77, 78, 82, 85, 88, 89, 90, 91, 93, 97, 99, 102, 103, 105, 108, 112, 114, 116, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 188, 189, 190, 196, 197, 200, 203, 204, 206, 212], "entir": [19, 22, 62, 64], "expand": 19, "In": [19, 24, 44, 50, 65, 68, 78, 89, 100, 103, 140, 144, 155, 173, 178, 189], "effect": [19, 67, 70, 112, 130, 163], "recurr": [19, 22, 23, 24, 85, 88, 89, 155, 189], "network": [19, 22, 23, 24, 59, 89, 155, 189], "unlik": [19, 22, 99, 148, 182], "subclass": [19, 22, 78, 92, 112, 113, 118, 121, 147, 149, 181, 183], "onc": [19, 89, 97, 103, 112, 140, 173], "put": [19, 33, 51, 74, 144, 178], "loop": [19, 99, 114, 148, 150, 182, 184], "insid": [19, 91, 144, 178], "usual": [19, 91, 105, 108, 141, 174], "lead": [19, 44], "much": [19, 22, 82, 144, 178], "complex": 19, "less": [19, 23, 67, 89, 130, 155, 163, 189], "must": [19, 22, 23, 24, 43, 45, 50, 53, 68, 75, 100, 109, 128, 131, 161, 164], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 62, 63, 64, 89, 143, 154, 155, 159, 177, 188, 189, 192], "v1": 19, "nn": [19, 52, 90], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 89, 155, 189], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": 20, "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 74, 108], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 50, 77, 78, 112, 220], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 48, 89, 189], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 53, 100, 206], "sigmoid": [20, 116], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 67, 70], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "scheme": [20, 88, 206], "distribut": [21, 43, 82, 89, 102, 108, 124, 128, 137, 144, 155, 161, 170, 178, 189, 192], "origin": [21, 24, 41, 53, 57, 58, 67, 70, 72, 91, 94, 108, 130, 137, 145, 163, 170, 179, 200, 201, 220], "modifi": [21, 85, 88, 91, 201], "chang": [21, 24, 85, 91, 196, 200, 201, 213], "just": [21, 89, 155, 189, 200, 201], "therefor": [21, 24], "all": [21, 24, 41, 50, 51, 53, 57, 58, 62, 64, 67, 70, 78, 82, 89, 91, 95, 97, 100, 102, 104, 108, 112, 115, 124, 130, 137, 145, 155, 163, 170, 179, 189, 200, 201, 208, 210, 221], "function": [21, 41, 53, 59, 60, 91, 108, 116, 126, 191, 206, 221], "enabl": [21, 24, 43, 48, 52, 67, 72, 89, 155, 189], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 44, 89, 91, 94, 95, 100, 104, 155, 189, 191, 196, 200, 201, 204], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 50, 85, 99, 102, 114, 115, 148, 150, 182, 184], "reduc": [22, 24], "scale": [22, 24, 53, 82], "begin": [22, 23, 24, 44, 68, 75, 85, 88, 89, 91, 102, 104, 108, 109, 131, 137, 164, 170, 200, 201, 206, 210], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 50, 52, 53, 65, 74, 77, 89, 91, 92, 95, 99, 108, 112, 113, 118, 121, 128, 144, 147, 148, 149, 155, 161, 178, 181, 182, 183, 189, 192, 196, 197, 200, 201, 202, 203, 206, 212], "faster": [22, 62, 64, 143, 154, 177, 188], "bia": [22, 24, 159, 194], "matric": [22, 24], "long": [22, 24, 53, 99, 148, 182, 206], "scope": [22, 23, 24, 43, 92, 128, 161], "match": [22, 23, 43, 45, 53, 62, 64, 65, 67, 74, 75, 85, 90, 109, 128, 130, 131, 143, 154, 161, 163, 164, 177, 188, 201], "inputs_shap": [22, 24], "short": [22, 24, 53, 99, 148, 182], "term": [22, 24, 43, 52, 57, 58, 67, 70, 128, 130, 145, 161, 163, 179, 200, 201, 204], "lstmblockwrapp": 22, "helper": [22, 23, 125, 204, 208], "housekeep": 22, "altern": 22, "similar": [22, 24, 50, 67, 130, 163, 197, 220], "type": [22, 23, 24, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 82, 85, 88, 89, 90, 91, 93, 94, 95, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 200, 201, 202, 207, 210, 217, 218, 220], "_call_cel": 22, "properti": [22, 23, 67, 122, 130, 163], "unit": [22, 24, 95, 102, 103, 116, 140, 173], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 67, 204], "tensor": [22, 23, 24], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 92, 159, 196, 200, 201], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 54, 80], "_num_unit": 22, "expect": [22, 94, 206], "zero": [22, 23, 93, 105, 141, 157, 174, 190], "ha": [22, 23, 24, 41, 43, 48, 50, 52, 54, 57, 58, 65, 67, 68, 75, 77, 89, 92, 94, 100, 102, 109, 114, 128, 131, 144, 145, 150, 155, 161, 164, 178, 179, 184, 189, 197, 218], "heterogen": 22, "specifi": [22, 24, 43, 57, 58, 67, 68, 78, 82, 85, 88, 89, 105, 115, 128, 141, 144, 145, 155, 161, 174, 178, 179, 189, 206], "each": [22, 23, 24, 41, 43, 45, 50, 57, 58, 67, 77, 78, 82, 85, 89, 92, 99, 100, 104, 105, 128, 130, 141, 144, 145, 155, 161, 163, 174, 178, 179, 189, 192, 196, 197, 200, 201, 202, 208, 210, 218], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 50, 57, 58, 60, 76, 78, 80, 82, 145, 179], "element": [22, 23, 118, 196], "pair": [22, 24, 41, 48, 52, 78, 85, 91, 100, 102, 103, 104, 105, 141, 174], "final": [22, 23, 53], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 50, 53, 59, 67, 80, 89, 91, 144, 155, 178, 189, 192, 196, 200, 210], "both": [22, 23, 24, 44, 63, 65, 67, 70, 77, 78, 89, 95, 102, 130, 154, 155, 163, 188, 189, 192, 200, 201, 204], "than": [22, 50, 52, 67, 89, 92, 99, 108, 130, 148, 155, 163, 182, 189], "abov": [22, 112, 220], "consist": [22, 24, 50, 67, 70, 78, 105, 130, 141, 163, 174, 196, 197, 200], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 59, 89, 155, 189], "stack": [23, 24], "combin": [23, 24, 77, 91, 92, 100, 158, 200, 201], "backward": 23, "next": [23, 94], "bidirectional_rnn": 23, "doe": [23, 24, 85, 89, 155, 189], "share": [23, 24, 53, 78], "between": [23, 24, 41, 43, 50, 59, 60, 67, 77, 78, 89, 90, 91, 95, 102, 103, 104, 105, 108, 128, 130, 140, 141, 144, 155, 161, 163, 173, 174, 178, 189, 197, 200, 201, 204, 206, 220], "direct": [23, 24, 41, 102, 103, 104, 116, 140, 173], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 50, 192], "1303": 23, "5778": 23, "instanc": [23, 41, 78, 102, 103, 108, 122, 140, 173, 192], "one": [23, 24, 41, 42, 43, 62, 64, 76, 77, 78, 82, 85, 89, 91, 100, 104, 108, 128, 155, 161, 189, 196, 200, 201, 204, 208], "per": [23, 24, 41, 43, 45, 51, 62, 64, 74, 82, 89, 91, 102, 128, 144, 155, 161, 178, 189, 207, 217, 220], "nest": 23, "appropri": [23, 41, 201], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 50, 67, 70, 78, 85, 89, 91, 99, 100, 114, 130, 148, 150, 155, 163, 182, 184, 189, 192, 197, 200, 201], "correspond": [23, 50, 59, 60, 67, 74, 77, 130, 163, 196, 197, 200, 201, 202], "either": [23, 45, 50, 75, 88, 100, 102, 108, 109, 131, 144, 164, 178, 213], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 75, 78, 82, 85, 89, 100, 108, 109, 131, 155, 164, 189, 206], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 57, 58, 89, 145, 155, 179, 189, 200, 201], "parallel": 23, "those": [23, 41, 50, 68, 91, 104], "tempor": 23, "trade": 23, "off": [23, 89, 128, 144, 155, 161, 178, 189], "take": [23, 62, 64, 67, 77, 80, 82, 100, 112, 122, 130, 143, 163, 177, 196, 197, 212], "while": [23, 41, 44, 89, 94, 108, 112, 137, 155, 170, 189, 192], "smaller": 23, "longer": [23, 85, 197], "bit": [23, 62, 64, 143, 177], "becaus": [23, 92, 112, 113, 118, 121, 147, 149, 181, 183, 206], "avoid": [23, 24, 41, 44, 50, 192, 197, 200, 201], "transpos": 23, "howev": [23, 52, 89, 155, 189], "most": [23, 50, 78, 89, 155, 189, 197], "major": 23, "so": [23, 24, 60, 89, 144, 155, 178, 189], "accept": [23, 144, 178], "emit": 23, "form": [23, 57, 58, 74, 78, 89, 95, 100, 102, 144, 145, 155, 178, 179, 189], "transpar": [23, 198], "swap": [23, 200, 201], "produc": [23, 24, 85, 91], "infer": [23, 24, 89, 105, 141, 155, 174, 189], "back": 23, "prop": 23, "would": [23, 144, 178], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 80, 82, 85, 89, 90, 93, 94, 95, 99, 100, 102, 103, 104, 105, 108, 109, 114, 128, 130, 131, 135, 137, 140, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 170, 173, 177, 178, 179, 182, 184, 185, 188, 189, 190, 218], "veri": [23, 53, 67, 89, 130, 155, 163, 189], "minim": [23, 93, 102, 103, 105, 140, 141, 157, 173, 174, 190], "perform": [23, 24, 43, 67, 70, 89, 99, 104, 112, 113, 114, 130, 148, 149, 155, 163, 182, 183, 189, 192, 207, 217, 220], "penalti": 23, "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 78], "peephol": 24, "pdf": [24, 218], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 82, 89, 102, 108, 128, 144, 155, 161, 178, 189], "continu": [24, 108, 137, 170], "iet": 24, "850": 24, "855": 24, "1999": [24, 94], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 89, 155, 189], "larg": [24, 62, 64, 89, 112, 143, 154, 155, 177, 188, 189], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": 24, "al": 24, "search": [24, 43, 74, 89, 108, 128, 137, 155, 161, 170, 189], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 53, 67, 100, 130, 163, 196, 200, 201, 206], "intern": [24, 89, 91, 99, 108, 114, 122, 148, 155, 159, 182, 189, 203, 206], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 51, 52, 53, 55, 57, 58, 65, 67, 68, 75, 80, 82, 85, 88, 89, 102, 104, 108, 109, 110, 115, 116, 128, 130, 131, 134, 135, 137, 144, 145, 152, 155, 161, 163, 164, 167, 168, 170, 178, 179, 185, 189, 191, 192, 197, 200, 201, 204, 205, 206, 210, 212], "c_state": 24, "m_state": 24, "after": [24, 45, 57, 58, 62, 63, 64, 89, 94, 99, 102, 143, 145, 148, 154, 177, 179, 182, 188, 200], "read": [24, 43, 52, 65, 67, 80, 85, 91, 144, 178, 196, 200, 201, 206], "previou": [24, 220], "wa": [24, 41, 43, 51, 53, 55, 68, 70, 72, 78, 100, 128, 135, 144, 152, 161, 168, 178, 185], "here": 24, "cannot": [24, 213], "via": [24, 48, 52], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 50, 70, 74, 89, 97, 112, 155, 189, 209], "sainath": 24, "bo": 24, "li": 24, "pattern": [24, 41, 67, 90, 95, 99, 130, 148, 163, 182, 200, 210], "v": [24, 45, 100, 207, 217], "convolut": 24, "lvcsr": 24, "task": [24, 41, 62, 63, 64, 105, 112, 141, 143, 154, 174, 177, 188, 206, 210], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 196], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 50, 82, 99, 196], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 50, 114, 150, 184], "real": [24, 89, 155], "onlin": 24, "system": [24, 204], "two": [24, 50, 52, 54, 67, 76, 85, 91, 100, 130, 163], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 57, 58, 108, 112, 197, 200], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 67, 108, 130, 163, 200, 201], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": [24, 158], "ugrnncel": 24, "updat": [24, 89, 189, 196, 208], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 48, 50, 102, 104, 105, 141, 174], "whether": [24, 43, 48, 50, 51, 53, 54, 57, 58, 62, 64, 65, 67, 70, 74, 75, 82, 85, 89, 91, 95, 97, 99, 100, 102, 104, 105, 108, 109, 112, 114, 115, 116, 128, 130, 131, 137, 141, 143, 144, 145, 148, 150, 154, 155, 159, 161, 163, 164, 170, 174, 177, 178, 179, 182, 184, 188, 189, 192, 201, 207, 213], "integr": 24, "instantan": 24, "idea": 24, "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 78, 95, 207, 217, 220], "design": 24, "improv": [24, 44, 89, 99, 105, 114, 141, 148, 155, 174, 182, 189], "flow": 24, "through": [24, 41, 65], "dimension": 24, "y": [24, 70, 72], "To": [24, 43, 45, 48, 52, 62, 63, 64, 65, 71, 102, 108, 143, 154, 177, 188, 206], "achiev": [24, 50, 89, 155, 189], "subsequ": [24, 53], "deepli": 24, "best": [24, 89, 144, 155, 178, 189, 207], "new_i": 24, "equal": [24, 41, 52, 77, 78, 89, 112, 155, 189], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 92, 112, 113, 118, 120, 121, 147, 149, 181, 183], "execut": [24, 41, 67, 70, 130, 163], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 108, 137, 170], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 43, 82, 89, 104, 122, 128, 144, 155, 161, 178, 189], "second": [24, 49, 89, 100, 155, 189, 203], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 51, 67, 90, 100], "g": [24, 53, 62, 63, 64, 78, 89, 99, 100, 104, 108, 128, 137, 143, 148, 154, 155, 161, 170, 177, 182, 188, 189, 192, 196, 200, 201, 220], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 62, 63, 64, 88, 89, 90, 91, 93, 99, 102, 112, 114, 154, 155, 157, 188, 189, 190, 196, 220], "ginsburg": 24, "trick": 24, "brief": [24, 50], "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 90], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 89, 155, 189], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 65, 67, 68, 69, 70, 84, 85, 91, 95, 130, 163, 196, 200, 201], "multipl": [24, 42, 78, 105, 141, 174], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 80, 81, 82, 85, 88, 89, 90, 93, 94, 95, 99, 102, 103, 104, 105, 108, 109, 114, 126, 128, 130, 131, 135, 140, 141, 143, 144, 145, 148, 150, 152, 154, 155, 157, 161, 163, 164, 168, 173, 174, 177, 178, 179, 182, 184, 185, 188, 189, 190, 192, 197, 200, 201, 202], "gain": 24, "boolean": [24, 41, 51, 67, 85, 92, 116, 207, 217], "exist": [24, 41, 89, 102, 108, 137, 170, 208], "alreadi": [24, 41, 57, 58, 89, 102, 108, 137, 145, 155, 170, 179, 189], "error": [24, 89, 155, 189, 196, 197, 213], "string": [24, 68, 74, 75, 81, 85, 90, 95, 100, 109, 116, 118, 131, 144, 164, 178, 192, 196, 198, 200, 201, 205, 206], "mistak": 24, "keyword": [24, 42, 50, 51, 84, 110, 215], "argument": [24, 102], "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 53, 55, 115, 135, 168, 220], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 128, 144, 161, 178], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 43, 50, 65, 77, 78, 89, 94, 155, 189, 197, 200, 201], "act": [24, 144, 178], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 47, 52, 53, 55, 65, 67, 74, 77, 78, 85, 88, 89, 91, 95, 103, 130, 135, 140, 144, 155, 163, 168, 173, 178, 189, 196, 200, 201, 202, 203, 206], "respect": [24, 41], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": [24, 99, 148, 182], "see": [24, 48, 62, 63, 64, 71, 75, 89, 91, 100, 102, 103, 108, 109, 131, 140, 143, 144, 154, 155, 164, 173, 177, 178, 188, 189, 218], "its": [24, 67, 70, 72, 78, 85], "own": [24, 89, 144, 155, 178, 189, 204], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 48, 52, 67, 116, 130, 163, 192, 210], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41, 95, 102], "analysi": [24, 104, 144, 178], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 48, 89, 95, 128, 161], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": [24, 60], "1807": 24, "08518": 24, "mark": [24, 43, 45, 50, 68, 100, 128, 161], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 99, 200, 201], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 67, 70, 72, 89, 99, 130, 148, 155, 163, 182, 189, 200], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 49, 51, 65, 80, 85, 92, 94, 110, 115, 126], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 94, 158], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 49, 67, 68, 75, 97, 99, 108, 112, 114, 126, 130, 131, 148, 150, 163, 164, 182, 184, 204, 206, 210], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": [24, 130], "goe": 24, "contract": [24, 200, 201], "map": [24, 53, 54, 55, 65, 67, 71, 78, 89, 91, 102, 103, 108, 122, 130, 134, 135, 137, 152, 155, 163, 167, 168, 170, 185, 189, 196, 204, 206], "linear": [24, 62, 63, 64, 116, 143, 154, 177, 188], "decoupl": 24, "tf_graph_1x": [33, 206], "manipul": 41, "json": [41, 53, 55, 65, 67, 126, 130, 134, 135, 152, 163, 167, 168, 185, 192, 197, 200, 201, 206, 210, 212], "export": [41, 206, 210], "layout": 41, "annotationlab": 41, "interfac": [41, 108], "john": [41, 68, 70, 72, 100, 159], "snow": [41, 159], "tool": 41, "multi": [41, 53, 62, 63, 64, 67, 82, 143, 144, 154, 177, 178, 188], "modal": 41, "team": 41, "collabor": 41, "ml": [41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 82, 85, 88, 89, 90, 91, 94, 95, 102, 103, 109, 128, 130, 131, 135, 137, 140, 143, 144, 145, 152, 154, 155, 161, 163, 164, 168, 170, 173, 177, 178, 179, 185, 188, 189, 191, 218], "programmat": 41, "conll": [41, 89, 155, 189, 192, 196, 197, 200, 201, 206, 210], "excel": 41, "classif": [41, 82, 84, 143, 144, 145, 154, 159, 177, 178, 179, 188, 192], "preannot": 41, "upload": 41, "interact": [41, 196, 204], "up": [41, 144, 178, 201], "delet": 41, "edit": [41, 53], "usag": [41, 89, 91, 95, 99, 144, 148, 155, 178, 182, 189], "tutori": 41, "set_credenti": 41, "usernam": [41, 204], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": [41, 159], "client": 41, "get_all_project": 41, "visibl": [41, 67, 130, 163], "rtype": [41, 210], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 67, 68, 89, 92, 97, 112, 114, 130, 144, 150, 155, 163, 178, 184, 189, 200, 201, 204, 212], "sequenti": [41, 85], "sampl": [41, 68, 97, 99, 112, 114, 148, 150, 182, 184, 192, 196, 200, 201, 209], "show": [41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 85, 88, 93, 94, 95, 99, 100, 102, 103, 104, 105, 109, 114, 128, 130, 131, 135, 140, 143, 144, 148, 150, 152, 154, 157, 161, 163, 164, 168, 173, 177, 178, 182, 184, 185, 188, 190, 198, 203, 206, 218], "guidelin": 41, "delete_project": 41, "confirm": 41, "set_project_config": 41, "classification_label": 41, "ner_label": [41, 88, 206], "assertion_label": [41, 206, 210], "relations_label": 41, "By": [41, 50, 78, 89, 104, 155, 189], "multiclass": [41, 82], "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "custom": [41, 43, 45, 65, 67, 99, 102, 103, 108, 125, 126, 130, 148, 160, 163, 182, 198, 200], "titl": [41, 200, 201, 210], "increment": 41, "offset": [41, 43], "delete_task": 41, "task_id": [41, 206], "get_annot": 41, "output_nam": 41, "save_dir": [41, 218], "write": [41, 115, 196, 218], "get_conll_data": 41, "input_json_path": [41, 210], "exported_conl": 41, "ground_truth": [41, 108, 210], "excluded_label": [41, 206, 210], "excluded_task_id": [41, 210], "excluded_task_titl": [41, 210], "regex_pattern": [41, 200, 210], "io": [41, 200, 201, 218], "select": [41, 43, 44, 48, 50, 51, 53, 55, 62, 63, 64, 67, 68, 70, 71, 78, 85, 93, 99, 100, 102, 103, 108, 114, 128, 130, 135, 140, 143, 148, 150, 152, 154, 157, 161, 163, 168, 173, 177, 182, 184, 185, 188, 190, 204, 210], "ground": [41, 108, 197, 210], "truth": [41, 108, 197, 210], "complet": [41, 210], "latest": [41, 210], "exclud": [41, 45, 89, 155, 189, 206, 210], "irrelev": [41, 210], "regex": [41, 42, 48, 49, 51, 52, 65, 67, 81, 90, 110, 130, 163, 200, 210], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 67, 68, 70, 89, 92, 97, 112, 114, 130, 144, 150, 155, 163, 178, 184, 189, 204, 212], "panda": [41, 68, 196, 197, 201, 210], "relev": [41, 50, 206], "assign": [41, 200, 201, 202], "strategi": [41, 85, 100, 196], "occurr": [41, 89, 108, 155, 189], "unannot": 41, "count": [41, 89, 192, 200, 201], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 51, 53, 55, 65, 67, 78, 85, 91, 93, 102, 103, 105, 110, 130, 134, 135, 141, 152, 157, 163, 167, 168, 174, 185, 190, 192, 196, 200, 201, 202, 212], "entity_label": [41, 67, 126, 130, 163], "sample_weight_or_count": 41, "max": [41, 43, 45, 53, 58, 62, 63, 64, 112, 114, 128, 143, 145, 154, 161, 177, 179, 188, 198], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "were": [41, 54, 89, 155, 189, 210], "discard": [41, 93, 157, 190], "rest": [41, 48, 52, 81, 85, 91, 197], "plausibl": 41, "possibl": [41, 42, 43, 48, 50, 51, 52, 53, 54, 58, 65, 78, 81, 82, 85, 91, 95, 102, 104, 110, 115, 116, 128, 145, 161, 179, 200, 201], "neg": [41, 43, 99, 105, 148, 182], "entity1": [41, 100, 102, 103, 140, 173], "entity2": [41, 100, 102, 103, 140, 173], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 72, 201], "full_pipelin": 41, "df": [41, 94, 127, 191, 201, 204, 205, 206], "collect": [41, 80, 89, 155, 189], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 85, 88, 89, 90, 91, 94, 95, 102, 103, 104, 105, 108, 109, 110, 114, 128, 130, 131, 135, 137, 140, 143, 144, 150, 152, 154, 155, 161, 163, 164, 168, 170, 173, 177, 178, 184, 185, 188, 189, 210], "older": 41, "offeset": 41, "overrit": 41, "upload_preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 43, 89, 192, 200, 201, 202, 207, 217, 220], "present": [41, 43, 47, 48, 85, 88, 91, 108, 128, 137, 161, 170], "comparison": [41, 77, 201], "made": [41, 85], "full": [41, 53, 95, 99, 148, 182], "partial": [41, 53], "nerdlmetr": [41, 127], "report": [41, 197, 200, 201, 209], "review_annot": 41, "conll_path": [41, 196, 197, 200, 201], "ner_model_path": [41, 89, 155, 189], "review": 41, "compar": [41, 50, 192, 201], "conn_path": 41, "chunk_based_comparison_df": 41, "cuhunk": 41, "token_based_comparision_df": 41, "chunk_frequency_df": 41, "metrics_result": 41, "annotationmerg": 42, "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 118, 120, 121, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 118, 121, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190], "merg": [42, 57, 58, 84, 88, 107, 145, 159, 179], "inputtyp": [42, 51, 110], "wordpiec": [42, 51, 110], "sentence_embed": [42, 51, 74, 77, 78, 108, 110, 137, 144, 170, 178], "categori": [42, 51, 57, 58, 59, 60, 62, 64, 82, 102, 103, 105, 110, 140, 141, 143, 144, 145, 160, 173, 174, 177, 178, 179], "sentiment": [42, 51, 110, 144, 178], "named_ent": [42, 51, 63, 88, 89, 90, 91, 93, 110, 154, 155, 157, 188, 189, 190, 206], "labeled_depend": [42, 51, 53, 55, 110, 134, 135, 152, 167, 168, 185], "languag": [42, 43, 45, 50, 51, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 75, 77, 78, 82, 85, 89, 93, 99, 102, 103, 105, 108, 109, 110, 113, 114, 126, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203, 206], "empty_data": [42, 68, 72, 108], "createdatafram": [42, 43, 47, 49, 50, 52, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 85, 88, 89, 91, 93, 94, 95, 99, 102, 103, 105, 108, 109, 110, 114, 128, 130, 131, 140, 143, 144, 148, 150, 154, 155, 157, 161, 163, 164, 173, 177, 178, 182, 184, 188, 189, 190], "todf": [42, 43, 47, 49, 50, 52, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 85, 88, 89, 91, 93, 94, 95, 99, 102, 103, 104, 105, 108, 109, 110, 114, 128, 130, 131, 140, 143, 144, 148, 150, 154, 155, 157, 161, 163, 164, 173, 177, 178, 182, 184, 188, 189, 190], "document1": 42, "document2": [42, 68], "setinputtyp": [42, 110], "all_doc": 42, "pipelinemodel": [42, 57, 58, 89, 144, 155, 178, 189, 191, 192, 200, 201, 218], "setstag": [42, 44, 47, 50, 51, 53, 55, 57, 58, 62, 63, 64, 68, 75, 77, 78, 80, 82, 89, 93, 105, 109, 110, 131, 135, 143, 144, 145, 152, 154, 155, 157, 164, 168, 177, 178, 179, 185, 188, 189, 190], "lp": 42, "lightpipelin": [42, 72, 201, 210], "doc": [42, 108, 137, 170, 192, 196], "replic": 42, "23": [42, 49, 158], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 118, 120, 121, 135, 168], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 76, 77, 78, 80, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 118, 120, 121, 135, 168], "skiplpinputcolsvalid": [42, 53, 80, 110, 120, 121], "filter": [42, 48, 51, 52, 54, 91, 97, 104, 110, 112, 197, 200, 201, 203, 206], "algorithm": [43, 45, 50, 57, 58, 128, 145, 161, 179, 200], "absent": [43, 48, 128, 161], "hypothet": [43, 48, 128, 161], "condit": [43, 89, 128, 155, 161, 189], "associated_with_other_person": [43, 128, 161], "etc": [43, 78, 100, 108, 128, 137, 161, 170], "pretrain": [43, 45, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 99, 102, 103, 104, 105, 108, 110, 113, 114, 126, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 157, 159, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 208], "assertiondlmodel": [43, 48, 128, 161], "startcol": [43, 45, 75, 109, 128, 131, 161, 164], "endcol": [43, 45, 128, 161], "batchsiz": [43, 62, 64, 82, 89, 103, 128, 140, 143, 144, 154, 155, 161, 173, 177, 178, 188, 189], "optim": [43, 82, 89, 128, 155, 161, 189, 200], "learningr": [43, 82, 128, 161], "rate": [43, 82, 89, 128, 144, 155, 161, 178, 189, 206], "maxsentlen": [43, 128, 161], "graphfold": [43, 89, 116, 128, 155, 161, 189], "extern": [43, 85, 89, 91, 116, 128, 155, 161, 189], "hdf": [43, 82, 89, 102, 108, 128, 137, 144, 155, 161, 170, 178, 189, 208], "dbf": [43, 82, 89, 102, 108, 128, 137, 144, 155, 161, 170, 178, 189], "cloud": [43, 82, 89, 102, 108, 128, 137, 144, 155, 161, 170, 178, 189], "storag": [43, 82, 89, 102, 108, 128, 137, 144, 155, 161, 170, 178, 189], "s3": [43, 74, 82, 89, 102, 108, 128, 137, 144, 155, 161, 170, 178, 189, 203], "graphfil": [43, 89, 116, 128, 155, 161, 189], "happen": [43, 89, 128, 155, 161, 189], "configprotobyt": [43, 62, 63, 64, 89, 99, 112, 114, 128, 143, 144, 148, 150, 154, 155, 161, 177, 178, 182, 184, 188, 189], "configproto": [43, 62, 63, 64, 89, 99, 112, 114, 128, 143, 144, 148, 150, 154, 155, 161, 177, 178, 182, 184, 188, 189], "serial": [43, 62, 63, 64, 89, 99, 112, 114, 128, 143, 144, 148, 150, 154, 155, 161, 177, 178, 182, 184, 188, 189], "byte": [43, 62, 63, 64, 89, 99, 112, 114, 128, 143, 144, 148, 150, 154, 155, 161, 177, 178, 182, 184, 188, 189], "config_proto": [43, 128, 161], "serializetostr": [43, 128, 161], "validationsplit": [43, 82, 89, 128, 144, 155, 161, 178, 189], "proport": [43, 89, 128, 144, 155, 161, 178, 189, 200, 201, 202], "against": [43, 50, 89, 128, 144, 155, 161, 178, 189, 192, 201], "testdataset": [43, 89, 128, 155, 161, 189], "statist": [43, 89, 128, 155, 161, 189], "dure": [43, 67, 70, 74, 89, 103, 128, 130, 144, 155, 161, 163, 178, 189, 201, 202, 204], "includeconfid": [43, 89, 128, 155, 161, 189], "confid": [43, 48, 52, 53, 55, 59, 60, 82, 85, 89, 91, 93, 105, 108, 128, 134, 135, 141, 152, 155, 157, 161, 167, 168, 174, 185, 189, 190, 197], "metadata": [43, 44, 49, 50, 51, 65, 67, 74, 78, 85, 88, 89, 92, 93, 94, 102, 103, 104, 105, 110, 115, 128, 140, 155, 157, 161, 173, 189, 190], "enableoutputlog": [43, 89, 128, 144, 155, 161, 178, 189], "outputlogspath": [43, 82, 89, 128, 144, 155, 161, 178, 189], "won": [43, 82, 89, 102, 128, 144, 155, 161, 178, 189], "level": [43, 48, 50, 52, 65, 89, 128, 144, 155, 161, 178, 189, 206], "scopewindow": [43, 128, 161], "window": [43, 84, 89, 112, 128, 155, 159, 161, 189], "express": [43, 48, 52, 67, 128, 130, 161, 163], "document_assembl": [43, 44, 45, 49, 57, 58, 90, 93, 94, 99, 114, 128, 145, 148, 150, 157, 161, 179, 182, 184, 190, 210], "doc2chunk": [43, 68, 75, 94, 109, 131, 164], "setchunkcol": [43, 45, 75, 90, 109, 128, 131, 161, 164], "setstartcolbytokenindex": [43, 75], "setfailonmiss": [43, 75], "setlowercas": [43, 53, 75, 95], "wordembeddingsmodel": [43, 45, 50, 53, 55, 67, 68, 70, 72, 74, 77, 78, 85, 88, 89, 90, 91, 102, 103, 104, 105, 128, 130, 135, 140, 152, 155, 161, 163, 168, 173, 185, 189], "embeddings_clin": [43, 45, 50, 53, 55, 67, 68, 70, 72, 78, 85, 88, 90, 91, 102, 103, 104, 105, 128, 130, 135, 140, 152, 161, 163, 168, 173, 185], "en": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 82, 85, 88, 89, 90, 91, 92, 93, 99, 102, 103, 104, 105, 108, 113, 114, 126, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 152, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190], "setcasesensit": [43, 45, 48, 57, 58, 62, 63, 64, 65, 90, 103, 108, 110, 128, 137, 143, 145, 154, 161, 170, 177, 179, 188], "012": [43, 128, 161], "015": [43, 128, 161], "setscopewindow": [43, 128, 161], "assertionpipelin": [43, 45, 48, 128, 137, 161, 170], "srt": [43, 116], "setgraphfil": [43, 89, 116], "setconfigprotobyt": [43, 62, 63, 64, 89, 99, 112, 114], "conf": [43, 89], "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 102], "float": [43, 50, 53, 57, 58, 67, 74, 77, 78, 80, 82, 85, 89, 91, 93, 102, 103, 108, 144, 178, 196, 197, 200, 201, 202, 207, 217], "maximum": [43, 53, 57, 58, 89, 97, 99, 103, 104, 108, 112, 114, 116, 144, 145, 148, 150, 155, 178, 179, 182, 184, 189], "settestdataset": 43, "read_a": [43, 52, 65, 67, 85, 91], "reada": [43, 52, 65, 67, 85, 91], "waht": 43, "left": [43, 53, 102, 103, 104, 140, 173], "right": [43, 50, 53, 77, 102, 103, 104, 140, 173], "dl": 43, "approach": [43, 50, 53, 55, 120, 128, 134, 135, 152, 161, 167, 168, 185], "targetnerlabel": [43, 45, 128, 161], "common": [43, 48, 52, 53, 55, 57, 58, 65, 67, 70, 75, 77, 78, 80, 82, 85, 88, 89, 91, 94, 102, 103, 108, 109, 128, 130, 131, 135, 137, 140, 145, 152, 155, 159, 161, 163, 164, 168, 170, 173, 179, 185, 189], "fever": [43, 48, 128, 161], "sore": [43, 48, 128, 161], "throat": [43, 48, 128, 161], "stomach": [43, 48, 52, 128, 161], "pain": [43, 48, 52, 108, 128, 161], "she": [43, 128, 161, 206], "maintain": [43, 128, 161], "epidur": [43, 48, 128, 161], "pca": [43, 48, 128, 161], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 65, 67, 70, 74, 77, 78, 85, 88, 89, 90, 91, 93, 104, 105, 108, 110, 128, 130, 135, 137, 144, 152, 155, 161, 163, 168, 170, 178, 185, 189], "medicalnermodel": [43, 50, 53, 55, 67, 68, 70, 72, 78, 85, 88, 89, 90, 91, 102, 103, 104, 105, 128, 130, 135, 140, 152, 155, 161, 163, 168, 173, 185, 189], "ner_clin": [43, 104, 105, 128, 161], "nerconvert": [43, 48, 50, 67, 68, 70, 74, 77, 85, 88, 91, 102, 103, 104, 105, 128, 130, 140, 161, 163, 173], "ner_chunk": [43, 48, 50, 53, 55, 67, 68, 70, 72, 74, 77, 78, 84, 87, 88, 91, 100, 102, 103, 104, 105, 126, 128, 130, 135, 140, 152, 161, 163, 168, 173, 185, 200, 201, 218], "clinicalassert": [43, 48, 128, 161], "selectexpr": [43, 44, 47, 48, 50, 52, 53, 55, 65, 71, 74, 75, 77, 78, 85, 88, 93, 94, 95, 102, 103, 104, 105, 109, 128, 131, 135, 140, 144, 157, 161, 164, 168, 173, 178, 190], "truncat": [43, 44, 47, 48, 50, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 75, 77, 78, 93, 95, 99, 100, 102, 103, 104, 105, 109, 114, 128, 130, 131, 135, 140, 143, 144, 148, 150, 152, 154, 157, 161, 163, 164, 168, 173, 177, 178, 182, 184, 185, 188, 190], "bytearrai": 43, "assertion_jsl_aug": 43, "lang": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 92, 93, 99, 102, 103, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203], "remote_loc": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 92, 93, 99, 102, 103, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203], "download": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 93, 99, 102, 103, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203, 208, 209], "load": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 74, 77, 78, 82, 85, 89, 93, 99, 103, 105, 108, 113, 114, 130, 134, 135, 140, 141, 143, 144, 148, 149, 150, 152, 154, 155, 157, 163, 167, 168, 173, 174, 177, 178, 182, 183, 184, 185, 188, 189, 190, 192, 203, 206], "remot": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 77, 78, 82, 85, 89, 93, 99, 102, 103, 105, 108, 113, 114, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 148, 149, 150, 154, 155, 157, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 182, 183, 184, 188, 189, 190, 203], "resourc": [43, 45, 49, 50, 51, 57, 58, 59, 60, 67, 70, 74, 77, 78, 80, 82, 85, 89, 91, 99, 108, 110, 113, 114, 144, 148, 149, 150, 155, 178, 182, 183, 184, 189, 203], "Will": [43, 45, 50, 57, 58, 59, 60, 67, 70, 74, 77, 78, 82, 85, 99, 108, 113, 114, 148, 149, 150, 182, 183, 184, 189], "repositori": [43, 45, 50, 57, 58, 59, 60, 67, 70, 74, 77, 78, 82, 85, 99, 108, 113, 114, 148, 149, 150, 182, 183, 184, 189], "assertionchunkconvert": 44, "some": [44, 67, 70, 78, 89, 130, 155, 163, 189], "issu": [44, 90, 196, 197], "indic": [44, 50, 82, 85, 99], "robust": [44, 159, 194], "wai": [44, 50], "reliabl": 44, "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "convert": [44, 47, 49, 67, 75, 91, 95, 109, 110, 130, 131, 163, 164, 196, 200, 201, 205], "setchunktextcol": 44, "setchunkbegincol": 44, "char_begin": 44, "setchunkendcol": 44, "char_end": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "minni": 44, "57": 44, "63": [44, 47, 85, 88, 91], "62": [44, 70, 72], "pcp": [44, 67, 71, 130, 163], "31": [44, 49, 104, 206], "34": [44, 47, 206], "33": 44, "inputcol": [44, 62, 64, 80, 116, 125, 144, 178], "outputcol": [44, 80, 125, 218], "col": [44, 49, 52, 65, 71, 74, 102, 108, 137, 170], "setparam": [44, 68, 75, 80, 109, 121], "assertionlogregapproach": 45, "regress": [45, 57, 58, 59, 62, 64, 143, 145, 177, 179], "done": [45, 89, 144, 155, 178, 189, 201], "assertionlogregmodel": [45, 128, 161], "maxit": [45, 57, 58, 145, 179], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 50, 77, 84, 99, 112, 114, 148, 150, 159, 182, 184, 200, 201], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 49, 53, 55, 78, 90, 93, 128, 135, 152, 157, 161, 168, 185, 190, 210], "chunker": [45, 84, 90, 128, 159, 161], "Then": [45, 74, 89, 102, 108, 144, 155, 178, 189], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 67, 71, 94, 95, 130, 163, 206], "labelcol": [45, 57, 58, 108, 137, 145, 170, 179], "setmaxit": [45, 57, 58], "lamda": 45, "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "logreg": [45, 57, 58, 145, 179], "logarithm": [45, 57, 58, 145, 179], "obtain": [45, 50, 72, 100, 105, 128, 141, 155, 161, 174, 189, 202], "assertionpretrain": 45, "assertion_ml": 45, "assertiondl": [46, 84, 129, 133, 162, 166], "assertion_chunk_convert": [46, 84], "assertion_dl_reg": [46, 84], "chunk2token": 47, "chunkassembl": [47, 75, 109, 131, 164], "ngramgener": [47, 50], "ngram": [47, 53, 58, 97, 112, 145, 179], "setdelimit": 47, "setn": 47, "setenablecumul": 47, "ngram_token": 47, "year": [47, 50, 67, 71, 77, 85, 88, 91, 94, 130, 158, 163], "old": [47, 50, 67, 71, 85, 88, 89, 91, 102, 103, 130, 155, 163, 189], "man": [47, 85, 88, 91], "hospit": [47, 85, 88, 91, 204], "a_63": 47, "old_man": 47, "14": [47, 67, 68, 71, 130, 163], "man_pres": 47, "18": [47, 67, 71, 108, 114, 130, 150, 163, 184], "28": [47, 50, 206], "presents_to": 47, "27": 47, "to_th": 47, "41": [47, 53, 55, 104, 134, 135, 152, 167, 168, 185], "the_hospit": 47, "42": [47, 52, 206], "hospital_": 47, "assertionfilter": 48, "come": [48, 50, 52, 85, 108, 137, 170], "criteria": [48, 52, 54, 81, 85], "isin": [48, 52, 81], "whitelist": [48, 52, 81, 91], "ignor": [48, 52, 62, 64, 67, 81, 85, 91, 97, 99, 108, 112, 114, 130, 143, 148, 150, 154, 163, 177, 182, 184, 188, 200], "what": [48, 52, 85, 93, 95, 100, 102, 108, 157, 190], "entitiesconfid": [48, 52, 81], "setcriteria": [48, 52, 81], "setwhitelist": [48, 52, 74, 81], "chunksfilt": 48, "casesensit": [48, 62, 64, 65, 143, 154, 177, 188], "definit": [48, 93, 105, 141, 157, 174, 190], "chunkconvert": 49, "regexmatch": [49, 51, 65, 110], "test_data": [49, 110, 201, 206], "my": [49, 93, 144, 157, 178, 190], "rule": [49, 65, 67, 89, 130, 163, 192], "ceremoni": 49, "regex_match": 49, "setexternalrul": [49, 51, 110], "src": [49, 51, 89, 110, 144, 155, 178, 189], "matcher": [49, 110], "txt": [49, 51, 67, 70, 72, 110, 130, 163, 200, 201], "delimit": [49, 85, 91, 112], "outdf": 49, "71": 49, "80": 49, "chunkkeyphraseextract": 50, "kei": [50, 51, 53, 92, 93, 105, 110, 115, 141, 157, 159, 174, 190, 192, 196, 197, 202, 204, 220], "phrase": [50, 90, 99, 148, 182], "bertsentenceembed": [50, 77, 78, 108, 110, 137, 170], "cosin": [50, 53, 108, 137, 170], "represent": [50, 65, 77, 78, 91], "maxim": [50, 78, 102], "margin": [50, 198], "mmr": 50, "setdiverg": 50, "selectmostdiffer": 50, "other": [50, 53, 55, 62, 63, 64, 67, 68, 70, 78, 85, 89, 93, 102, 103, 104, 105, 108, 128, 130, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 160, 161, 163, 167, 168, 170, 173, 174, 177, 178, 179, 188, 190, 200, 201, 204], "too": [50, 89, 155, 189], "broader": 50, "thei": [50, 60, 78, 89, 112, 155, 189, 204], "belong": 50, "understand": 50, "variou": [50, 99, 148, 182], "rank": 50, "gram": [50, 97, 112], "yakekeywordextractor": 50, "yake": 50, "textmatch": 50, "desir": [50, 53, 85, 104, 200], "latter": 50, "topn": [50, 74], "out": [50, 89, 95, 97, 108, 112, 144, 155, 178, 189], "conjunct": 50, "diverg": 50, "aim": [50, 99, 148, 182], "goal": 50, "within": [50, 75, 78, 109, 131, 164], "interv": 50, "higher": [50, 197], "enforc": 50, "ensur": 50, "sole": 50, "constraint": [50, 206], "documentlevelprocess": 50, "row": [50, 51, 206], "rather": [50, 89, 99, 148, 182], "particular": [50, 78, 105, 108, 137, 141, 170, 174], "concatenatesent": 50, "averag": [50, 62, 64, 76, 77, 78], "droppunctu": 50, "punctuat": [50, 95, 200, 201], "ner_tagg": [50, 105], "ner_jsl_slim": 50, "ner_tag": [50, 102, 103, 104, 105, 140, 173], "ner_convert": [50, 53, 55, 68, 74, 78, 91, 105, 135, 152, 168, 185], "key_phrase_extractor": 50, "settopn": 50, "setdocumentlevelprocess": 50, "ner_chunk_key_phras": 50, "her": [50, 77, 93, 157, 190], "becom": [50, 77], "last": [50, 77, 89, 99, 108, 155, 189, 201], "he": [50, 70, 77], "complain": [50, 77], "swell": [50, 77], "hi": [50, 77, 93, 157, 190], "forearm": [50, 77], "explod": [50, 52, 53, 55, 65, 71, 74, 77, 78, 85, 88, 93, 95, 102, 103, 104, 105, 135, 140, 144, 157, 168, 173, 178, 190, 192], "AS": [50, 53, 55, 77, 78, 93, 135, 157, 168, 190], "key_phras": 50, "documentsimilar": 50, "mmrscore": 50, "gestat": 50, "mellitu": 50, "7391447825527298": 50, "4366776288430703": 50, "7323921930094919": 50, "44348688715422274": 50, "13577881610104517": 50, "085800103824974": 50, "setselectmostdiffer": 50, "highest": [50, 82, 85, 97, 99, 112, 114, 148, 150, 182, 184], "setconcatenatesent": 50, "them": [50, 62, 63, 64, 77, 78, 82, 89, 103, 104, 108, 143, 154, 155, 177, 188, 189], "setdroppunctu": 50, "sbert_jsl_medium_uncas": 50, "chunksentencesplitt": 51, "documento": 51, "header": [51, 80, 144, 178, 198, 206], "title_regex": 51, "paragraph": [51, 92], "groupbysent": 51, "insertchunk": 51, "defaultent": 51, "setgroupbysent": 51, "assum": [51, 78, 202], "detector": [51, 200, 201, 210], "setinsertchunk": 51, "insert": 51, "setdefaultent": 51, "chunkfiltererapproach": 52, "chunkfiltererapproachmodel": 52, "blacklist": [52, 67, 81, 85, 91, 130, 163], "filtervalu": [52, 81], "attribut": [52, 72], "confidencethreshold": [52, 218], "past": 52, "histori": 52, "gastroenter": 52, "docassembl": 52, "postagg": [52, 102, 103, 140, 173], "perceptronmodel": [52, 78, 102, 103, 104, 105, 140, 173, 210], "setregexpars": [52, 90], "chunkerfilt": 52, "chunksfilterapproach": 52, "entitiesconfidenceresourc": [52, 85], "setblacklist": [52, 67, 81], "setregex": [52, 81], "dash": [52, 102, 104], "creteria": 52, "setfilterent": 52, "filter_bi": 52, "filterent": 52, "setentitiesconfidenceresourc": [52, 85], "binari": [52, 91, 105, 108, 141, 174], "chunkfilter": 52, "17": [52, 85, 88, 206], "22": [52, 53, 55, 94, 134, 135, 152, 158, 167, 168, 185, 206], "36": 52, "53": 52, "81": [52, 104, 206], "110": [52, 85, 88], "now": 52, "care": [52, 104], "118": 52, "132": 52, "black": [52, 91, 198, 218, 219], "chunkmapperfuzzymatchingparam": 53, "fuzzymatch": 53, "enabletokenfingerprintmatch": 53, "enablecharfingerprintmatch": 53, "enablefuzzymatch": 53, "maxtokenngramfingerprint": 53, "mintokenngramfingerprint": 53, "maxtokenngramdroppingtoken": 53, "maxtokenngramdroppingcharsratio": 53, "maxtokenngramdroppingoper": 53, "maxcharngramfingerprint": 53, "mincharngramfingerprint": 53, "fuzzymatchingdist": 53, "fuzzymatchingdistancethreshold": 53, "fuzzydistancescalingmod": 53, "setenabletokenfingerprintmatch": 53, "etfm": [53, 122], "fingerprint": 53, "driven": 53, "three": 53, "maxtokenngramdrop": 53, "setenablecharfingerprintmatch": 53, "ecfm": 53, "char": [53, 67, 89, 130, 155, 163, 189], "setenablefuzzymatch": 53, "efm": 53, "fuzzi": 53, "setmaxtokenngramfingerprint": 53, "mxtnf": 53, "setmintokenngramfingerprint": 53, "mntnf": 53, "min": [53, 58, 145, 179, 198], "setmaxtokenngramdroppingtoken": 53, "etd": 53, "drop": 53, "enabletokenngrammatch": 53, "whenev": 53, "matter": [53, 102], "high": [53, 197], "sy": 53, "maxsiz": 53, "setmaxtokenngramdroppingcharsratio": 53, "amount": [53, 74, 197], "ratio": 53, "setmaxtokenngramdroppingoper": 53, "setmaxcharngramfingerprint": 53, "setmincharngramfingerprint": 53, "minimum": [53, 58, 67, 89, 130, 155, 163, 189, 196], "setfuzzymatchingdist": 53, "fmd": 53, "distanc": [53, 67, 74, 78, 102, 103, 104, 108, 130, 137, 163, 170], "levenshtein": [53, 67, 74, 130, 163], "longest": 53, "jaccard": 53, "setfuzzymatchingdistancethreshold": 53, "fmdth": 53, "setfuzzydistancescalingmod": 53, "fdsm": 53, "mode": [53, 67, 70, 82, 127, 128, 130, 161, 163, 204], "integ": [53, 67, 68, 89, 114, 130, 150, 163, 184, 189, 196, 197, 204], "commonchunkmapperparam": 53, "allowmultitokenchunk": 53, "multivaluesrel": 53, "lowercas": [53, 55, 67, 75, 95, 109, 130, 131, 134, 135, 152, 163, 164, 167, 168, 185, 200, 201], "setallowmultitokenchunk": 53, "mc": 53, "skip": [53, 67, 130, 163], "multitoken": 53, "setmultivaluesrel": 53, "send": 53, "setrel": [53, 55, 135, 152, 168, 185], "lc": 53, "chunkmapperapproach": [53, 134, 152, 167, 185], "mapper": [53, 55, 134, 135, 152, 167, 168, 185], "jsondictionari": [53, 55, 134, 135, 152, 167, 168, 185], "chunkmappermodel": [53, 134, 152, 167, 185], "label_depend": [53, 54, 55, 100, 107, 134, 135, 152, 167, 168, 185], "mappinmg": [53, 55, 134, 135, 152, 167, 168, 185], "go": [53, 55, 134, 135, 152, 167, 168, 185, 197], "decid": [53, 55, 134, 135, 152, 167, 168, 185], "ner_posology_larg": [53, 55, 78, 135, 152, 168, 185], "nerconverterintern": [53, 55, 72, 78, 91, 100, 135, 152, 168, 185, 206], "chunkermapperapproach": [53, 55, 135, 152, 168, 185], "setdictionari": [53, 55, 65, 135, 152, 168, 185], "home": [53, 55, 135, 152, 168, 185], "mappings2": [53, 55, 135, 152, 168, 185], "action": [53, 55, 134, 135, 152, 167, 168, 185], "sampledata": [53, 55, 78, 135, 152, 168, 185], "warfarina": [53, 55, 134, 135, 152, 167, 168, 185], "lusa": [53, 55, 134, 135, 152, 167, 168, 185], "amlodipin": [53, 55, 134, 135, 152, 167, 168, 185], "mg": [53, 55, 78, 134, 135, 152, 167, 168, 185], "35": [53, 55, 104, 134, 135, 152, 167, 168, 185], "analges": [53, 55, 134, 135, 152, 167, 168, 185], "56995": [53, 55, 134, 135, 152, 167, 168, 185], "all_rel": [53, 55, 134, 135, 152, 167, 168, 185], "antipyret": [53, 55, 134, 135, 152, 167, 168, 185], "9989": [53, 55, 134, 135, 152, 167, 168, 185], "55": [53, 55, 134, 135, 152, 167, 168, 185], "56": [53, 55, 134, 135, 152, 167, 168, 185], "9123": [53, 55, 134, 135, 152, 167, 168, 185], "bow": [53, 55, 74, 135, 168], "drug_chunk_embed": [53, 55, 78, 135, 168], "drug_chunk": [53, 55, 78, 135, 168], "drug_embed": [53, 55, 78, 135, 168], "cach": [53, 55, 78, 80, 85, 99, 113, 114, 135, 137, 148, 149, 168, 170, 182, 183, 208], "drug_action_treatment_mapp": [53, 55], "open": [53, 55, 62, 63, 64, 75, 89, 91, 93, 102, 103, 105, 109, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 188, 190], "chunkmapperfilter": 54, "chunkmapp": [54, 56, 84, 133, 136, 166, 169], "successfulli": 54, "returncriteria": 54, "success": 54, "fail": [54, 75, 80, 109, 131, 164], "chunkmapperfilterermodel": 54, "setreturncriteria": 54, "return_criteria": 54, "itself": [54, 85], "docmapperapproach": [55, 135, 168], "docmappermodel": [55, 135, 168], "assertion_filter": [56, 84], "chunk_convert": [56, 84], "chunk_key_phrase_extract": [56, 84], "chunk_sentence_splitt": [56, 84], "chunker_filter": [56, 84], "chunkmapper_filter": [56, 84], "docmapp": [56, 84, 133, 136, 166, 169], "documentlogregclassifierapproach": 57, "classifi": [57, 58, 82, 102, 103, 140, 144, 145, 173, 178, 179, 192], "tol": [57, 58, 145, 179], "converg": [57, 58, 145, 179], "toler": [57, 58, 145, 179], "fitintercept": [57, 58, 145, 179], "intercept": [57, 58, 145, 179], "vectorizationmodelpath": [57, 58, 145, 179], "been": [57, 58, 67, 130, 145, 163, 179], "classificationmodelpath": [57, 58, 145, 179], "could": [57, 58, 65, 74, 144, 145, 178, 179], "like": [57, 58, 65, 67, 130, 144, 145, 163, 178, 179], "stopwords_clean": [57, 58, 145, 179], "stopwordsclean": [57, 58, 145, 179], "cleantoken": [57, 58, 145, 179], "stemmer": [57, 58, 145, 179], "stem": [57, 58, 102, 103, 104, 140, 145, 173, 179], "clf_model": [57, 58, 82, 145, 179], "settol": [57, 58], "dist": [57, 58, 108], "setfitintercept": [57, 58], "setvectorizationmodelpath": [57, 58], "setclassificationmodelpath": [57, 58], "setlabel": [57, 58], "documentlogregclassifiermodel": 57, "mergechunk": [57, 58, 145, 179], "vectorizationmodel": [57, 58, 145, 179], "classificationmodel": [57, 58, 145, 179], "setmergechunk": [57, 58], "setvectorizationmodel": [57, 58], "setclassificationmodel": [57, 58], "classifier_logreg_ad": 57, "documentmlclassifierparam": 58, "mintokenngram": [58, 145, 179], "maxtokenngram": [58, 145, 179], "documentmlclassifierapproach": [58, 145, 179], "classificationmodelclass": [58, 145, 179], "sparkml": [58, 145, 179], "svm": [58, 60, 145, 179], "setclassificationmodelclass": 58, "setmintokenngram": 58, "setmaxtokenngram": 58, "documentmlclassifiermodel": 58, "classifierml_ad": 58, "genericlogregclassifierapproach": 59, "genericlogregclassifi": 59, "multinomi": 59, "logist": [59, 60], "featurevector": [59, 60], "vari": [59, 60], "genericlogregclassifiermodel": 59, "generic_logreg_classifier_ad": 59, "genericsvmclassifierapproach": 60, "svmclassifi": 60, "standard": [60, 95, 115], "genericsvmclassifiermodel": 60, "generic_svm_classifier_ad": 60, "document_log_classifi": [61, 84], "document_ml_classifi": [61, 84], "generic_log_reg_classifi": [61, 84], "generic_svm_classifi": [61, 84], "medical_bert_for_sequence_classif": [61, 84], "medical_bert_for_token_classifi": [61, 84], "medical_distilbert_for_sequence_classif": [61, 84], "medicalbertforsequenceclassif": [62, 64], "medicalbertfortokenclassifi": [62, 63], "head": [62, 63, 64, 89, 143, 154, 155, 177, 188, 189], "pool": [62, 64, 143, 177], "companion": [62, 63, 64, 89, 127, 143, 144, 154, 155, 177, 178, 188, 189], "huggingfac": [62, 63, 64, 143, 154, 177, 188], "maxsentencelength": [62, 63, 64, 143, 154, 177, 188], "tokenclassifi": [62, 63, 143, 154, 177, 188], "felt": [62, 64, 143, 177], "drowsi": [62, 64, 143, 177], "had": [62, 64, 74, 143, 177], "blur": [62, 64, 143, 177], "vision": [62, 64, 143, 177], "aspirin": [62, 64, 95, 143, 177], "coalescesent": [62, 64], "setmaxsentencelength": [62, 63, 64, 110], "getclass": [62, 63, 64, 89, 93, 102, 103, 105], "setcoalescesent": [62, 64], "probabl": [62, 64, 97, 99, 112, 114, 148, 150, 182, 184, 197], "due": [62, 64], "limit": [62, 64, 67, 74, 102], "almost": [62, 64], "512": [62, 64], "help": [62, 64, 67, 108, 130, 163, 204], "loadsavedmodel": [62, 63, 64, 89, 99, 103, 105, 113, 114, 140, 141, 143, 148, 149, 150, 154, 155, 173, 174, 177, 182, 183, 184, 188, 189], "spark_sess": [62, 63, 64, 89, 99, 103, 105, 113, 114, 140, 141, 143, 148, 149, 150, 154, 155, 173, 174, 177, 182, 183, 184, 188, 189], "loadsavedmodelopensourc": [62, 63, 64, 143, 154, 177, 188], "bertfortokenclassifierpath": [62, 63, 64, 143, 154, 177, 188], "tfmodelpath": [62, 63, 64, 143, 154, 177, 188], "bertfortokenclassifi": [62, 63, 64, 143, 154, 177, 188], "taht": [62, 63, 64, 143, 154, 177, 188], "bert_sequence_classifier_ad": 62, "bert_token_classifier_ner_bionlp": [63, 154, 188], "erba": [63, 154, 188], "ir": [63, 130, 154, 188], "myb": [63, 154, 188], "viru": [63, 154, 188], "erythroid": [63, 154, 188], "infect": [63, 154, 188], "bone": [63, 154, 188], "marrow": [63, 154, 188], "blastoderm": [63, 154, 188], "cultur": [63, 154, 188], "tissue_structur": [63, 154, 188], "medicaldistilbertforsequenceclassif": 64, "distilbert": 64, "sequenceclassifi": 64, "distilbertforsequenceclassif": 64, "destilbertfortokenclassifierpath": 64, "distilbert_sequence_classifier_ad": 64, "contextualparserapproach": 65, "setjsonpath": 65, "along": 65, "addition": [65, 89, 155, 189], "unifi": 65, "jsonpath": 65, "prefixandsuffixmatch": 65, "prefix": [65, 74, 81, 89, 91, 155, 189, 220], "suffix": [65, 200], "hit": [65, 200, 201], "tsv": [65, 91], "optionalcontextrul": 65, "regardless": 65, "shortestcontextmatch": 65, "stop": [65, 89, 91, 112, 114, 155, 189, 203], "find": [65, 77, 100, 105, 108, 124], "completecontextmatch": 65, "exact": 65, "parser": [65, 206], "liver": 65, "metastas": 65, "pt1bn0m0": 65, "t5": 65, "primari": 65, "colon": 65, "contextualpars": [65, 85], "regex_token": [65, 210], "39": 65, "confidencevalu": 65, "00": [65, 206], "49": [65, 206], "148": 65, "156": 65, "ct4bcn2m1": 65, "189": 65, "194": 65, "n3m1": 65, "316": 65, "323": 65, "setprefixandsuffixmatch": 65, "setoptionalcontextrul": 65, "setshortestcontextmatch": 65, "setcompletecontextmatch": 65, "boundari": 65, "contextualparsermodel": 65, "mycontextualparsermodel": 65, "contextual_pars": [66, 84], "deidentificationmodel": [67, 72, 130, 163], "obfusc": [67, 68, 70, 71, 72, 81, 130, 163, 204, 212], "mask": [67, 126, 130, 163], "person": [67, 74, 91, 130, 163, 204], "These": [67, 105, 130, 141, 163, 174], "setregexpatternsdictionari": [67, 130, 163], "line": [67, 91, 130, 163, 206, 210], "regexpatternsdictionari": [67, 130, 163], "protect": [67, 130, 163], "anonim": [67, 130, 163], "obfuscated": [67, 130, 163], "dateformat": [67, 130, 163, 204], "obfuscatereffil": [67, 70, 130, 163, 204, 212], "reffileformat": [67, 70, 130, 163], "refsep": [67, 70, 130, 163], "sep": [67, 130, 163, 206], "reffil": [67, 70, 130, 163], "datetag": [67, 130, 163], "dai": [67, 68, 94, 130, 163, 204, 212], "displac": [67, 130, 163, 204], "60": [67, 130, 163, 204], "datetoyear": [67, 130, 163], "minyear": [67, 130, 163], "pars": [67, 68, 130, 163, 206], "consistentobfusc": [67, 130, 163], "sameentitythreshold": [67, 130, 163], "consid": [67, 74, 78, 92, 97, 99, 103, 104, 108, 114, 130, 148, 150, 163, 182, 184, 220], "appear": [67, 77, 78, 100, 130, 163], "9": [67, 102, 108, 130, 163, 206], "obfuscaterefsourc": [67, 70, 130, 163, 204], "doesnt": [67, 130, 163], "tha": [67, 130, 163], "obfuscatorreffil": [67, 130, 163], "faker": [67, 68, 70, 126, 130, 163, 212], "randomli": [67, 89, 130, 155, 163, 189, 200, 201, 204], "regexoverrid": [67, 130, 163], "priorit": [67, 85, 130, 163], "With": [67, 70, 130, 163], "repli": [67, 70, 130, 163], "ouptut": [67, 130, 163], "ignoreregex": [67, 130, 163], "israndomdatedisplac": [67, 130, 163], "deidentificationparam": [67, 130, 163], "mappingscolumn": [67, 130, 163], "fake": [67, 130, 163], "returnentitymap": [67, 130, 163], "ssn": [67, 130, 163], "passport": [67, 130, 163], "dln": [67, 130, 163], "npi": [67, 130, 163], "c_card": [67, 130, 163], "iban": [67, 130, 163], "dea": [67, 130, 163], "maskingpolici": [67, 130, 163], "polici": [67, 95, 130, 163], "same_length_char": [67, 130, 163], "compos": [67, 130, 163], "asterisk": [67, 130, 163], "surround": [67, 77, 130, 163], "squar": [67, 130, 163], "bracket": [67, 130, 163], "total": [67, 130, 163, 196], "smith": [67, 100, 130, 163], "jo": [67, 130, 163], "fixed_length_char": [67, 130, 163], "fix": [67, 130, 163, 196, 200, 202], "samelengthformattedent": [67, 130, 163], "fax": [67, 130, 163, 204], "idnum": [67, 130, 163], "bioid": [67, 130, 163, 204], "medicalrecord": [67, 130, 163, 204], "zip": [67, 130, 163, 204], "vin": [67, 130, 163], "plate": [67, 130, 163], "selectiveobfuscationmodespath": [67, 130, 163], "mask_same_length_char": [67, 130, 163], "minu": [67, 130, 163], "plu": [67, 130, 163], "mask_entity_label": [67, 130, 163], "mask_fixed_length_char": [67, 130, 163], "invok": [67, 130, 163], "setfixedmasklength": [67, 130, 163], "intact": [67, 130, 163], "deidentifi": [67, 68, 71, 126, 130, 163, 212], "accord": [67, 68, 85, 126, 130, 163, 200], "setmod": [67, 68, 130, 163], "entitycasingmodespath": [67, 130, 163], "uppercas": [67, 130, 163, 200, 201], "upper": [67, 89, 102, 103, 104, 130, 140, 155, 163, 173, 189, 200], "capit": [67, 130, 163, 200, 201], "titlecas": [67, 130, 163], "genderawar": [67, 70, 130, 163], "awar": [67, 70, 130, 163, 201], "might": [67, 70, 89, 130, 155, 163, 189], "decreas": [67, 70, 130, 163], "setuseabbrevi": [67, 70, 130, 163], "clinical_sensitive_ent": [67, 70, 130, 163], "ner_deid_enrich": [67, 70, 130, 163], "ner_con": [67, 130, 163], "dei": [67, 71, 130, 163], "dic_regex_patterns_main_categori": [67, 130, 163], "setobfuscatereffil": [67, 70, 72, 130, 163], "obfuscate_fixed_ent": [67, 130, 163], "setreffileformat": [67, 70, 72, 130, 163], "setrefsep": [67, 70, 72, 130, 163], "setdateformat": [67, 130, 163], "mm": [67, 80, 94, 130, 163, 204, 206], "dd": [67, 80, 94, 130, 163, 204], "yy": [67, 130, 163], "yyyi": [67, 80, 94, 130, 163, 204], "setobfuscated": [67, 68, 130, 163], "setdatetag": [67, 68, 130, 163], "setdai": [67, 130, 163], "setobfuscaterefsourc": [67, 68, 70, 130, 163], "7194334": [67, 71, 130, 163], "93": [67, 71, 130, 163], "oliveira": [67, 71, 130, 163], "record": [67, 71, 130, 163, 204], "2079": [67, 71, 130, 163], "09": [67, 71, 130, 163], "01010101": [67, 71, 130, 163], "dr": [67, 70, 71, 72, 130, 163], "gregori": [67, 71, 130, 163], "hous": [67, 71, 130, 163], "fixedmasklength": [67, 130, 163], "zipcodetag": 67, "useshifdai": 67, "region": [67, 126], "unnormalizeddatemod": 67, "agerang": 67, "outputasdocu": 67, "getblacklist": 67, "setlanguag": [67, 68, 70], "english": [67, 70, 200, 201], "spanish": [67, 70], "wher": 67, "m": [67, 144, 178, 204], "setmaskingpolici": 67, "f": [67, 70, 80, 125], "setzipcodetag": 67, "zipcod": 67, "auxiliari": [67, 108, 137, 170], "resolv": [67, 107, 108, 137, 170], "setdatetoyear": 67, "setminyear": 67, "setconsistentobfusc": 67, "setsameentitythreshold": 67, "setregexoverrid": 67, "setignoreregex": 67, "setse": [67, 68, 70], "setisrandomdatedisplac": 67, "setmappingscolumn": [67, 71], "setreturnentitymap": 67, "setuseshifdai": [67, 68], "shift": [67, 68, 212], "setregion": 67, "countri": [67, 204], "ountri": 67, "coud": 67, "setunnormalizeddatemod": 67, "setagerang": 67, "preserv": [67, 91], "setoutputasdocu": 67, "join": [67, 118, 196, 200], "setsamelengthformattedent": 67, "getsamelengthformattedent": 67, "setselectiveobfuscationmod": 67, "setentitycasingmod": 67, "setgenderawar": [67, 70], "ictionari": 67, "regexent": [67, 130, 163], "keep": [67, 82, 89, 108, 112, 130, 137, 155, 163, 170, 189, 196, 201], "regexpatterndictionari": [67, 130, 163], "deidentify_larg": [67, 130, 163], "getregexent": 67, "teh": [67, 155, 189], "deidentify_enriched_clin": 67, "documenthashcod": 68, "deidentif": [68, 69, 71, 84, 126, 132, 133, 165, 166, 204, 212], "purpos": [68, 82, 200], "hash": 68, "accordingli": 68, "patientidcolumn": 68, "dateshiftcolumn": 68, "newdateshift": 68, "rangedai": 68, "rang": [68, 89, 155, 189], "patientid": 68, "a001": 68, "a003": 68, "chri": 68, "brown": [68, 218, 219], "discharg": 68, "02": [68, 94], "2022": [68, 158, 206], "04": [68, 94], "03": [68, 94, 104, 206], "moor": 68, "dateshift": [68, 126], "my_input_df": 68, "documenthash": [68, 126], "setdateshiftcolumn": 68, "clinical_n": [68, 72], "ner_deid_subentity_aug": 68, "de_identif": 68, "deid_text": 68, "pipeline_col": 68, "pipeline_col_model": 68, "ellend": 68, "manual": [68, 192], "errol": 68, "bang": 68, "ariel": 68, "null": [68, 206], "jean": 68, "cotton": 68, "2023": [68, 94], "setpatientidcolumn": 68, "predefin": [68, 78], "setnewdateshift": 68, "setrangedai": 68, "doccument_hashcod": [69, 84], "name_obfusc": [69, 84], "reidentif": [69, 84], "namechunkobfuscatorapproach": [70, 72], "namechunkobfusc": [70, 72], "doctor": [70, 204], "seper": [70, 200, 212], "german": 70, "fr": 70, "french": 70, "ro": 70, "romanian": 70, "samelength": 70, "nameent": 70, "obfuscator_nam": 70, "replacer_nam": [70, 72], "obfuscated_nam": 70, "setusereplac": [70, 72], "davi": [70, 72], "admit": [70, 72, 100], "seen": [70, 72], "attend": [70, 72], "physician": [70, 72], "lorand": [70, 72], "schedul": [70, 72], "emerg": [70, 72], "assess": [70, 72], "charlestin": 70, "loweri": 70, "setsamelength": 70, "mike": 70, "setnameent": 70, "pretraind": 70, "remain": 70, "reidentifi": 71, "py": [71, 72, 92, 112, 113, 118, 120, 121, 147, 149, 181, 183], "frame": [71, 89, 155, 189, 206], "reideintif": 71, "protectedent": 71, "reid": 71, "redeideintif": 71, "datenorm": [72, 94], "usereplac": 72, "disabl": [72, 99, 148, 182, 206], "ner_deid_generic_aug": 72, "ner_converter_nam": 72, "names_test": 72, "obfuscated_document_nam": 72, "nlppipelin": [72, 74], "model_chunck_obfusc": 72, "sample_text": 72, "mr": 72, "lmodel": 72, "re": [72, 84, 112, 159, 206], "print": [72, 124, 200, 203, 207, 217, 220], "fitzpatrick": 72, "bowman": 72, "acosta": 72, "getusereplac": 72, "ner_disambigu": [73, 84], "nerdisambigu": 74, "interest": 74, "compani": [74, 204], "kb": 74, "ne": 74, "mention": [74, 95], "surfac": 74, "instanti": [74, 89, 144, 155, 178, 189, 206], "embeddingtypeparam": 74, "numfirstchar": 74, "tokensearch": 74, "narrowwithapproximatematch": 74, "narrow": 74, "levenstein": 74, "levenshteindistancethresholdparam": 74, "nearmatchinggapparam": 74, "trim": 74, "candid": 74, "len": 74, "nearmatchinggap": 74, "predictionslimit": 74, "s3knowledgebasenam": 74, "contest": 74, "donald": 74, "trump": 74, "who": [74, 100], "later": 74, "defeat": 74, "christina": 74, "aguilera": 74, "sentenceembed": [74, 144, 178], "nerdlmodel": [74, 77, 89, 155, 189], "sets3knowledgebasenam": 74, "setnumfirstchar": 74, "wikipedia": 74, "curid": 74, "4848272": 74, "31698421": 74, "55907961": 74, "144171": 74, "6636454": 74, "setembeddingtyp": 74, "settokensearch": 74, "setnarrowwithapproximatematch": 74, "setlevenshteindistancethresholdparam": 74, "setnearmatchinggapparam": 74, "setpredictionlimit": 74, "nerdisambiguatormodel": 74, "disambiguator_p": 74, "doc2chunkintern": 75, "chunkcol": [75, 109, 131, 164], "stringtyp": [75, 94, 109, 131, 164], "arraytyp": [75, 109, 131, 164], "setisarrai": [75, 109, 131, 164], "startcolbytokenindex": [75, 109, 131, 164], "prepend": [75, 109, 131, 164], "whitespac": [75, 109, 112, 131, 164, 196, 200], "isarrai": [75, 109, 131, 164], "failonmiss": [75, 109, 131, 164], "job": [75, 109, 131, 164], "chunk2doc": [75, 109, 110, 131, 164], "advanc": [75, 109, 131, 164], "natur": [75, 105, 109, 131, 141, 164, 174], "annotatortyp": [75, 109, 131, 164], "miss": 75, "averageembed": [76, 77], "embded": 76, "bertsentencechunkembed": 77, "account": 77, "numer": [77, 80, 201], "chunkweight": 77, "prerequisit": [77, 89, 155, 189], "medicalnerdlmodel": [77, 89, 155, 189], "sbluebert_base_uncased_mli": 77, "sentence_chunk_embed": 77, "31995273": 77, "04710883": 77, "28973156": 77, "1294758": 77, "12481072": 77, "027161136": 77, "24613449": 77, "0949309": 77, "1825444": 77, "2252143": 77, "45139068": 77, "12400375": 77, "0075617577": 77, "90806055": 77, "12871636": 77, "setchunkweight": 77, "sbiobert_base_cased_mli": [77, 78], "entitychunkembed": 78, "One": [78, 200, 209], "look": 78, "tri": [78, 80], "criterion": [78, 89, 155, 189], "anoth": 78, "syntact": [78, 102, 103, 104, 196], "relationship": [78, 105, 141, 174], "125": 78, "paracetamol": [78, 105], "metformin": 78, "target_ent": 78, "related_ent": 78, "notat": 78, "targetent": [78, 160], "insensit": 78, "entityweight": [78, 160], "3f": 78, "maxsyntacticdist": [78, 102, 104], "pos_clin": [78, 102, 103, 104, 105, 140, 173], "dependency_pars": [78, 104, 105], "dependencyparsermodel": [78, 102, 103, 104, 105, 140, 173], "dependency_conllu": [78, 102, 103, 104, 105, 140, 173], "setmaxsyntacticdist": [78, 102, 103, 104, 105, 140, 173], "settargetent": 78, "setentityweight": 78, "parient": 78, "coumadin": 78, "pill": 78, "sparkcontextfortest": 78, "267413": 78, "07614058": 78, "5620966": 78, "83838946": 78, "8911504": 78, "22319649": 78, "07094894": 78, "6885556": 78, "79176235": 78, "82672405": 78, "10939768": 78, "29242": 78, "3574444": 78, "3981813": 78, "79609615": 78, "weigh": 78, "related1": 78, "related2": 78, "average_embed": [79, 84], "bert_sentence_embed": [79, 84], "entity_chunk_embed": [79, 84], "featuresassembl": [80, 82], "anyth": 80, "cast": 80, "feature_vector": [80, 82, 215], "timestampformat": 80, "hh": 80, "ss": 80, "zz": 80, "test_jsl": 80, "relfeatur": 80, "withcolumn": 80, "array_column": 80, "words_in_ent1": [80, 206], "words_in_ent2": [80, 206], "features_asm1": 80, "words_between": [80, 206], "features_t": 80, "__data": 80, "filteringparam": 81, "iob": [81, 88, 89, 91, 155, 189, 192, 200, 201, 206, 220], "setdenylist": [81, 91], "setallowlist": [81, 91], "setfiltervalu": 81, "labelcolumn": [82, 89, 116, 144, 155, 178, 189], "epochsn": 82, "proce": [82, 200], "dropou": 82, "lay": 82, "validaiton": 82, "fiximbal": 82, "whenther": 82, "balanc": 82, "trainig": 82, "featuresc": 82, "minmax": 82, "feature_1": 82, "feature_2": 82, "feature_n": 82, "graph_fil": [82, 102], "setmulticlass": 82, "label_column": 82, "drouptup": 82, "validation_split": 82, "mode_fil": 82, "fix_imbal": 82, "feature_sc": 82, "output_logs_path": 82, "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 82, "deid": [84, 133, 142, 159, 166, 175], "disambigu": [84, 159, 215], "chunk_merg": [84, 86], "iob_tagg": [84, 87], "medical_n": [84, 87], "ner_converter_intern": [84, 87], "ner_template_rend": [84, 87], "zero_shot_n": [84, 87, 153, 156, 186, 187], "date_norm": [84, 96], "drug_norm": [84, 96], "qa": [84, 114, 148, 150, 159, 182, 184], "beam_search_param": [84, 98], "medical_qa": [84, 98], "qa_ner_gener": [84, 98, 142, 151, 175, 180], "relation_extraction_dl": [84, 101, 138, 139, 171, 172], "relation_ner_chunk_filt": [84, 101], "zero_shot_relation_extract": [84, 101, 138, 139, 171, 172], "resolut": [84, 109, 133, 142, 159, 166, 175, 218], "resolver_merg": [84, 106], "sentence_entity_resolv": [84, 106, 133, 136, 166, 169], "seq2seq": [84, 159], "medical_encoder_decod": [84, 111], "medical_summar": [84, 111], "medical_text_gener": [84, 111], "windowed_sent": [84, 117], "annotation_merg": [84, 159], "chunk2_token": [84, 159], "doc2_chunk_intern": [84, 159], "feature_assembl": [84, 159], "filtering_param": [84, 159], "resolution2_chunk": [84, 159], "router": [84, 159], "source_tracking_metadata_param": [84, 159], "tf_graph_build": [84, 159], "mergecommonparam": 85, "mergeoverlap": 85, "setmergeoverlap": 85, "overlap": 85, "mergeprioritizationparam": 85, "orderingfeatur": 85, "selectionstrategi": 85, "defaultconfid": 85, "chunkpreced": 85, "chunkprecedencevaluepriorit": 85, "setorderingfeatur": 85, "chunkbegin": 85, "chunklength": 85, "chunkconfid": 85, "setselectionstrategi": 85, "diverselong": 85, "setdefaultconfid": 85, "setchunkpreced": 85, "comma": [85, 89, 91, 155, 189], "drive": 85, "togeth": [85, 118], "setchunkprecedencevaluepriorit": 85, "mergeresourceparam": 85, "falsepositivesresourc": 85, "replacedictresourc": [85, 91], "setfalsepositivesresourc": 85, "posit": [85, 89, 91, 102, 104, 114, 150, 184, 189, 206], "setreplacedictresourc": [85, 91], "chunkmergeapproach": 85, "merger": 85, "certain": [85, 90], "decis": 85, "kept": 85, "preced": 85, "proccess": [85, 91, 100], "emb": [85, 88], "ner_jsl": [85, 88, 89, 91], "jsl_ner": [85, 91], "jsl_ner_chunk": 85, "ner_bionlp": 85, "bionlp_ner": 85, "bionlp_ner_chunk": 85, "merged_chunk": 85, "19": [85, 88, 114, 150, 184, 206], "72": [85, 88], "98": [85, 88], "107": [85, 88], "cellul": [85, 88], "diagnosi": [85, 88], "119": [85, 88], "pneumonia": [85, 88], "chunkmergemodel": 85, "chunkmergeraproach": 85, "iobtagg": 88, "bioe": 88, "iobtaggermodel": 88, "setschem": 88, "bilstm": [89, 155, 189], "art": [89, 144, 155, 178, 189], "2003": [89, 155, 189], "chosen": [89, 155, 189, 201], "bertembed": [89, 108, 137, 155, 170, 189], "minepoch": [89, 155, 189], "maxepoch": [89, 144, 155, 178, 189], "randomse": [89, 92, 112, 114, 144, 150, 155, 178, 184, 189], "reproduc": [89, 114, 150, 184, 189], "decai": [89, 155, 189], "coeffici": [89, 144, 155, 178, 189], "005": [89, 144, 155, 178, 189], "adequ": [89, 155, 189], "blstn_": [89, 155, 189], "embedding_dim": [89, 155, 189], "exactli": [89, 155, 189, 200], "greater": [89, 108, 155, 189], "satisfi": [89, 155, 189], "ill": [89, 155, 189], "occur": [89, 97, 112, 155, 189, 204], "usecontrib": [89, 155, 189], "Not": [89, 155, 189], "slightli": [89, 155, 189], "choos": [89, 128, 144, 155, 161, 178, 189], "hold": [89, 102, 155, 189], "evaluationlogextend": [89, 128, 155, 161, 189], "parquet": [89, 155, 189], "includeallconfidencescor": [89, 155, 189], "slow": [89, 155, 189], "down": [89, 155, 189], "speed": 89, "stdout": [89, 144, 155, 178, 189], "enablememoryoptim": [89, 155, 189], "practic": [89, 155, 189], "slower": [89, 155, 189], "evei": [89, 155, 189], "bach": [89, 155, 189], "tagsmap": [89, 155, 189], "oldtag": [89, 155, 189], "newtag": [89, 155, 189], "vip": [89, 155, 189], "overrideexistingtag": 89, "earlystoppingpati": [89, 155, 189], "wait": [89, 155, 189], "earli": [89, 155, 189], "earlystoppingcriterion": [89, 155, 189], "soon": [89, 155, 189], "met": [89, 155, 189], "patienc": [89, 155, 189], "f1": [89, 155, 189, 202, 207, 217, 220], "socr": [89, 155, 189], "prioriti": [89, 115, 155, 189], "infin": [89, 155, 189], "pretrainedmodelpath": [89, 102, 108, 137, 155, 170, 189], "point": [89, 102, 108, 137, 155, 170, 189], "logprefix": [89, 155, 189], "append": [89, 105, 141, 155, 174, 189], "usebestmodel": [89, 155, 189], "overrid": [89, 92, 102, 108, 137, 170], "sentencetokenindex": 89, "thu": [89, 155, 189, 192], "trainingdata": [89, 155, 189], "readdataset": [89, 155, 189, 206], "conll2003": [89, 155, 189], "eng": [89, 155, 189, 206], "randomvalidationsplitperepoch": 89, "setusecontrib": 89, "setlr": [89, 144, 178], "setpo": 89, "rage": [89, 155], "setincludeallconfidencescor": 89, "setusebestmodel": 89, "across": 89, "setlogprefix": 89, "setpretrainedmodelpath": [89, 102, 108], "setoverrideexistingtag": [89, 155, 189], "settagsmap": 89, "setearlystoppingcriterion": 89, "setearlystoppingpati": 89, "termin": [89, 99], "setrandomvalidationsplitperepoch": 89, "setsentencetokenindex": 89, "nerdlapproach": [89, 116, 155, 189, 197], "wordembed": [89, 155, 189], "glove_100d": [89, 155, 189], "inferencebatchs": [89, 155, 189], "labelcas": [89, 155, 189], "offici": [89, 155, 189], "ekeu": [89, 155, 189], "baghdad": [89, 155, 189], "trainingclassdistribut": 89, "setinferencebatchs": 89, "setlabelcas": 89, "gettrainingclassdistribut": 89, "nerchunk": [90, 102, 103, 140, 173], "neighbor": [90, 118], "dt": 90, "jj": 90, "ner_radiologi": 90, "imagingfind": 90, "bodypart": 90, "regexpars": 90, "commonnerconverterinternalparam": 91, "preserveposit": 91, "greedymod": 91, "contigu": 91, "ignorestopword": 91, "larger": 91, "loc": [91, 220], "setpreserveposit": 91, "preserve_posit": 91, "setgreedymod": 91, "greedy_mod": 91, "setthreshold": [91, 108, 137, 170], "setignorestopword": 91, "stopword": 91, "iob2": [91, 200, 201], "friendli": 91, "annotatorapproach": 91, "nerconverterinternalmodel": 91, "associ": [91, 104, 108], "outsid": 91, "replacelabel": 91, "substitut": 91, "replaced_ner_chunk": 91, "setreplacelabel": 91, "drug_brandnam": 91, "drug_frequ": 91, "drug_dosag": 91, "drug_strength": 91, "nertemplaterendermodel": 92, "scala": [92, 100, 112, 113, 118, 120, 121, 147, 149, 181, 183], "inherit": [92, 112, 113, 118, 121, 147, 149, 181, 183], "mix": [92, 112, 113, 118, 121, 147, 149, 181, 183], "ins": [92, 112, 113, 118, 121, 147, 149, 181, 183], "uid": [92, 112, 113, 118, 121, 147, 149, 181, 183, 191], "templat": [92, 99, 105, 141, 148, 174, 182], "entityscop": 92, "resampleent": 92, "combineent": 92, "permuteent": 92, "settempl": 92, "liststr": 92, "setentityscop": 92, "render": 92, "setresampleent": 92, "resampl": 92, "enough": 92, "setcombineent": 92, "setpermuteent": 92, "permut": 92, "even": 92, "zeroshotnermodel": [93, 157, 190], "shot": [93, 105, 141, 157, 174, 190], "robertaforquestionansw": [93, 157, 190], "entitydefinit": [93, 157, 190], "question": [93, 99, 100, 148, 157, 182, 190], "citi": [93, 110, 157, 190, 204], "town": [93, 157, 190], "predictionthreshold": [93, 102, 103, 105, 140, 141, 157, 173, 174, 190], "01f": [93, 157, 190], "ignoreent": [93, 157, 190], "setentitydefinit": [93, 157, 190], "clara": [93, 157, 190], "live": [93, 157, 190, 204], "york": [93, 157, 190], "hellen": [93, 157, 190], "pari": [93, 157, 190], "5328949": [93, 157, 190], "9360068": [93, 157, 190], "83294415": [93, 157, 190], "45366877": [93, 157, 190], "setpredictionthreshold": [93, 102, 103, 140, 173], "zero_shot_ner_roberta": 93, "els": 94, "anchordateyear": 94, "anchor": 94, "tomorrow": 94, "2021": [94, 104, 158], "anchordatemonth": 94, "month": 94, "januari": 94, "anchordatedai": 94, "08": 94, "12mar2021": 94, "jan": 94, "3april": 94, "2020": [94, 158], "mondai": [94, 144, 178], "todai": 94, "week": 94, "original_d": 94, "date_chunk": 94, "setanchordateyear": 94, "2000": 94, "setanchordatemonth": 94, "setanchordatedai": 94, "normalized_d": 94, "outputdateformat": 94, "defaultreplacementdai": 94, "defaultreplacementmonth": 94, "defaultreplacementyear": 94, "setoutputdateformat": 94, "setdefaultreplacementdai": 94, "setdefaultreplacementmonth": 94, "06": 94, "setdefaultreplacementyear": 94, "drugnorm": 95, "apac": 95, "discuss": 95, "blog": 95, "post": 95, "abbrevi": 95, "oral": 95, "sol": 95, "solut": 95, "million": [95, 114, 150, 184], "10000000": 95, "unt": 95, "sodium": 95, "chlorid": 95, "potassium": 95, "13bag": 95, "interferon": 95, "alfa": 95, "2b": 95, "injec": 95, "meq": 95, "document_norm": 95, "trainingpipelin": 95, "normalized_text": [95, 108, 137, 170], "bag": 95, "inject": 95, "setpolici": 95, "beamsearchparam": 97, "maxcontextlength": [97, 99, 114, 148, 150, 182, 184], "dosampl": [97, 99, 112, 114, 148, 150, 182, 184], "topk": [97, 99, 112, 114, 148, 150, 182, 184], "ignoretokenid": [97, 99, 112, 114, 148, 150, 182, 184], "maxnewtoken": [97, 99, 112, 114, 148, 150, 182, 184], "norepeatngrams": [97, 99, 112, 114, 148, 150, 182, 184], "setignoretokenid": [97, 112], "decod": [97, 99, 112, 114, 148, 150, 182, 184], "setmaxcontextlength": 97, "setdosampl": [97, 112], "greedi": [97, 99, 112, 114, 148, 150, 182, 184], "settopk": [97, 112], "vocabulari": [97, 99, 112, 114, 148, 150, 182, 184], "setmaxnewtoken": [97, 99, 112, 114, 148, 150, 182, 184], "setnorepeatngrams": [97, 112], "medicalquestionansw": [99, 148, 182], "gpt": [99, 114, 148, 150, 182, 184], "answer": [99, 100, 114, 148, 150, 182, 184], "span": [99, 148, 182], "capabl": [99, 148, 182], "ye": [99, 148, 182], "questiontyp": [99, 148, 182], "card": [99, 148, 182], "repeat": [99, 114, 148, 150, 182, 184, 198], "prevent": [99, 114, 148, 150, 182, 184], "customprompt": [99, 148, 182], "prompt": [99, 114, 148, 150, 182, 184], "usecach": [99, 112, 114, 148, 182], "spare": [99, 148, 182], "studi": [99, 148, 182], "failur": [99, 108, 148, 182], "breast": [99, 148, 182], "cancer": [99, 105, 148, 182], "chest": [99, 148, 182], "wall": [99, 148, 182], "irradi": [99, 148, 182], "mastectomi": [99, 148, 182], "multidocumentassembl": [99, 148, 182], "document_quest": [99, 148, 182], "document_context": [99, 148, 182], "med_qa": [99, 148, 182], "medical_qa_biogpt": [99, 148, 182], "setquestiontyp": [99, 148, 182], "setusecach": [99, 114], "setcustomprompt": 99, "setquestionanswertermin": 99, "questiontermin": 99, "symbol": [99, 218], "setquestionprompt": 99, "questionprompt": 99, "setquestionskiplasttoken": 99, "questionskiplasttoken": 99, "getquestiontyp": 99, "loadmedicaltextgener": 99, "med_text_generator_path": 99, "medicaltextgener": [99, 114, 150, 184], "flan_t5_base_jsl_qa": 99, "nerquestiongener": 100, "pronoun": 100, "questionpronoun": 100, "questionmark": 100, "questionanswer": 100, "zeroshotn": 100, "why": 100, "strategytyp": 100, "entities1": 100, "entities2": 100, "qagener": 100, "setquestionmark": 100, "setquestionpronoun": 100, "setstrategytyp": 100, "setentities1": 100, "setentities2": 100, "admiss": 100, "wheter": 100, "align": [100, 198, 200], "third": 100, "e1": 100, "e2": 100, "relationextractionmodel": [102, 103, 140, 173], "tensorflow_graph": 102, "relationdirectioncol": 102, "decript": 102, "fromentitybegincol": 102, "fromentityendcol": 102, "fromentitylabelcol": 102, "toentitybegincol": 102, "toentityendcol": 102, "toentitylabelcol": 102, "leftward": 102, "rightward": 102, "symmetr": 102, "embedd": [102, 103, 140, 173], "postag": [102, 103, 140, 173], "ner_events_clin": [102, 103, 140, 173], "depencypars": [102, 103, 140, 173], "relations_t": 102, "target_rel": 102, "05": 102, "from_begin": 102, "from_end": 102, "from_label": 102, "to_begin": 102, "to_end": 102, "to_label": 102, "traindata": [102, 103, 140, 173], "customlabel": [102, 103, 160], "overrideexistinglabel": 102, "begin_col": 102, "label_col": [102, 127], "setcustomlabel": [102, 103], "setrelationdirectioncol": 102, "set\u043everrideexistinglabel": 102, "annotatormodel": 102, "relationpair": [102, 103, 104, 140, 173], "biomark": 102, "relativedai": 102, "relationpairscasesensit": [102, 104], "relationtypeperpair": 102, "caus": 102, "problem": [102, 104, 105, 141, 174, 206], "symtom": 102, "external_body_part_or_region": [102, 103, 104, 140, 173], "internal_organ_or_compon": [102, 103, 104, 140, 173], "re_model": [102, 103, 105, 140, 173], "re_bodypart_direct": 102, "setrelationpair": [102, 103, 104, 105, 140, 173], "mri": [102, 103, 104, 105, 140, 173], "demonstr": [102, 103, 104, 140, 173], "infarct": [102, 103, 104, 140, 173], "brain": [102, 103, 104, 140, 173], "cerebellum": [102, 103, 104, 140, 173], "basil": [102, 103, 104, 140, 173], "ganglia": [102, 103, 104, 140, 173], "chunk1": [102, 103, 140, 173, 206], "chunk2": [102, 103, 140, 173, 206], "far": [102, 104], "increas": [102, 104, 112], "recal": [102, 207, 217, 220], "setrelationpairscasesensit": [102, 104], "setrelationtypeperpair": 102, "relationtypepair": 102, "getrelationtypeperpair": 102, "posology_r": 102, "posologyremodel": 102, "posologi": 102, "genericremodel": 102, "relationextractiondlmodel": [103, 104, 140, 173], "contrast": [103, 140, 173], "re_ner_chunk_filt": [103, 104, 105, 140, 173], "renerchunksfilt": [103, 104, 105, 140, 141, 173, 174], "re_ner_chunk": [103, 104, 105, 140, 173], "redl_bodypart_direction_biobert": [103, 140, 173], "redl_ade_biobert": 103, "realtionpair": 104, "advers": 104, "reaction": 104, "realat": 104, "further": 104, "ner_clinical_en": 104, "html": 104, "analyz": 104, "awai": 104, "doclevelrel": 104, "words_embedd": [104, 105], "pos_tagg": [104, 105], "clinical_ner_tagg": 104, "jsl_ner_wip_greedy_clin": 104, "trained_pipelin": 104, "cre": 104, "re_chunk": 104, "paired_to": 104, "59": 104, "setdoclevelrel": [104, 105], "zeroshotrelationextractionmodel": [105, 141, 174], "util": [105, 141, 159, 174, 194, 195, 199, 204], "nli": [105, 141, 174], "statement": [105, 141, 174], "regard": [105, 141, 174], "relationalcategori": [105, 141, 160, 174], "hypothesi": [105, 141, 174], "cure": [105, 141, 174], "5f": [105, 141, 174], "multilabel": [105, 141, 174], "categor": [105, 141, 174], "spark_sbert_zero_shot": 105, "setrelationalcategori": 105, "reveal": [105, 141, 174], "setmultilabel": 105, "allevi": 105, "headach": 105, "sick": 105, "9760039": [105, 141, 174], "98819494": [105, 141, 174], "9929625": [105, 141, 174], "negativerelationship": 105, "setnegativerelationship": 105, "serv": 105, "zero_shot_r": 105, "resolvermerg": 107, "enit": 107, "sentenceresolverparam": 108, "famili": 108, "distancefunct": 108, "mover": 108, "wmd": 108, "euclidean": 108, "neighbour": 108, "knn": 108, "algorithmm": 108, "queri": 108, "tree": [108, 137, 170], "nearest": 108, "confidencefunct": 108, "invers": 108, "missasempti": 108, "unmatch": 108, "setdistancefunct": [108, 137, 170], "setneighbour": [108, 137, 170], "algorithmn": 108, "thre": 108, "setconfidencefunct": 108, "conf_funct": 108, "setmissasempti": 108, "sentenceentityresolverapproach": [108, 137, 170], "sentenceentityresolvermodel": [108, 137, 170], "standart": 108, "aux_label": 108, "better": 108, "overrideexistingcod": [108, 137, 170], "unwant": 108, "dropcodeslist": [108, 137, 170], "flavour": 108, "normalizedcol": [108, 137, 170], "returncosinedist": [108, 137, 170], "aux_label_col": [108, 137, 170], "useauxlabel": [108, 137, 170], "omit": [108, 137, 170], "conceptid": 108, "concept": 108, "snome": [108, 137, 170], "concept_nam": 108, "108367008": 108, "disloc": 108, "joint": 108, "3384011000036100": 108, "arthrotec": 108, "166717003": 108, "serum": 108, "creatinin": 108, "3877011000036101": 108, "lipitor": 108, "402234004": 108, "foot": 108, "eczema": 108, "36031001": 108, "burn": 108, "feet": 108, "76948002": 108, "42399005": 108, "renal": 108, "sent_biobert_pubmed_base_cas": [108, 137, 170], "data_pipelin": 108, "data_processing_model": 108, "prepared_data": 108, "bertextractor": [108, 137, 170], "bert_embed": [108, 137, 170], "setnormalizedcol": [108, 137, 170], "snomed_cod": [108, 137, 170], "euclidian": [108, 137, 170], "setuseauxlabel": 108, "setauxlabelcol": 108, "snomedmodel": [108, 137, 170], "auxlabel": [108, 137, 170], "setextractcosinedist": 108, "setoverrideexistingcod": 108, "setdropcodeslist": 108, "leav": 108, "ontologi": [108, 137, 170], "curat": [108, 137, 170], "rxnorm": [108, 137, 170], "searchtre": [108, 137, 170], "structfeature_hadoopfix": 108, "encapsul": 108, "serializablekdtre": 108, "multidimension": 108, "approch": 108, "jon": 108, "loui": 108, "bentlei": 108, "1975": 108, "commun": 108, "acm": 108, "sept": 108, "509": 108, "517": 108, "doi": 108, "1145": 108, "361002": 108, "361007": 108, "sbertresolve_icd10cm_slim_billable_hcc_m": 108, "icd10_cod": 108, "icd10extractorpipelin": 108, "icd10model": 108, "setsearchtre": 108, "search_tre": 108, "usuali": 108, "kdtree": 108, "sbiobertresolve_icd10cm_augmented_billable_hcc": 108, "resolution2chunk": 109, "filterfieldsel": 110, "metadatafield": 110, "rules2": 110, "setstrategi": 110, "match_al": 110, "doc_chunk": 110, "sent_small_bert_l2_128": 110, "router_name_embed": 110, "setmetadatafield": 110, "setfilterfieldsel": 110, "names_embed": 110, "router_city_embed": 110, "cities_embed": 110, "router_nam": 110, "names_chunk": 110, "medicalencoderdecod": 112, "stopateo": [112, 114], "maxtextlength": [112, 114], "refinesummari": 112, "refinesummarytargetlength": 112, "refinechunks": 112, "refinemaxattempt": 112, "setrefinesummari": 112, "refin": 112, "summar": 112, "cost": 112, "summari": 112, "setrefinesummarytargetlength": 112, "setrefinechunks": 112, "Be": 112, "llm": 112, "setrefinemaxattempt": 112, "summarytargetlength": 112, "setstopateo": [112, 114], "encount": [112, 114], "setmaxtextlength": [112, 114], "medicalsummar": 113, "use_cach": [113, 149, 183], "facilit": [113, 149, 183], "summarizer_clinical_jsl_aug": 113, "covid": [114, 150, 184], "document_prompt": [114, 150, 184], "med_text_gener": [114, 150, 184], "convid": [114, 150, 184], "pandem": [114, 150, 184], "peopl": [114, 150, 184], "worldwid": [114, 150, 184], "modeltyp": 114, "model_typ": [114, 150, 184], "text_generator_biomedical_biogpt_bas": 114, "sourcetrackingmetadataparam": 115, "includeoutputcolumn": 115, "outputcolumnkei": 115, "includestandardfield": 115, "standardfieldkei": 115, "allpossiblefieldstostandard": 115, "setincludeoutputcolumn": 115, "setoutputcolumnkei": 115, "setincludestandardfield": 115, "setstandardfieldkei": 115, "setallpossiblefieldstostandard": 115, "tfgraphbuildermodel": 116, "modelnam": 116, "hiddenunitsnumb": 116, "hiddenlay": 116, "maxsequencelength": 116, "hiddenact": 116, "hiddenactl2": 116, "hiddenweightsl2": 116, "batchnorm": 116, "islicens": 116, "userelationdirect": 116, "outputact": 116, "sethiddenact": 116, "gethiddenact": 116, "sethiddenactl2": 116, "l2": 116, "gethiddenactl2": 116, "sethiddenweightsl2": 116, "gethiddenweightsl2": 116, "setbatchnorm": 116, "getbatchnorm": 116, "setislicens": 116, "medicalneraprroach": 116, "getislicens": 116, "sethiddenlay": 116, "gethiddenlay": 116, "hiudden": 116, "setmaxsequencelength": 116, "getmaxsequencelength": 116, "sethiddenunitsnumb": 116, "gethiddenunitsnumb": 116, "setuserelationdirect": 116, "getuserelationdirect": 116, "settoutputact": 116, "getoutputact": 116, "setmodelnam": 116, "getmodelnam": 116, "getlabelcolumn": 116, "getinputcol": 116, "getgraphfold": 116, "greaph": 116, "getgraphfil": 116, "windowedparam": 118, "windows": 118, "gluestr": 118, "setwindows": 118, "slide": 118, "setgluestr": 118, "windowedsentencemodel": 118, "annotatorapproachintern": 120, "estim": 120, "annotatormodelintern": 121, "annotatorpropertiesintern": 122, "compon": 122, "attach": 122, "setforceinputtypevalid": 122, "inputcolsvalid": 122, "annotator_approach_intern": [123, 159], "annotator_model_intern": [123, 159], "annotator_properties_intern": [123, 159], "verifi": 124, "findvers": 124, "privat": [124, 203], "showvers": 124, "customtransform": 125, "custom_pipelin": 126, "masking_polici": 126, "fixed_mask_length": 126, "obfuscate_d": 126, "obfuscate_ref_sourc": 126, "obfuscate_ref_file_path": 126, "age_group_obfusc": 126, "age_rang": 126, "shift_dai": [126, 212], "number_of_dai": 126, "documenthashcoder_col_nam": 126, "date_tag": 126, "unnormalized_d": 126, "unnormalized_mod": 126, "id_column_nam": 126, "date_shift_column_nam": 126, "multi_mode_file_path": 126, "domain": 126, "input_file_path": [126, 212], "output_file_path": [126, 212], "deid_with_custom_pipelin": 126, "pretrained_pipelin": 126, "deid_with_pretrained_pipelin": 126, "norvigspellevalu": 127, "test_fil": 127, "ground_truth_fil": 127, "computeaccuracyannot": 127, "train_fil": 127, "computeaccuracymodel": 127, "symspellevalu": 127, "nerdlevalu": 127, "tag_level": 127, "full_chunk": 127, "computemetricsfromdf": 127, "prediction_col": 127, "drop_o": 127, "case_sensit": [127, 206], "nercrfevalu": 127, "posevalu": 127, "olumn": [128, 161], "eval": [128, 159, 161], "finassertiondl_time_md": 128, "finner_deid": 130, "financedocumenthashcod": 131, "setidcolumn": [131, 164], "document_hashcod": [132, 133, 165, 166], "finmapper_edgar_companynam": 134, "snomedtrainingpipelin": [137, 170], "snomedtrainingmodel": [137, 170], "snomeddata": [137, 170], "thiu": 137, "finel_edgar_company_nam": 137, "finre_financial_smal": 140, "finre_zero_shot": 141, "chunk_classif": [142, 159, 175], "sequence_classif": [142, 159, 175], "finance_bert_for_sequence_classif": [142, 146], "finance_classifier_dl": [142, 146], "finance_document_ml_classifi": [142, 146], "sequence_gener": [142, 159, 175], "finance_encoder_decod": [142, 151], "finance_qa": [142, 151], "finance_summar": [142, 151], "finance_text_gener": [142, 151], "token_classif": [142, 159, 175], "financebertforsequenceclassif": 143, "financebertfortokenclassif": [143, 154], "finclf_bert_banking77": 143, "financeclassifierdlapproach": 144, "classifierdl": [144, 178], "univers": [144, 178], "dnn": [144, 178], "classifierdlmodel": [144, 178], "multiclassifierdlapproach": [144, 178], "sentimentdlapproach": [144, 178], "item": [144, 178, 198, 210], "doubl": [144, 178], "universalsentenceencod": [144, 178], "movi": [144, 178], "wach": [144, 178], "ever": [144, 178], "opinion": [144, 178], "win": [144, 178], "award": [144, 178], "terribl": [144, 178], "bad": [144, 178], "realli": [144, 178], "trane": [144, 178], "smallcorpu": [144, 178], "useembed": [144, 178], "docclassifi": [144, 178], "classifierdlapproach": [144, 178], "5e": [144, 178], "financeclassifierdlmodel": [144, 145], "financeclassifierdl": 144, "classifierdl_use_trec6": [144, 178], "trec": [144, 178], "multiclassifierdlmodel": [144, 178], "sentimentdlmodel": [144, 178], "sarcasmdl": [144, 178], "classifierdl_use_sarcasm": [144, 178], "sarcasm": [144, 178], "readi": [144, 178], "love": [144, 178], "wake": [144, 178], "am": [144, 178], "arrays_zip": [144, 178], "finclf_sec_fil": 144, "financedocumentmlclassifierapproach": 145, "financedocumentmlclassifiermodel": [145, 179], "financeencoderdecod": 147, "financequestionansw": 148, "biogpt_pubmed_qa": [148, 182], "financesummar": 149, "finsum_flant5_finetuned_sec10k": 149, "financetextgener": 150, "fingen_flant5_finetuned_sec10k": 150, "financenerquestiongener": 152, "finance_bert_for_token_classifi": [153, 156], "finance_n": [153, 156], "financebertfortokenclassifi": 154, "finner_responsibility_report": 154, "financenerapproach": 155, "usa": [155, 189], "verif": [155, 189], "greather": [155, 189], "financenermodel": [155, 189], "finner_sec_10k_summari": 155, "finner_roberta_zeroshot": 157, "profil": 158, "code_arrai": 158, "sex": 158, "elig": 158, "cna": 158, "orec": 158, "medicaid": 158, "cm": 158, "hcc": 158, "24": 158, "2019": 158, "profilev24y17": 158, "profilev24y18": 158, "profilev24y19": 158, "profilev24y20": 158, "profilev24y21": 158, "profilev24y22": 158, "profilev23y18": 158, "profilev23y19": 158, "profilev23": 158, "profilev22y17": 158, "profilev22y18": 158, "profilev22y19": 158, "profilev22y20": 158, "profilev22y21": 158, "profilev22y22": 158, "profilev22": 158, "nlp_test": 159, "noisy_label": [159, 194], "alab_util": [159, 214], "conll_pars": [159, 214], "deidentification_util": [159, 214], "licensed_annotator_typ": [159, 214], "log_pars": [159, 214], "ner_util": [159, 214], "ocr_nlp_processor": [159, 214], "ocr_util": [159, 214], "training_log_parser_util": [159, 214], "alab": [159, 210], "custom_transform": 159, "deidentification_modul": 159, "modeltrac": 159, "structured_deidentif": 159, "text_to_documents_column": 159, "training_log_pars": 159, "updatemodel": 159, "transformer_seq_classif": 159, "version_regex": 159, "size_regex": 159, "m1": 159, "public": 159, "get_credenti": 159, "secretkei": 159, "keyid": 159, "pub_vers": 159, "library_set": 159, "legassertion_time_md": 161, "legner_deid": 163, "legaldocumenthashcod": 164, "legmapper_edgar_companynam": 167, "legel_edgar_company_nam": 170, "legre_contract_doc_parti": 173, "legre_zero_shot": 174, "legal_bert_for_sequence_classif": [175, 176], "legal_classifier_dl": [175, 176], "legal_document_ml_classifi": [175, 176], "legal_encoder_decod": [175, 180], "legal_qa": [175, 180], "legal_summar": [175, 180], "legal_text_gener": [175, 180], "legalbertforsequenceclassif": 177, "legalbertfortokenclassif": [177, 188], "legclf_reddit_advic": 177, "legalclassifierdlapproach": 178, "legalclassifierdlmodel": [178, 179], "legalclassifierdl": 178, "legclf_argument_min": 178, "legaldocumentmlclassifierapproach": 179, "legaldocumentmlclassifiermodel": 179, "legalencoderdecod": 181, "legalquestionansw": 182, "legalsummar": 183, "legsum_flant5_legal_aug": 183, "legaltextgener": 184, "leggen_flant5_finetun": 184, "legalnerquestiongener": 185, "legal_bert_for_token_classifi": [186, 187], "legal_n": [186, 187], "legalbertfortokenclassifi": 188, "legner_bert_gr": 188, "legalnerapproach": 189, "legalnermodel": 189, "legner_contract_doc_parties_lg": 189, "legner_roberta_zeroshot": 190, "adduidcol": 191, "timestamp": 191, "init_medical_gender_classifi": 192, "rulebasedclassifi": 192, "test_gender_bia": 192, "ner_pipelin": [192, 206, 218], "test_conl": 192, "classifier_pipelin": 192, "training_conl": 192, "log_path": [192, 197, 200, 201, 207, 217], "gender_bias_result": 192, "explode_sent": 192, "pass": [192, 196, 200], "doc_amount": 192, "training_set_gender_distribut": 192, "test_set_gender_distribut": 192, "test_set_metr": 192, "bias_test": [193, 194], "noisy_label_fix": [194, 195], "noisy_label_test": [194, 195], "robustness_fix": [194, 199], "robustness_test": [194, 199], "conll_read": [196, 200], "conll_writ": 196, "chunk_tag": [196, 220], "save_path": 196, "docs_indx": 196, "sentences_list": 196, "tags_list": 196, "labels_list": 196, "track": 196, "written": 196, "update_with_model_predict": 196, "fix_df": 196, "test_label_error": [196, 197], "sent_indx": 196, "token_indx": 196, "apply_label_fix": 196, "label_fix": 196, "sent_index": 196, "add_flag_to_conl": 196, "flag_index": 196, "speech": 196, "interactivefix": 196, "result_df": 196, "default_strategi": 196, "page_s": 196, "ui": 196, "jupyt": 196, "notebook": 196, "find_label_error": 196, "displai": [196, 198], "create_grid": 196, "fill_grid": 196, "ipywidget": 196, "gridspeclayout": 196, "get_head": 196, "get_central_grid": 196, "get_foot": 196, "get_page_control_button": 196, "next_pag": 196, "prev_pag": 196, "adjust_page_s": 196, "num_sample_drop_down": 196, "get_page_numb": 196, "empty_grid": 196, "get_class": 196, "fix_label": 196, "apply_fix": 196, "fix_al": 196, "get_drop_down_titl": 196, "get_cell_el": 196, "css_class": 196, "get_sent": 196, "get_default_indx": 196, "indx": 196, "get_drop_down": 196, "get_title_html": 196, "calculate_label_error_scor": 197, "numpi": 197, "pred_prob": 197, "get_label_quality_scor": 197, "seri": [197, 200, 201], "np": 197, "class": [197, 221], "get_unique_ent": 197, "training_pipelin": 197, "noisy_label_test_result": 197, "cross": 197, "fold": 197, "setincludeconfidencescor": 197, "noisi": [197, 200, 201], "stylesheet": 198, "multilin": 198, "background": 198, "color": [198, 218, 219], "0098da": 198, "center": 198, "footer": 198, "ffffff": 198, "ignore_margin": 198, "row_odd": 198, "262626": 198, "row_even": 198, "eaeaeb": 198, "page_button": 198, "border": [198, 210], "cursor": 198, "pointer": 198, "overflow": 198, "outlin": 198, "table_titl": 198, "font": 198, "2em": 198, "500": 198, "title_text": 198, "70px": 198, "inlin": 198, "flex": [198, 200, 201], "dropdown": 198, "1px": 198, "solid": 198, "radiu": 198, "4px": 198, "aeaeae": 198, "kind": [200, 201], "perturb": [200, 201], "create_datafram": 200, "pos_sync_tag": 200, "synthet": 200, "filter_by_entity_typ": 200, "ent_typ": 200, "get_sampl": 200, "sample_data": 200, "create_terminologi": [200, 201], "terminologi": [200, 201], "modify_capitalization_upp": [200, 201], "augment": [200, 202, 206], "modify_capitalization_low": [200, 201], "modify_capitalization_titl": [200, 201], "add_punctuation_to_data": 200, "strip_punctuation_from_data": 200, "strip": [200, 201], "senctenc": 200, "add_typo_to_sent": [200, 201], "introduce_typo": [200, 201], "introduc": [200, 201], "typo": [200, 201], "swap_entities_with_terminologi": 200, "get_cohyponyms_wordnet": [200, 201], "co": [200, 201], "hyponym": [200, 201], "wordnet": [200, 201], "swap_with_cohyponym": [200, 201], "databas": [200, 201], "convert_acc": 200, "lang_dict": [200, 201], "convers": [200, 201], "add_context_to_data": 200, "starting_context": [200, 201], "ending_context": [200, 201], "add_contract": [200, 201], "augment_robust": 200, "add_punctu": [200, 201], "strip_punctu": [200, 201], "make_typo": 200, "american_to_british": [200, 201], "british_to_american": [200, 201], "add_context": [200, 201], "swap_ent": [200, 201], "swap_cohyponym": [200, 201], "optimized_inplac": 200, "random_st": 200, "return_spark": 200, "conll_save_path": 200, "print_info": 200, "ignore_warn": 200, "nois": [200, 201], "british": [200, 201], "american": [200, 201], "inplac": 200, "distinctli": 200, "warn": 200, "about": 200, "test_and_augment_robust": 200, "pipeline_model": [200, 201, 206], "test_file_path": [200, 201], "conll_path_to_aug": 200, "metric_typ": [200, 201], "metrics_output_format": [200, 201], "robustness_test_result": [200, 201], "noise_prob": [200, 201, 202], "liner": 200, "assembl": [200, 201, 210], "applic": [200, 201], "strict": [200, 201], "special": [200, 201, 209], "test_set_languag": [200, 201], "list_of_str": 201, "keep_numeric_punctu": 201, "ie": 201, "40": 201, "000": 201, "modify_capit": 201, "got": 201, "swap_named_entities_from_terminologi": 201, "remove_punctuation_token": 201, "remove_context_token": 201, "starting_context_token": 201, "ending_context_token": 201, "remove_contraction_token": 201, "list_with_contract": 201, "list_without_contract": 201, "calculate_metr": 201, "filtered_df": 201, "noise_typ": 201, "noise_descript": 201, "test_set": 201, "total_amount": 201, "original_annotations_df": 201, "noisy_test_set": 201, "token_filter_funct": 201, "starting_context_token_list": 201, "ending_context_token_list": 201, "disrupt": 201, "conll_sentence_read": 201, "test_robust": 201, "sample_sentence_count": 201, "calculate_proport": 202, "f1_score": 202, "suggest_perturb": 202, "test_result": 202, "suggest": 202, "get_augmentation_proport": 202, "pull": 202, "printprogress": 203, "progress": 203, "bar": 203, "consol": 203, "internalresourcedownload": 203, "downlod": 203, "downloadmodel": 203, "reader": [203, 206], "j_dwn": 203, "internalspythonresourcedownload": 203, "showprivatemodel": 203, "showprivatepipelin": 203, "showuncategorizedresourc": 203, "uncategor": 203, "showavailableannot": 203, "returnprivatemodel": 203, "returnprivatepipelin": 203, "tabular": 204, "structureddeidentif": 204, "columnsse": 204, "userandomdatedisplac": 204, "street": 204, "internet": 204, "profess": 204, "opf": 204, "screen": 204, "protein": 204, "someth": 204, "someon": 204, "healthplan": 204, "obfuscatecolumn": 204, "texttodocumentscolumn": 205, "todocumentscolumn": 205, "annotationtooljsonread": 206, "cleanup_mod": 206, "split_char": 206, "context_char": 206, "min_chars_tol": 206, "align_chars_tol": 206, "merge_overlap": 206, "sddlpath": 206, "generateassertiontrainset": 206, "generateconl": 206, "creation": 206, "229937784": 206, "fih": 206, "18001": 206, "04t13": 206, "aleksei": 206, "136": 206, "142": 206, "37": 206, "79": 206, "305038693": 206, "65001": 206, "03t08": 206, "21": 206, "844970557": 206, "rwh": 206, "21001": 206, "84": 206, "97": 206, "914783811": 206, "97001": 206, "02t12": 206, "07": 206, "91": 206, "90": 206, "733882247": 206, "84001": 206, "02t15": 206, "73": 206, "77": 206, "assertion_df": 206, "rdr": 206, "sentencecol": 206, "assertioncol": 206, "generateplainassertiontrainset": 206, "taskcolumn": 206, "tokencol": 206, "nerlabel": 206, "codiespread": 206, "codiesp": 206, "readdatasettaskx": 206, "textfold": 206, "cantemistread": 206, "cantemist": 206, "readdatasettaskn": 206, "synonymaugmentationuml": 206, "umls_path": 206, "code_col": 206, "description_col": 206, "synonym": 206, "uml": 206, "augmentcsv": 206, "corpus_csv_path": 206, "do_product": 206, "augmentation_mod": 206, "plain_text": 206, "synonym_sourc": 206, "regex_pars": 206, "euclidean_distance_threshold": 206, "cosine_distance_threshold": 206, "synonym_limit": 206, "casing_funct": 206, "augmentdatafram": 206, "corpus_df": 206, "redatasethelp": 206, "spark_df": 206, "preprocess": 206, "i2b2_clinical_rel_dataset": 206, "column_map": 206, "begin1": 206, "firstcharent1": 206, "end1": 206, "lastcharent1": 206, "begin2": 206, "firstcharent2": 206, "end2": 206, "lastcharent2": 206, "create_annotation_column": 206, "txt_file": 206, "sent_id": 206, "beth": 206, "partner": 206, "i2b2": 206, "2010": 206, "va": 206, "tem": 206, "44": 206, "respiratori": 206, "satur": 206, "75": 206, "No": 206, "lotion": 206, "crea": 206, "146": 206, "trnap": 206, "incis": 206, "conc": 206, "43": [206, 219], "ter": 206, "picc": 206, "54": 206, "68": 206, "58": 206, "light": 206, "headed": 206, "diaphoresi": 206, "92": 206, "82": 206, "electroca": 206, "61": 206, "inferior": 206, "38": 206, "st": 206, "depressio": 206, "239": 206, "196": 206, "176": 206, "145": 206, "train_data": 206, "ner_column_nam": 206, "schema": 206, "printschema": 206, "root": 206, "nullabl": 206, "ner_log_pars": 207, "parse_logfil": 207, "avg": 207, "get_chart": [207, 217], "log_fil": [207, 217], "plot": [207, 217], "figur": [207, 217], "precis": [207, 217, 220], "loss_plot": [207, 217], "get_best_f1_scor": 207, "micro": 207, "macro": 207, "true_seq": [207, 217, 220], "pred_seq": [207, 217, 220], "overal": [207, 217, 220], "simpli": [207, 217, 220], "evaluate_conll_fil": [207, 217], "fileiter": [207, 217], "assertion_log_pars": 207, "updatecachemodel": 208, "cache_fold": 208, "refresh": 208, "overwrit": 208, "date_cutoff": 208, "sinc": 208, "get_mt_sampl": 209, "medical_speci": 209, "transcrib": 209, "transcript": 209, "mtsampl": 209, "allergy_immunologi": 209, "autopsi": 209, "bariatr": 209, "cardiovascular_pulmonari": 209, "chiropract": 209, "consult_history_and_phi": 209, "cosmetic_plastic_surgeri": 209, "dentistri": 209, "dermatologi": 209, "diets_and_nutrit": 209, "discharge_summari": 209, "emergency_room_report": 209, "endocrinologi": 209, "ent_otolaryngologi": 209, "gastroenterologi": 209, "general_medicin": 209, "hematology_oncologi": 209, "hospice_palliative_car": 209, "im": 209, "lab_medicine_pathologi": 209, "letter": 209, "nephrologi": 209, "neurologi": 209, "neurosurgeri": 209, "obstetrics_gynecologi": 209, "office_not": 209, "ophthalmologi": 209, "orthoped": 209, "pain_manag": 209, "pediatrics_neonat": 209, "physical_medicine_rehab": 209, "podiatri": 209, "psychiatry_psychologi": 209, "radiologi": 209, "rheumatologi": 209, "sleep_medicin": 209, "soap_chart_progress_not": 209, "speech_languag": 209, "surgeri": 209, "urologi": 209, "scrap": 209, "nlp_token_pipelin": 210, "nlp_pos_pipelin": 210, "token_pipeline_initi": 210, "pos_pipeline_initi": 210, "sentencedetectordlmodel": 210, "regular_token": 210, "regextoken": 210, "empty_df": 210, "get_doc_assembl": 210, "get_sent_detector": 210, "get_regular_token": 210, "get_regex_token": 210, "get_po": 210, "get_empty_df": 210, "get_nlp_token_pipelin": 210, "get_sentence_pipelin": 210, "get_rel_df": 210, "get_ner_df": 210, "get_ner_sentence_bord": 210, "get_nlp_pos_pipelin": 210, "tagger": 210, "get_single_task_conl": 210, "pos_pipelin": 210, "token_pipelin": 210, "style": [210, 213, 218], "get_token_df": 210, "_type_": 210, "read_conl": 210, "filepath": 210, "structured_deidentifi": 212, "columns_dict": 212, "ref_sourc": 212, "columns_se": 212, "date_format": 212, "is_module_import": 213, "lib": 213, "raise_except": 213, "pip_nam": 213, "message_typ": 213, "messag": 213, "instruct": 213, "internalannotatortyp": 215, "selector": 215, "aqua": [218, 219], "aquamarin": [218, 219], "blanchedalmond": [218, 219], "blue": [218, 219], "blueviolet": [218, 219], "burlywood": [218, 219], "ocr_entity_processor": 218, "file_path": 218, "bounding_box": 218, "save_fold": 218, "label_color": 218, "red": 218, "color_chart_path": 218, "color_chart": 218, "png": 218, "chunk_col": 218, "black_list": 218, "display_result": 218, "pageiteratorlevel": 218, "pagesegmod": 218, "pagesegmentationmod": 218, "sparse_text_osd": 218, "ocr": 218, "paint": 218, "highlight": 218, "black_band": 218, "band": 218, "bound": 218, "box": 218, "around": 218, "chart": 218, "label2color": 219, "label2rgb": 219, "colors_rgb": 219, "255": 219, "127": 219, "212": 219, "235": 219, "205": 219, "138": 219, "226": 219, "165": 219, "aggregate_ent": 220, "split_tag": 220, "chunk_typ": 220, "is_chunk_end": 220, "prev_tag": 220, "contradict": 220, "is_chunk_start": 220, "calc_metr": 220, "tp": 220, "percent": 220, "fb1": 220, "decim": 220, "count_chunk": 220, "correct_chunk": 220, "counter": 220, "correctli": 220, "true_chunk": 220, "pred_chunk": 220, "correct_count": 220, "true_count": 220, "pred_count": 220, "get_result": 220, "prec": 220, "rec": 220, "overview": 221}, "objects": {"": [[159, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [84, 0, 0, "-", "annotator"], [159, 3, 1, "", "annotators"], [119, 0, 0, "-", "base"], [123, 0, 0, "-", "common"], [124, 0, 0, "-", "compatibility"], [125, 0, 0, "-", "custom_transformer"], [126, 0, 0, "-", "deidentification_module"], [127, 0, 0, "-", "eval"], [142, 0, 0, "-", "finance"], [158, 0, 0, "-", "functions"], [159, 6, 1, "", "get_credentials"], [160, 0, 0, "-", "internal"], [175, 0, 0, "-", "legal"], [159, 6, 1, "", "library_settings"], [191, 0, 0, "-", "modelTracer"], [194, 0, 0, "-", "nlp_test"], [203, 0, 0, "-", "pretrained"], [159, 6, 1, "", "pub_version"], [159, 3, 1, "", "size_regex"], [159, 6, 1, "", "start"], [204, 0, 0, "-", "structured_deidentification"], [205, 0, 0, "-", "text_to_documents_columns"], [206, 0, 0, "-", "training"], [207, 0, 0, "-", "training_log_parser"], [159, 3, 1, "", "transformer_seq_classification"], [208, 0, 0, "-", "updateModels"], [209, 0, 0, "-", "util"], [214, 0, 0, "-", "utils"], [159, 6, 1, "", "version"], [159, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "LogRegClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "SVMClassifierTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "review_annotations"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [84, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [47, 0, 0, "-", "chunk2_token"], [84, 3, 1, "", "chunker"], [56, 0, 0, "-", "chunker"], [84, 3, 1, "", "classification"], [61, 0, 0, "-", "classification"], [84, 3, 1, "", "context"], [66, 0, 0, "-", "context"], [84, 3, 1, "", "deid"], [69, 0, 0, "-", "deid"], [84, 3, 1, "", "disambiguation"], [73, 0, 0, "-", "disambiguation"], [75, 0, 0, "-", "doc2_chunk_internal"], [79, 0, 0, "-", "embeddings"], [80, 0, 0, "-", "feature_assembler"], [81, 0, 0, "-", "filtering_params"], [84, 3, 1, "", "generic_classifier"], [83, 0, 0, "-", "generic_classifier"], [84, 3, 1, "", "keyword"], [86, 0, 0, "-", "merge"], [87, 0, 0, "-", "ner"], [96, 0, 0, "-", "normalizer"], [98, 0, 0, "-", "qa"], [101, 0, 0, "-", "re"], [106, 0, 0, "-", "resolution"], [109, 0, 0, "-", "resolution2_chunk"], [110, 0, 0, "-", "router"], [111, 0, 0, "-", "seq2seq"], [115, 0, 0, "-", "source_tracking_metadata_params"], [116, 0, 0, "-", "tf_graph_builder"], [117, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"], [42, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunk2_token": [[47, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker": [[48, 0, 0, "-", "assertion_filterer"], [49, 0, 0, "-", "chunk_converter"], [50, 0, 0, "-", "chunk_key_phrase_extraction"], [51, 0, 0, "-", "chunk_sentence_splitter"], [52, 0, 0, "-", "chunker_filterer"], [53, 0, 0, "-", "chunkmapper"], [54, 0, 0, "-", "chunkmapper_filterer"], [55, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[48, 4, 1, "", "caseSensitive"], [48, 4, 1, "", "criteria"], [48, 4, 1, "", "entitiesConfidence"], [48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"], [48, 4, 1, "", "regex"], [48, 2, 1, "", "setCaseSensitive"], [48, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[50, 4, 1, "", "concatenateSentences"], [50, 4, 1, "", "divergence"], [50, 4, 1, "", "documentLevelProcessing"], [50, 4, 1, "", "dropPunctuation"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 4, 1, "", "selectMostDifferent"], [50, 2, 1, "", "setConcatenateSentences"], [50, 2, 1, "", "setDivergence"], [50, 2, 1, "", "setDocumentLevelProcessing"], [50, 2, 1, "", "setDropPunctuation"], [50, 2, 1, "", "setSelectMostDifferent"], [50, 2, 1, "", "setTopN"], [50, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[51, 4, 1, "", "defaultEntity"], [51, 4, 1, "", "groupBySentences"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "insertChunk"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "setDefaultEntity"], [51, 2, 1, "", "setGroupBySentences"], [51, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, 1, 1, "", "ChunkFilterer"], [52, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[52, 4, 1, "", "blackList"], [52, 4, 1, "", "criteria"], [52, 4, 1, "", "filterValue"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 4, 1, "", "regex"], [52, 2, 1, "", "setBlackList"], [52, 2, 1, "", "setCriteria"], [52, 2, 1, "", "setFilterEntity"], [52, 2, 1, "", "setRegex"], [52, 2, 1, "", "setWhiteList"], [52, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[52, 4, 1, "", "blackList"], [52, 4, 1, "", "criteria"], [52, 4, 1, "", "entitiesConfidenceResource"], [52, 4, 1, "", "filterValue"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 4, 1, "", "regex"], [52, 2, 1, "", "setBlackList"], [52, 2, 1, "", "setCriteria"], [52, 2, 1, "", "setEntitiesConfidenceResource"], [52, 2, 1, "", "setFilterEntity"], [52, 2, 1, "", "setRegex"], [52, 2, 1, "", "setWhiteList"], [52, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, 1, 1, "", "ChunkMapperApproach"], [53, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [53, 1, 1, "", "ChunkMapperModel"], [53, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[53, 4, 1, "", "dictionary"], [53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "setDictionary"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[53, 4, 1, "", "enableCharFingerprintMatching"], [53, 4, 1, "", "enableFuzzyMatching"], [53, 4, 1, "", "enableTokenFingerprintMatching"], [53, 4, 1, "", "fuzzyDistanceScalingMode"], [53, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [53, 4, 1, "", "fuzzyMatchingDistances"], [53, 4, 1, "", "maxCharNgramFingerprint"], [53, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [53, 4, 1, "", "maxTokenNgramDroppingOperator"], [53, 4, 1, "", "maxTokenNgramDroppingTokens"], [53, 4, 1, "", "maxTokenNgramFingerprint"], [53, 4, 1, "", "minCharNgramFingerprint"], [53, 4, 1, "", "minTokenNgramFingerprint"], [53, 2, 1, "", "setEnableCharFingerprintMatching"], [53, 2, 1, "", "setEnableFuzzyMatching"], [53, 2, 1, "", "setEnableTokenFingerprintMatching"], [53, 2, 1, "", "setFuzzyDistanceScalingMode"], [53, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [53, 2, 1, "", "setFuzzyMatchingDistances"], [53, 2, 1, "", "setMaxCharNgramFingerprint"], [53, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [53, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [53, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [53, 2, 1, "", "setMaxTokenNgramFingerprint"], [53, 2, 1, "", "setMinCharNgramFingerprint"], [53, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[53, 4, 1, "", "allowMultiTokenChunk"], [53, 4, 1, "", "lowerCase"], [53, 4, 1, "", "multivaluesRelations"], [53, 4, 1, "", "rel"], [53, 4, 1, "", "rels"], [53, 2, 1, "", "setAllowMultiTokenChunk"], [53, 2, 1, "", "setLowerCase"], [53, 2, 1, "", "setMultivaluesRelations"], [53, 2, 1, "", "setRel"], [53, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 4, 1, "", "returnCriteria"], [54, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, 1, 1, "", "DocMapperApproach"], [55, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[55, 4, 1, "", "dictionary"], [55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[57, 0, 0, "-", "document_log_classifier"], [58, 0, 0, "-", "document_ml_classifier"], [59, 0, 0, "-", "generic_log_reg_classifier"], [60, 0, 0, "-", "generic_svm_classifier"], [62, 0, 0, "-", "medical_bert_for_sequence_classification"], [63, 0, 0, "-", "medical_bert_for_token_classifier"], [64, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, 1, 1, "", "DocumentLogRegClassifierApproach"], [57, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelColumn"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, 1, 1, "", "DocumentMLClassifierApproach"], [58, 1, 1, "", "DocumentMLClassifierModel"], [58, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[58, 4, 1, "", "classificationModelClass"], [58, 4, 1, "", "classificationModelPath"], [58, 4, 1, "", "fitIntercept"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labelCol"], [58, 4, 1, "", "maxIter"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "setClassificationModelClass"], [58, 2, 1, "", "setClassificationModelPath"], [58, 2, 1, "", "setFitIntercept"], [58, 2, 1, "", "setLabelCol"], [58, 2, 1, "", "setMaxIter"], [58, 2, 1, "", "setMaxTokenNgram"], [58, 2, 1, "", "setMinTokenNgram"], [58, 2, 1, "", "setTol"], [58, 2, 1, "", "setVectorizationModelPath"], [58, 4, 1, "", "tol"], [58, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[58, 4, 1, "", "classificationModel"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labels"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setClassificationModel"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setVectorizationModel"], [58, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[58, 4, 1, "", "labels"], [58, 4, 1, "", "maxTokenNgram"], [58, 4, 1, "", "mergeChunks"], [58, 4, 1, "", "minTokenNgram"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, 1, 1, "", "GenericLogRegClassifierApproach"], [59, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, 1, 1, "", "GenericSVMClassifierApproach"], [60, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[62, 4, 1, "", "coalesceSentences"], [62, 4, 1, "", "configProtoBytes"], [62, 2, 1, "", "getClasses"], [62, 4, 1, "", "inputAnnotatorTypes"], [62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "loadSavedModelOpenSource"], [62, 4, 1, "", "maxSentenceLength"], [62, 4, 1, "", "name"], [62, 4, 1, "", "outputAnnotatorType"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setCoalesceSentences"], [62, 2, 1, "", "setConfigProtoBytes"], [62, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "getClasses"], [63, 4, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "loadSavedModelOpenSource"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 4, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[64, 4, 1, "", "coalesceSentences"], [64, 4, 1, "", "configProtoBytes"], [64, 2, 1, "", "getClasses"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "loadSavedModelOpenSource"], [64, 4, 1, "", "maxSentenceLength"], [64, 4, 1, "", "name"], [64, 4, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setCoalesceSentences"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[65, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, 1, 1, "", "ContextualParserApproach"], [65, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[65, 4, 1, "", "caseSensitive"], [65, 4, 1, "", "completeContextMatch"], [65, 4, 1, "", "dictionary"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 4, 1, "", "jsonPath"], [65, 4, 1, "", "optionalContextRules"], [65, 4, 1, "", "outputAnnotatorType"], [65, 4, 1, "", "prefixAndSuffixMatch"], [65, 2, 1, "", "setCaseSensitive"], [65, 2, 1, "", "setCompleteContextMatch"], [65, 2, 1, "", "setDictionary"], [65, 2, 1, "", "setJsonPath"], [65, 2, 1, "", "setOptionalContextRules"], [65, 2, 1, "", "setPrefixAndSuffixMatch"], [65, 2, 1, "", "setShortestContextMatch"], [65, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[65, 4, 1, "", "caseSensitive"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 4, 1, "", "optionalContextRules"], [65, 4, 1, "", "outputAnnotatorType"], [65, 4, 1, "", "prefixAndSuffixMatch"], [65, 2, 1, "", "setCaseSensitive"], [65, 2, 1, "", "setOptionalContextRules"], [65, 2, 1, "", "setPrefixAndSuffixMatch"], [65, 2, 1, "", "setShortestContextMatch"], [65, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[67, 0, 0, "-", "deIdentification"], [68, 0, 0, "-", "doccument_hashcoder"], [70, 0, 0, "-", "name_obfuscator"], [71, 0, 0, "-", "reIdentification"], [72, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[67, 1, 1, "", "DeIdentification"], [67, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[67, 4, 1, "", "ageRanges"], [67, 4, 1, "", "blackList"], [67, 4, 1, "", "consistentObfuscation"], [67, 4, 1, "", "dateFormats"], [67, 4, 1, "", "dateTag"], [67, 4, 1, "", "dateToYear"], [67, 4, 1, "", "days"], [67, 4, 1, "", "entityCasingModesPath"], [67, 4, 1, "", "fixedMaskLength"], [67, 4, 1, "", "genderAwareness"], [67, 2, 1, "", "getBlackList"], [67, 2, 1, "", "getSameLengthFormattedEntities"], [67, 4, 1, "", "ignoreRegex"], [67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "isRandomDateDisplacement"], [67, 4, 1, "", "language"], [67, 4, 1, "", "mappingsColumn"], [67, 4, 1, "", "maskingPolicy"], [67, 4, 1, "", "minYear"], [67, 4, 1, "", "mode"], [67, 4, 1, "", "name"], [67, 4, 1, "", "obfuscateDate"], [67, 4, 1, "", "obfuscateRefFile"], [67, 4, 1, "", "obfuscateRefSource"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "outputAsDocument"], [67, 4, 1, "", "refFileFormat"], [67, 4, 1, "", "refSep"], [67, 4, 1, "", "regexOverride"], [67, 4, 1, "", "regexPatternsDictionary"], [67, 4, 1, "", "region"], [67, 4, 1, "", "returnEntityMappings"], [67, 4, 1, "", "sameEntityThreshold"], [67, 4, 1, "", "sameLengthFormattedEntities"], [67, 4, 1, "", "seed"], [67, 4, 1, "", "selectiveObfuscationModesPath"], [67, 2, 1, "", "setAgeRanges"], [67, 2, 1, "", "setBlackList"], [67, 2, 1, "", "setConsistentObfuscation"], [67, 2, 1, "", "setDateFormats"], [67, 2, 1, "", "setDateTag"], [67, 2, 1, "", "setDateToYear"], [67, 2, 1, "", "setDays"], [67, 2, 1, "", "setEntityCasingModes"], [67, 2, 1, "", "setFixedMaskLength"], [67, 2, 1, "", "setGenderAwareness"], [67, 2, 1, "", "setIgnoreRegex"], [67, 2, 1, "", "setIsRandomDateDisplacement"], [67, 2, 1, "", "setLanguage"], [67, 2, 1, "", "setMappingsColumn"], [67, 2, 1, "", "setMaskingPolicy"], [67, 2, 1, "", "setMinYear"], [67, 2, 1, "", "setMode"], [67, 2, 1, "", "setObfuscateDate"], [67, 2, 1, "", "setObfuscateRefFile"], [67, 2, 1, "", "setObfuscateRefSource"], [67, 2, 1, "", "setOutputAsDocument"], [67, 2, 1, "", "setRefFileFormat"], [67, 2, 1, "", "setRefSep"], [67, 2, 1, "", "setRegexOverride"], [67, 2, 1, "", "setRegexPatternsDictionary"], [67, 2, 1, "", "setRegion"], [67, 2, 1, "", "setReturnEntityMappings"], [67, 2, 1, "", "setSameEntityThreshold"], [67, 2, 1, "", "setSameLengthFormattedEntities"], [67, 2, 1, "", "setSeed"], [67, 2, 1, "", "setSelectiveObfuscationModes"], [67, 2, 1, "", "setUnnormalizedDateMode"], [67, 2, 1, "", "setUseShifDays"], [67, 2, 1, "", "setZipCodeTag"], [67, 4, 1, "", "unnormalizedDateMode"], [67, 4, 1, "", "useShifDays"], [67, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[67, 4, 1, "", "ageRanges"], [67, 4, 1, "", "blackList"], [67, 4, 1, "", "consistentObfuscation"], [67, 4, 1, "id0", "dateFormats"], [67, 4, 1, "", "dateTag"], [67, 4, 1, "", "dateToYear"], [67, 4, 1, "", "days"], [67, 4, 1, "", "fixedMaskLength"], [67, 4, 1, "", "genderAwareness"], [67, 2, 1, "", "getBlackList"], [67, 2, 1, "", "getRegexEntities"], [67, 2, 1, "", "getSameLengthFormattedEntities"], [67, 4, 1, "", "ignoreRegex"], [67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "isRandomDateDisplacement"], [67, 4, 1, "", "language"], [67, 4, 1, "", "mappingsColumn"], [67, 4, 1, "", "maskingPolicy"], [67, 4, 1, "", "minYear"], [67, 4, 1, "id13", "mode"], [67, 4, 1, "", "name"], [67, 4, 1, "", "obfuscateDate"], [67, 4, 1, "", "obfuscateRefSource"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "outputAsDocument"], [67, 2, 1, "", "pretrained"], [67, 4, 1, "", "regexEntities"], [67, 4, 1, "", "regexOverride"], [67, 4, 1, "", "region"], [67, 4, 1, "", "returnEntityMappings"], [67, 4, 1, "", "sameEntityThreshold"], [67, 4, 1, "", "sameLengthFormattedEntities"], [67, 4, 1, "", "seed"], [67, 2, 1, "", "setAgeRanges"], [67, 2, 1, "", "setBlackList"], [67, 2, 1, "", "setConsistentObfuscation"], [67, 2, 1, "", "setDateFormats"], [67, 2, 1, "", "setDateTag"], [67, 2, 1, "", "setDateToYear"], [67, 2, 1, "", "setDays"], [67, 2, 1, "", "setFixedMaskLength"], [67, 2, 1, "", "setGenderAwareness"], [67, 2, 1, "", "setIgnoreRegex"], [67, 2, 1, "", "setIsRandomDateDisplacement"], [67, 2, 1, "", "setLanguage"], [67, 2, 1, "", "setMappingsColumn"], [67, 2, 1, "", "setMaskingPolicy"], [67, 2, 1, "", "setMinYear"], [67, 2, 1, "", "setMode"], [67, 2, 1, "", "setObfuscateDate"], [67, 2, 1, "", "setObfuscateRefSource"], [67, 2, 1, "", "setOutputAsDocument"], [67, 2, 1, "", "setRegexOverride"], [67, 2, 1, "", "setRegion"], [67, 2, 1, "", "setReturnEntityMappings"], [67, 2, 1, "", "setSameEntityThreshold"], [67, 2, 1, "", "setSameLengthFormattedEntities"], [67, 2, 1, "", "setSeed"], [67, 2, 1, "", "setUnnormalizedDateMode"], [67, 2, 1, "", "setUseShifDays"], [67, 2, 1, "", "setZipCodeTag"], [67, 4, 1, "", "unnormalizedDateMode"], [67, 4, 1, "", "useShifDays"], [67, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[68, 4, 1, "", "dateShiftColumn"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "newDateShift"], [68, 4, 1, "", "outputAnnotatorType"], [68, 4, 1, "", "patientIdColumn"], [68, 4, 1, "", "rangeDays"], [68, 4, 1, "", "seed"], [68, 2, 1, "", "setDateShiftColumn"], [68, 2, 1, "", "setNewDateShift"], [68, 2, 1, "", "setParams"], [68, 2, 1, "", "setPatientIdColumn"], [68, 2, 1, "", "setRangeDays"], [68, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, 1, 1, "", "NameChunkObfuscator"], [70, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[70, 4, 1, "", "genderAwareness"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "language"], [70, 4, 1, "", "nameEntities"], [70, 4, 1, "", "obfuscateRefSource"], [70, 4, 1, "", "outputAnnotatorType"], [70, 2, 1, "", "pretrained"], [70, 4, 1, "", "sameLength"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setGenderAwareness"], [70, 2, 1, "", "setLanguage"], [70, 2, 1, "", "setNameEntities"], [70, 2, 1, "", "setObfuscateRefSource"], [70, 2, 1, "", "setSameLength"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[70, 4, 1, "", "genderAwareness"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "language"], [70, 4, 1, "", "nameEntities"], [70, 4, 1, "", "obfuscateRefFile"], [70, 4, 1, "", "obfuscateRefSource"], [70, 4, 1, "", "outputAnnotatorType"], [70, 4, 1, "", "refFileFormat"], [70, 4, 1, "", "refSep"], [70, 4, 1, "", "sameLength"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setGenderAwareness"], [70, 2, 1, "", "setLanguage"], [70, 2, 1, "", "setNameEntities"], [70, 2, 1, "", "setObfuscateRefFile"], [70, 2, 1, "", "setObfuscateRefSource"], [70, 2, 1, "", "setRefFileFormat"], [70, 2, 1, "", "setRefSep"], [70, 2, 1, "", "setSameLength"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[71, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[71, 4, 1, "", "inputAnnotatorTypes"], [71, 4, 1, "", "name"], [71, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[72, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[72, 2, 1, "", "getUseReplacement"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "name"], [72, 4, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "setUseReplacement"], [72, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[74, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, 1, 1, "", "NerDisambiguator"], [74, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[74, 4, 1, "", "embeddingTypeParam"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "levenshteinDistanceThresholdParam"], [74, 4, 1, "", "narrowWithApproximateMatching"], [74, 4, 1, "", "nearMatchingGapParam"], [74, 4, 1, "", "numFirstChars"], [74, 4, 1, "", "outputAnnotatorType"], [74, 4, 1, "", "predictionsLimit"], [74, 4, 1, "", "s3KnowledgeBaseName"], [74, 2, 1, "", "setEmbeddingType"], [74, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [74, 2, 1, "", "setNarrowWithApproximateMatching"], [74, 2, 1, "", "setNearMatchingGapParam"], [74, 2, 1, "", "setNumFirstChars"], [74, 2, 1, "", "setPredictionLimit"], [74, 2, 1, "", "setS3KnowledgeBaseName"], [74, 2, 1, "", "setTokenSearch"], [74, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[74, 4, 1, "", "embeddingTypeParam"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "levenshteinDistanceThresholdParam"], [74, 4, 1, "", "name"], [74, 4, 1, "", "narrowWithApproximateMatching"], [74, 4, 1, "", "nearMatchingGapParam"], [74, 4, 1, "", "numFirstChars"], [74, 4, 1, "", "outputAnnotatorType"], [74, 4, 1, "", "predictionsLimit"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setEmbeddingType"], [74, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [74, 2, 1, "", "setNarrowWithApproximateMatching"], [74, 2, 1, "", "setNearMatchingGapParam"], [74, 2, 1, "", "setNumFirstChars"], [74, 2, 1, "", "setPredictionLimit"], [74, 2, 1, "", "setTokenSearch"], [74, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[75, 4, 1, "", "chunkCol"], [75, 4, 1, "", "failOnMissing"], [75, 4, 1, "", "inputAnnotatorTypes"], [75, 4, 1, "", "isArray"], [75, 4, 1, "", "lowerCase"], [75, 4, 1, "", "name"], [75, 2, 1, "", "setChunkCol"], [75, 2, 1, "", "setFailOnMissing"], [75, 2, 1, "", "setIsArray"], [75, 2, 1, "", "setLowerCase"], [75, 2, 1, "", "setParams"], [75, 2, 1, "", "setStartCol"], [75, 2, 1, "", "setStartColByTokenIndex"], [75, 4, 1, "", "startCol"], [75, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.embeddings": [[76, 0, 0, "-", "average_embeddings"], [77, 0, 0, "-", "bert_sentence_embeddings"], [78, 0, 0, "-", "entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "name"], [76, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[77, 4, 1, "", "chunkWeight"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 2, 1, "", "load"], [77, 4, 1, "", "name"], [77, 4, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[78, 4, 1, "", "entityWeights"], [78, 4, 1, "", "inputAnnotatorTypes"], [78, 4, 1, "", "maxSyntacticDistance"], [78, 4, 1, "", "name"], [78, 4, 1, "", "outputAnnotatorType"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setEntityWeights"], [78, 2, 1, "", "setMaxSyntacticDistance"], [78, 2, 1, "", "setTargetEntities"], [78, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.feature_assembler": [[80, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[80, 4, 1, "", "inputAnnotatorTypes"], [80, 4, 1, "", "inputCols"], [80, 4, 1, "", "name"], [80, 4, 1, "", "outputAnnotatorType"], [80, 4, 1, "", "outputCol"], [80, 2, 1, "", "setInputCols"], [80, 2, 1, "", "setOutputCol"], [80, 2, 1, "", "setParams"], [80, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.filtering_params": [[81, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[81, 4, 1, "", "blackList"], [81, 4, 1, "", "criteria"], [81, 4, 1, "", "entitiesConfidence"], [81, 4, 1, "", "filterValue"], [81, 4, 1, "", "regex"], [81, 2, 1, "", "setAllowList"], [81, 2, 1, "", "setBlackList"], [81, 2, 1, "", "setCriteria"], [81, 2, 1, "", "setDenyList"], [81, 2, 1, "", "setFilterValue"], [81, 2, 1, "", "setRegex"], [81, 2, 1, "", "setWhiteList"], [81, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.generic_classifier": [[82, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[82, 1, 1, "", "GenericClassifierApproach"], [82, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[82, 4, 1, "", "batchSize"], [82, 4, 1, "", "dropout"], [82, 4, 1, "", "epochsN"], [82, 4, 1, "", "featureScaling"], [82, 4, 1, "", "fixImbalance"], [82, 4, 1, "", "inputAnnotatorTypes"], [82, 4, 1, "", "labelColumn"], [82, 4, 1, "", "learningRate"], [82, 4, 1, "", "modelFile"], [82, 4, 1, "", "multiClass"], [82, 4, 1, "", "outputAnnotatorType"], [82, 4, 1, "", "outputLogsPath"], [82, 2, 1, "", "setBatchSize"], [82, 2, 1, "", "setDropout"], [82, 2, 1, "", "setEpochsNumber"], [82, 2, 1, "", "setFeatureScaling"], [82, 2, 1, "", "setFixImbalance"], [82, 2, 1, "", "setLabelCol"], [82, 2, 1, "", "setLearningRate"], [82, 2, 1, "", "setModelFile"], [82, 2, 1, "", "setMultiClass"], [82, 2, 1, "", "setOutputLogsPath"], [82, 2, 1, "", "setValidationSplit"], [82, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[82, 4, 1, "", "classes"], [82, 4, 1, "", "inputAnnotatorTypes"], [82, 4, 1, "", "multiClass"], [82, 4, 1, "", "name"], [82, 4, 1, "", "outputAnnotatorType"], [82, 2, 1, "", "pretrained"], [82, 2, 1, "", "setMultiClass"]], "sparknlp_jsl.annotator.merge": [[85, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[85, 1, 1, "", "ChunkMergeApproach"], [85, 1, 1, "", "ChunkMergeModel"], [85, 1, 1, "", "MergeCommonParams"], [85, 1, 1, "", "MergePrioritizationParams"], [85, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[85, 4, 1, "", "inputAnnotatorTypes"], [85, 4, 1, "", "name"], [85, 4, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[85, 4, 1, "", "inputAnnotatorTypes"], [85, 4, 1, "", "name"], [85, 4, 1, "", "outputAnnotatorType"], [85, 2, 1, "", "pretrained"], [85, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[85, 4, 1, "", "mergeOverlapping"], [85, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[85, 4, 1, "", "chunkPrecedence"], [85, 4, 1, "", "chunkPrecedenceValuePrioritization"], [85, 4, 1, "", "defaultConfidence"], [85, 4, 1, "", "orderingFeatures"], [85, 4, 1, "", "selectionStrategy"], [85, 2, 1, "", "setChunkPrecedence"], [85, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [85, 2, 1, "", "setDefaultConfidence"], [85, 2, 1, "", "setOrderingFeatures"], [85, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[85, 4, 1, "", "entitiesConfidenceResource"], [85, 4, 1, "", "falsePositivesResource"], [85, 4, 1, "", "replaceDictResource"], [85, 2, 1, "", "setEntitiesConfidenceResource"], [85, 2, 1, "", "setFalsePositivesResource"], [85, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.ner": [[88, 0, 0, "-", "iob_tagger"], [89, 0, 0, "-", "medical_ner"], [90, 0, 0, "-", "ner_chunker"], [91, 0, 0, "-", "ner_converter_internal"], [92, 0, 0, "-", "ner_template_render"], [93, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[88, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[88, 4, 1, "", "inputAnnotatorTypes"], [88, 4, 1, "", "name"], [88, 4, 1, "", "outputAnnotatorType"], [88, 4, 1, "", "scheme"], [88, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[89, 1, 1, "", "MedicalNerApproach"], [89, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[89, 4, 1, "", "batchSize"], [89, 4, 1, "", "configProtoBytes"], [89, 4, 1, "", "dropout"], [89, 4, 1, "", "earlyStoppingCriterion"], [89, 4, 1, "", "earlyStoppingPatience"], [89, 4, 1, "", "enableMemoryOptimizer"], [89, 4, 1, "", "graphFile"], [89, 4, 1, "", "graphFolder"], [89, 4, 1, "", "includeAllConfidenceScores"], [89, 4, 1, "", "includeConfidence"], [89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "logPrefix"], [89, 4, 1, "", "lr"], [89, 4, 1, "", "outputAnnotatorType"], [89, 4, 1, "", "overrideExistingTags"], [89, 4, 1, "", "po"], [89, 4, 1, "", "pretrainedModelPath"], [89, 4, 1, "", "randomValidationSplitPerEpoch"], [89, 4, 1, "", "sentenceTokenIndex"], [89, 2, 1, "", "setBatchSize"], [89, 2, 1, "", "setConfigProtoBytes"], [89, 2, 1, "", "setDropout"], [89, 2, 1, "", "setEarlyStoppingCriterion"], [89, 2, 1, "", "setEarlyStoppingPatience"], [89, 2, 1, "", "setEnableMemoryOptimizer"], [89, 2, 1, "", "setGraphFile"], [89, 2, 1, "", "setGraphFolder"], [89, 2, 1, "", "setIncludeAllConfidenceScores"], [89, 2, 1, "", "setIncludeConfidence"], [89, 2, 1, "", "setLogPrefix"], [89, 2, 1, "", "setLr"], [89, 2, 1, "", "setOverrideExistingTags"], [89, 2, 1, "", "setPo"], [89, 2, 1, "", "setPretrainedModelPath"], [89, 2, 1, "", "setRandomValidationSplitPerEpoch"], [89, 2, 1, "", "setSentenceTokenIndex"], [89, 2, 1, "", "setTagsMapping"], [89, 2, 1, "", "setUseBestModel"], [89, 2, 1, "", "setUseContrib"], [89, 2, 1, "", "setValidationSplit"], [89, 4, 1, "", "useBestModel"], [89, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[89, 4, 1, "", "classes"], [89, 4, 1, "", "configProtoBytes"], [89, 2, 1, "", "getClasses"], [89, 2, 1, "", "getTrainingClassDistribution"], [89, 4, 1, "", "includeAllConfidenceScores"], [89, 4, 1, "", "includeConfidence"], [89, 4, 1, "", "inferenceBatchSize"], [89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "labelCasing"], [89, 2, 1, "", "loadSavedModel"], [89, 4, 1, "", "name"], [89, 4, 1, "", "outputAnnotatorType"], [89, 2, 1, "", "pretrained"], [89, 4, 1, "", "sentenceTokenIndex"], [89, 2, 1, "", "setConfigProtoBytes"], [89, 2, 1, "", "setIncludeConfidence"], [89, 2, 1, "", "setInferenceBatchSize"], [89, 2, 1, "", "setLabelCasing"], [89, 2, 1, "", "setSentenceTokenIndex"], [89, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[90, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[90, 4, 1, "", "inputAnnotatorTypes"], [90, 4, 1, "", "name"], [90, 4, 1, "", "outputAnnotatorType"], [90, 4, 1, "", "regexParsers"], [90, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[91, 1, 1, "", "CommonNerConverterInternalParams"], [91, 1, 1, "", "NerConverterInternal"], [91, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[91, 4, 1, "", "greedyMode"], [91, 4, 1, "", "ignoreStopWords"], [91, 4, 1, "", "preservePosition"], [91, 2, 1, "", "setAllowList"], [91, 2, 1, "", "setDenyList"], [91, 2, 1, "", "setGreedyMode"], [91, 2, 1, "", "setIgnoreStopWords"], [91, 2, 1, "", "setPreservePosition"], [91, 2, 1, "", "setThreshold"], [91, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[91, 4, 1, "", "inputAnnotatorTypes"], [91, 4, 1, "", "name"], [91, 4, 1, "", "outputAnnotatorType"], [91, 4, 1, "", "replaceDictResource"], [91, 4, 1, "", "replaceLabels"], [91, 2, 1, "", "setReplaceDictResource"], [91, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[91, 4, 1, "", "inputAnnotatorTypes"], [91, 4, 1, "", "name"], [91, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[92, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[92, 4, 1, "", "combineEntities"], [92, 4, 1, "", "entityScopes"], [92, 4, 1, "", "inputAnnotatorTypes"], [92, 4, 1, "", "outputAnnotatorType"], [92, 4, 1, "", "permuteEntities"], [92, 2, 1, "", "pretrained"], [92, 4, 1, "", "randomSeed"], [92, 4, 1, "", "resampleEntities"], [92, 2, 1, "", "setCombineEntities"], [92, 2, 1, "", "setEntityScopes"], [92, 2, 1, "", "setPermuteEntities"], [92, 2, 1, "", "setRandomSeed"], [92, 2, 1, "", "setResampleEntities"], [92, 2, 1, "", "setTemplates"], [92, 4, 1, "", "templates"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[93, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[93, 2, 1, "", "getClasses"], [93, 4, 1, "", "ignoreEntities"], [93, 4, 1, "", "inputAnnotatorTypes"], [93, 2, 1, "", "load"], [93, 4, 1, "", "name"], [93, 4, 1, "", "outputAnnotatorType"], [93, 4, 1, "", "predictionThreshold"], [93, 2, 1, "", "pretrained"], [93, 2, 1, "", "setEntityDefinitions"], [93, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[94, 0, 0, "-", "date_normalizer"], [95, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[94, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[94, 4, 1, "", "anchorDateDay"], [94, 4, 1, "", "anchorDateMonth"], [94, 4, 1, "", "anchorDateYear"], [94, 4, 1, "", "defaultReplacementDay"], [94, 4, 1, "", "defaultReplacementMonth"], [94, 4, 1, "", "defaultReplacementYear"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 4, 1, "", "outputDateFormat"], [94, 2, 1, "", "setAnchorDateDay"], [94, 2, 1, "", "setAnchorDateMonth"], [94, 2, 1, "", "setAnchorDateYear"], [94, 2, 1, "", "setDefaultReplacementDay"], [94, 2, 1, "", "setDefaultReplacementMonth"], [94, 2, 1, "", "setDefaultReplacementYear"], [94, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[95, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "lowercase"], [95, 4, 1, "", "outputAnnotatorType"], [95, 4, 1, "", "policy"], [95, 2, 1, "", "setLowercase"], [95, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[97, 0, 0, "-", "beam_search_params"], [99, 0, 0, "-", "medical_qa"], [100, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[97, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[97, 4, 1, "", "doSample"], [97, 4, 1, "", "ignoreTokenIds"], [97, 4, 1, "", "maxContextLength"], [97, 4, 1, "", "maxNewTokens"], [97, 4, 1, "", "noRepeatNgramSize"], [97, 2, 1, "", "setDoSample"], [97, 2, 1, "", "setIgnoreTokenIds"], [97, 2, 1, "", "setMaxContextLength"], [97, 2, 1, "", "setMaxNewTokens"], [97, 2, 1, "", "setNoRepeatNgramSize"], [97, 2, 1, "", "setRandomSeed"], [97, 2, 1, "", "setTopK"], [97, 4, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[99, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[99, 4, 1, "", "configProtoBytes"], [99, 4, 1, "", "customPrompt"], [99, 2, 1, "", "getQuestionTypes"], [99, 4, 1, "", "inputAnnotatorTypes"], [99, 2, 1, "", "loadMedicalTextGenerator"], [99, 2, 1, "", "loadSavedModel"], [99, 4, 1, "", "name"], [99, 4, 1, "", "outputAnnotatorType"], [99, 2, 1, "", "pretrained"], [99, 4, 1, "", "questionType"], [99, 2, 1, "", "setConfigProtoBytes"], [99, 2, 1, "", "setCustomPrompt"], [99, 2, 1, "", "setQuestionAnswerTerminals"], [99, 2, 1, "", "setQuestionPrompts"], [99, 2, 1, "", "setQuestionSkipLastToken"], [99, 2, 1, "", "setQuestionType"], [99, 2, 1, "", "setUseCache"], [99, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[100, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[100, 4, 1, "", "entities1"], [100, 4, 1, "", "entities2"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 4, 1, "", "name"], [100, 4, 1, "", "outputAnnotatorType"], [100, 4, 1, "", "questionMark"], [100, 4, 1, "", "questionPronoun"], [100, 2, 1, "", "setEntities1"], [100, 2, 1, "", "setEntities2"], [100, 2, 1, "", "setQuestionMark"], [100, 2, 1, "", "setQuestionPronoun"], [100, 2, 1, "", "setStrategyType"], [100, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[102, 0, 0, "-", "relation_extraction"], [103, 0, 0, "-", "relation_extraction_dl"], [104, 0, 0, "-", "relation_ner_chunk_filter"], [105, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[102, 1, 1, "", "GenericREModel"], [102, 1, 1, "", "PosologyREModel"], [102, 1, 1, "", "RelationExtractionApproach"], [102, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[102, 4, 1, "", "customLabels"], [102, 4, 1, "", "fromEntityBeginCol"], [102, 4, 1, "", "fromEntityEndCol"], [102, 4, 1, "", "fromEntityLabelCol"], [102, 4, 1, "", "inputAnnotatorTypes"], [102, 4, 1, "", "maxSyntacticDistance"], [102, 4, 1, "", "name"], [102, 4, 1, "", "outputAnnotatorType"], [102, 4, 1, "", "overrideExistingLabels"], [102, 4, 1, "", "pretrainedModelPath"], [102, 4, 1, "", "relationDirectionCol"], [102, 2, 1, "", "setCustomLabels"], [102, 2, 1, "", "setFromEntity"], [102, 2, 1, "", "setMaxSyntacticDistance"], [102, 2, 1, "", "setPretrainedModelPath"], [102, 2, 1, "", "setRelationDirectionCol"], [102, 2, 1, "", "setToEntity"], [102, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [102, 4, 1, "", "toEntityBeginCol"], [102, 4, 1, "", "toEntityEndCol"], [102, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[102, 4, 1, "", "classes"], [102, 4, 1, "", "customLabels"], [102, 2, 1, "", "getClasses"], [102, 2, 1, "", "getRelationTypePerPair"], [102, 4, 1, "", "inputAnnotatorTypes"], [102, 4, 1, "", "maxSyntacticDistance"], [102, 4, 1, "", "name"], [102, 4, 1, "", "outputAnnotatorType"], [102, 4, 1, "", "predictionThreshold"], [102, 2, 1, "", "pretrained"], [102, 4, 1, "", "relationPairs"], [102, 4, 1, "", "relationPairsCaseSensitive"], [102, 2, 1, "", "setCustomLabels"], [102, 2, 1, "", "setMaxSyntacticDistance"], [102, 2, 1, "", "setPredictionThreshold"], [102, 2, 1, "", "setRelationPairs"], [102, 2, 1, "", "setRelationPairsCaseSensitive"], [102, 2, 1, "", "setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[103, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[103, 4, 1, "", "batchSize"], [103, 4, 1, "", "classes"], [103, 4, 1, "", "customLabels"], [103, 2, 1, "", "getClasses"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 2, 1, "", "loadSavedModel"], [103, 4, 1, "", "name"], [103, 4, 1, "", "outputAnnotatorType"], [103, 4, 1, "", "predictionThreshold"], [103, 2, 1, "", "pretrained"], [103, 2, 1, "", "setBatchSize"], [103, 2, 1, "", "setCaseSensitive"], [103, 2, 1, "", "setCustomLabels"], [103, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[104, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[104, 4, 1, "", "docLevelRelations"], [104, 4, 1, "", "inputAnnotatorTypes"], [104, 4, 1, "", "maxSyntacticDistance"], [104, 4, 1, "", "name"], [104, 4, 1, "", "outputAnnotatorType"], [104, 4, 1, "", "relationPairs"], [104, 4, 1, "", "relationPairsCaseSensitive"], [104, 2, 1, "", "setDocLevelRelations"], [104, 2, 1, "", "setMaxSyntacticDistance"], [104, 2, 1, "", "setRelationPairs"], [104, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[105, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[105, 2, 1, "", "getClasses"], [105, 4, 1, "", "inputAnnotatorTypes"], [105, 2, 1, "", "loadSavedModel"], [105, 4, 1, "", "multiLabel"], [105, 4, 1, "", "negativeRelationships"], [105, 4, 1, "", "outputAnnotatorType"], [105, 4, 1, "", "predictionThreshold"], [105, 2, 1, "", "pretrained"], [105, 2, 1, "", "setNegativeRelationships"], [105, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[107, 0, 0, "-", "resolver_merger"], [108, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[107, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[107, 4, 1, "", "inputAnnotatorTypes"], [107, 4, 1, "", "name"], [107, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[108, 1, 1, "", "SentenceEntityResolverApproach"], [108, 1, 1, "", "SentenceEntityResolverModel"], [108, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[108, 4, 1, "", "aux_label_col"], [108, 4, 1, "", "dropCodesList"], [108, 4, 1, "", "inputAnnotatorTypes"], [108, 4, 1, "", "labelCol"], [108, 4, 1, "", "normalizedCol"], [108, 4, 1, "", "outputAnnotatorType"], [108, 4, 1, "", "overrideExistingCodes"], [108, 4, 1, "", "pretrainedModelPath"], [108, 4, 1, "", "returnCosineDistances"], [108, 2, 1, "", "setAuxLabelCol"], [108, 2, 1, "", "setDropCodesList"], [108, 2, 1, "", "setExtractCosineDistances"], [108, 2, 1, "", "setLabelCol"], [108, 2, 1, "", "setNormalizedCol"], [108, 2, 1, "", "setOverrideExistingCodes"], [108, 2, 1, "", "setPretrainedModelPath"], [108, 2, 1, "", "setUseAuxLabel"], [108, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[108, 4, 1, "", "aux_label_col"], [108, 4, 1, "", "inputAnnotatorTypes"], [108, 4, 1, "", "name"], [108, 4, 1, "", "outputAnnotatorType"], [108, 2, 1, "", "pretrained"], [108, 4, 1, "", "returnCosineDistances"], [108, 4, 1, "", "searchTree"], [108, 2, 1, "", "setAuxLabelCol"], [108, 2, 1, "", "setSearchTree"], [108, 2, 1, "", "setUseAuxLabel"], [108, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[108, 4, 1, "", "confidenceFunction"], [108, 4, 1, "", "distanceFunction"], [108, 4, 1, "", "inputAnnotatorTypes"], [108, 4, 1, "", "missAsEmpty"], [108, 4, 1, "", "neighbours"], [108, 2, 1, "", "setConfidenceFunction"], [108, 2, 1, "", "setDistanceFunction"], [108, 2, 1, "", "setMissAsEmpty"], [108, 2, 1, "", "setNeighbours"], [108, 2, 1, "", "setThreshold"], [108, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[109, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "name"], [109, 4, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[110, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[110, 4, 1, "", "filterFieldsElements"], [110, 4, 1, "", "inputAnnotatorTypes"], [110, 4, 1, "", "inputType"], [110, 4, 1, "", "metadataField"], [110, 4, 1, "", "name"], [110, 4, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "setFilterFieldsElements"], [110, 2, 1, "", "setInputCols"], [110, 2, 1, "", "setInputType"], [110, 2, 1, "", "setMetadataField"], [110, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq": [[112, 0, 0, "-", "medical_encoder_decoder"], [113, 0, 0, "-", "medical_summarizer"], [114, 0, 0, "-", "medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[112, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[112, 4, 1, "", "configProtoBytes"], [112, 4, 1, "", "doSample"], [112, 4, 1, "", "ignoreTokenIds"], [112, 4, 1, "", "inputAnnotatorTypes"], [112, 4, 1, "", "maxNewTokens"], [112, 4, 1, "", "maxTextLength"], [112, 4, 1, "", "name"], [112, 4, 1, "", "noRepeatNgramSize"], [112, 4, 1, "", "outputAnnotatorType"], [112, 4, 1, "", "randomSeed"], [112, 4, 1, "", "refineChunkSize"], [112, 4, 1, "", "refineMaxAttempts"], [112, 4, 1, "", "refineSummary"], [112, 4, 1, "", "refineSummaryTargetLength"], [112, 2, 1, "", "setConfigProtoBytes"], [112, 2, 1, "", "setDoSample"], [112, 2, 1, "", "setIgnoreTokenIds"], [112, 2, 1, "", "setMaxNewTokens"], [112, 2, 1, "", "setMaxTextLength"], [112, 2, 1, "", "setNoRepeatNgramSize"], [112, 2, 1, "", "setRandomSeed"], [112, 2, 1, "", "setRefineChunkSize"], [112, 2, 1, "", "setRefineMaxAttempts"], [112, 2, 1, "", "setRefineSummary"], [112, 2, 1, "", "setRefineSummaryTargetLength"], [112, 2, 1, "", "setStopAtEos"], [112, 2, 1, "", "setTopK"], [112, 4, 1, "", "stopAtEos"], [112, 4, 1, "", "task"], [112, 4, 1, "", "topK"], [112, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[113, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[113, 2, 1, "", "loadSavedModel"], [113, 4, 1, "", "name"], [113, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[114, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[114, 4, 1, "", "configProtoBytes"], [114, 4, 1, "", "inputAnnotatorTypes"], [114, 2, 1, "", "loadSavedModel"], [114, 4, 1, "", "maxTextLength"], [114, 4, 1, "", "modelType"], [114, 4, 1, "", "name"], [114, 4, 1, "", "outputAnnotatorType"], [114, 2, 1, "", "pretrained"], [114, 2, 1, "", "setConfigProtoBytes"], [114, 2, 1, "", "setMaxTextLength"], [114, 2, 1, "", "setStopAtEos"], [114, 2, 1, "", "setUseCache"], [114, 4, 1, "", "stopAtEos"], [114, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[115, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[115, 4, 1, "", "allPossibleFieldsToStandardize"], [115, 4, 1, "", "includeOutputColumn"], [115, 4, 1, "", "includeStandardField"], [115, 4, 1, "", "outputColumnKey"], [115, 2, 1, "", "setAllPossibleFieldsToStandardize"], [115, 2, 1, "", "setIncludeOutputColumn"], [115, 2, 1, "", "setIncludeStandardField"], [115, 2, 1, "", "setOutputColumnKey"], [115, 2, 1, "", "setStandardFieldKey"], [115, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.tf_graph_builder": [[116, 1, 1, "", "TFGraphBuilder"], [116, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[116, 4, 1, "", "batchNorm"], [116, 2, 1, "", "getBatchNorm"], [116, 2, 1, "", "getGraphFile"], [116, 2, 1, "", "getGraphFolder"], [116, 2, 1, "", "getHiddenAct"], [116, 2, 1, "", "getHiddenActL2"], [116, 2, 1, "", "getHiddenLayers"], [116, 2, 1, "", "getHiddenUnitsNumber"], [116, 2, 1, "", "getHiddenWeightsL2"], [116, 2, 1, "", "getInputCols"], [116, 2, 1, "", "getIsLicensed"], [116, 2, 1, "", "getLabelColumn"], [116, 2, 1, "", "getMaxSequenceLength"], [116, 2, 1, "", "getModelName"], [116, 2, 1, "", "getOutputAct"], [116, 2, 1, "", "getUseRelationDirection"], [116, 4, 1, "", "graphFile"], [116, 4, 1, "", "graphFolder"], [116, 4, 1, "", "hiddenAct"], [116, 4, 1, "", "hiddenActL2"], [116, 4, 1, "", "hiddenLayers"], [116, 4, 1, "", "hiddenUnitsNumber"], [116, 4, 1, "", "hiddenWeightsL2"], [116, 4, 1, "", "inputCols"], [116, 4, 1, "", "isLicensed"], [116, 4, 1, "", "labelColumn"], [116, 4, 1, "", "maxSequenceLength"], [116, 4, 1, "", "modelName"], [116, 4, 1, "", "outputAct"], [116, 2, 1, "", "setBatchNorm"], [116, 2, 1, "", "setGraphFile"], [116, 2, 1, "", "setGraphFolder"], [116, 2, 1, "", "setHiddenAct"], [116, 2, 1, "", "setHiddenActL2"], [116, 2, 1, "", "setHiddenLayers"], [116, 2, 1, "", "setHiddenUnitsNumber"], [116, 2, 1, "", "setHiddenWeightsL2"], [116, 2, 1, "", "setInputCols"], [116, 2, 1, "", "setIsLicensed"], [116, 2, 1, "", "setLabelColumn"], [116, 2, 1, "", "setMaxSequenceLength"], [116, 2, 1, "", "setModelName"], [116, 2, 1, "", "setUseRelationDirection"], [116, 2, 1, "", "settOutputAct"], [116, 4, 1, "id0", "useRelationDirection"]], "sparknlp_jsl.annotator.windowed": [[118, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[118, 1, 1, "", "WindowedParams"], [118, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[118, 4, 1, "", "glueString"], [118, 2, 1, "", "setGlueString"], [118, 2, 1, "", "setWindowSize"], [118, 4, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[118, 4, 1, "", "inputAnnotatorTypes"], [118, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.common": [[120, 0, 0, "-", "annotator_approach_internal"], [121, 0, 0, "-", "annotator_model_internal"], [122, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[120, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[120, 4, 1, "", "inputAnnotatorTypes"], [120, 4, 1, "", "outputAnnotatorType"], [120, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[121, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[121, 4, 1, "", "inputAnnotatorTypes"], [121, 4, 1, "", "outputAnnotatorType"], [121, 2, 1, "", "setParams"], [121, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[122, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[122, 2, 1, "", "inputColsValidation"], [122, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[124, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[124, 2, 1, "", "findVersion"], [124, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[125, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[125, 4, 1, "", "f"], [125, 2, 1, "", "setInputCol"], [125, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.deidentification_module": [[126, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[126, 2, 1, "", "deid_with_custom_pipeline"], [126, 2, 1, "", "deid_with_pretrained_pipeline"], [126, 2, 1, "", "deidentify"]], "sparknlp_jsl.eval": [[127, 1, 1, "", "NerCrfEvaluation"], [127, 1, 1, "", "NerDLEvaluation"], [127, 1, 1, "", "NerDLMetrics"], [127, 1, 1, "", "NorvigSpellEvaluation"], [127, 1, 1, "", "POSEvaluation"], [127, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[127, 2, 1, "", "computeAccuracyAnnotator"], [127, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[127, 2, 1, "", "computeAccuracyAnnotator"], [127, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[127, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[127, 2, 1, "", "computeAccuracyAnnotator"], [127, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[127, 2, 1, "", "computeAccuracyAnnotator"], [127, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[127, 2, 1, "", "computeAccuracyAnnotator"], [127, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[133, 0, 0, "-", "chunk_classification"], [138, 0, 0, "-", "graph"], [146, 0, 0, "-", "sequence_classification"], [151, 0, 0, "-", "sequence_generation"], [153, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[129, 0, 0, "-", "assertion"], [132, 0, 0, "-", "deid"], [136, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[128, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[128, 1, 1, "", "AssertionDLApproach"], [128, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[128, 4, 1, "", "name"], [128, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[130, 0, 0, "-", "deIdentification"], [131, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[130, 1, 1, "", "DeIdentification"], [130, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[130, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[130, 4, 1, "", "name"], [130, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[131, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[131, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[134, 0, 0, "-", "chunkmapper"], [135, 0, 0, "-", "docmapper"], [137, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[134, 1, 1, "", "ChunkMapperApproach"], [134, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[134, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[134, 4, 1, "", "name"], [134, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[135, 1, 1, "", "DocMapperApproach"], [135, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[135, 4, 1, "", "dictionary"], [135, 4, 1, "", "inputAnnotatorTypes"], [135, 4, 1, "", "name"], [135, 4, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[135, 4, 1, "", "inputAnnotatorTypes"], [135, 4, 1, "", "name"], [135, 4, 1, "", "outputAnnotatorType"], [135, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[137, 1, 1, "", "SentenceEntityResolverApproach"], [137, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[137, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[139, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[140, 0, 0, "-", "relation_extraction_dl"], [141, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[140, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[140, 2, 1, "", "loadSavedModel"], [140, 4, 1, "", "name"], [140, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[141, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[141, 2, 1, "", "loadSavedModel"], [141, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification": [[143, 0, 0, "-", "finance_bert_for_sequence_classification"], [144, 0, 0, "-", "finance_classifier_dl"], [145, 0, 0, "-", "finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[143, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[143, 2, 1, "", "loadSavedModel"], [143, 2, 1, "", "loadSavedModelOpenSource"], [143, 4, 1, "", "name"], [143, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[144, 1, 1, "", "FinanceClassifierDLApproach"], [144, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[144, 4, 1, "", "name"], [144, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[145, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [145, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[145, 4, 1, "", "name"], [145, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation": [[147, 0, 0, "-", "finance_encoder_decoder"], [148, 0, 0, "-", "finance_qa"], [149, 0, 0, "-", "finance_summarizer"], [150, 0, 0, "-", "finance_text_generator"], [152, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[147, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[147, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[148, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[148, 2, 1, "", "loadSavedModel"], [148, 4, 1, "", "name"], [148, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[149, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[149, 2, 1, "", "loadSavedModel"], [149, 4, 1, "", "name"], [149, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[150, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[150, 2, 1, "", "loadSavedModel"], [150, 4, 1, "", "name"], [150, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[152, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.token_classification": [[156, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[154, 0, 0, "-", "finance_bert_for_token_classifier"], [155, 0, 0, "-", "finance_ner"], [157, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[154, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[154, 2, 1, "", "loadSavedModel"], [154, 2, 1, "", "loadSavedModelOpenSource"], [154, 4, 1, "", "name"], [154, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[155, 1, 1, "", "FinanceNerApproach"], [155, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[155, 2, 1, "", "loadSavedModel"], [155, 4, 1, "", "name"], [155, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[157, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[157, 2, 1, "", "load"], [157, 4, 1, "", "name"], [157, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[158, 6, 1, "", "profile"], [158, 6, 1, "", "profileV22"], [158, 6, 1, "", "profileV22Y17"], [158, 6, 1, "", "profileV22Y18"], [158, 6, 1, "", "profileV22Y19"], [158, 6, 1, "", "profileV22Y20"], [158, 6, 1, "", "profileV22Y21"], [158, 6, 1, "", "profileV22Y22"], [158, 6, 1, "", "profileV23"], [158, 6, 1, "", "profileV23Y18"], [158, 6, 1, "", "profileV23Y19"], [158, 6, 1, "", "profileV24Y17"], [158, 6, 1, "", "profileV24Y18"], [158, 6, 1, "", "profileV24Y19"], [158, 6, 1, "", "profileV24Y20"], [158, 6, 1, "", "profileV24Y21"], [158, 6, 1, "", "profileV24Y22"]], "sparknlp_jsl.internal": [[160, 6, 1, "", "CustomLabels"], [160, 6, 1, "", "EntityWeights"], [160, 6, 1, "", "RelationalCategories"], [160, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[166, 0, 0, "-", "chunk_classification"], [171, 0, 0, "-", "graph"], [176, 0, 0, "-", "sequence_classification"], [180, 0, 0, "-", "sequence_generation"], [186, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[162, 0, 0, "-", "assertion"], [165, 0, 0, "-", "deid"], [169, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[161, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[161, 1, 1, "", "AssertionDLApproach"], [161, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[161, 4, 1, "", "name"], [161, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[163, 0, 0, "-", "deIdentification"], [164, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[163, 1, 1, "", "DeIdentification"], [163, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[163, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[163, 4, 1, "", "name"], [163, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[164, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[164, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[167, 0, 0, "-", "chunkmapper"], [168, 0, 0, "-", "docmapper"], [170, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[167, 1, 1, "", "ChunkMapperApproach"], [167, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[167, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[167, 4, 1, "", "name"], [167, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[168, 1, 1, "", "DocMapperApproach"], [168, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[168, 4, 1, "", "dictionary"], [168, 4, 1, "", "inputAnnotatorTypes"], [168, 4, 1, "", "name"], [168, 4, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[168, 4, 1, "", "inputAnnotatorTypes"], [168, 4, 1, "", "name"], [168, 4, 1, "", "outputAnnotatorType"], [168, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[170, 1, 1, "", "SentenceEntityResolverApproach"], [170, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[170, 4, 1, "", "name"], [170, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[172, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[173, 0, 0, "-", "relation_extraction_dl"], [174, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[173, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[173, 2, 1, "", "loadSavedModel"], [173, 4, 1, "", "name"], [173, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[174, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[174, 2, 1, "", "loadSavedModel"], [174, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification": [[177, 0, 0, "-", "legal_bert_for_sequence_classification"], [178, 0, 0, "-", "legal_classifier_dl"], [179, 0, 0, "-", "legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[177, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[177, 2, 1, "", "loadSavedModel"], [177, 2, 1, "", "loadSavedModelOpenSource"], [177, 4, 1, "", "name"], [177, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[178, 1, 1, "", "LegalClassifierDLApproach"], [178, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[178, 4, 1, "", "name"], [178, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[179, 1, 1, "", "LegalDocumentMLClassifierApproach"], [179, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[179, 4, 1, "", "name"], [179, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation": [[181, 0, 0, "-", "legal_encoder_decoder"], [182, 0, 0, "-", "legal_qa"], [183, 0, 0, "-", "legal_summarizer"], [184, 0, 0, "-", "legal_text_generator"], [185, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[181, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[181, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[182, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[182, 2, 1, "", "loadSavedModel"], [182, 4, 1, "", "name"], [182, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[183, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[183, 2, 1, "", "loadSavedModel"], [183, 4, 1, "", "name"], [183, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[184, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[184, 2, 1, "", "loadSavedModel"], [184, 4, 1, "", "name"], [184, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[185, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.token_classification": [[187, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[188, 0, 0, "-", "legal_bert_for_token_classifier"], [189, 0, 0, "-", "legal_ner"], [190, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[188, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[188, 2, 1, "", "loadSavedModel"], [188, 2, 1, "", "loadSavedModelOpenSource"], [188, 4, 1, "", "name"], [188, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[189, 1, 1, "", "LegalNerApproach"], [189, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[189, 2, 1, "", "loadSavedModel"], [189, 4, 1, "", "name"], [189, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[190, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[190, 2, 1, "", "load"], [190, 4, 1, "", "name"], [190, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[191, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[191, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[193, 0, 0, "-", "bias"], [195, 0, 0, "-", "noisy_labels"], [199, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[192, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[192, 1, 1, "", "RuleBasedClassifier"], [192, 6, 1, "", "init_medical_gender_classifier"], [192, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[192, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[196, 0, 0, "-", "noisy_label_fixing"], [197, 0, 0, "-", "noisy_label_testing"], [198, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[196, 1, 1, "", "InteractiveFix"], [196, 6, 1, "", "add_flag_to_conll"], [196, 6, 1, "", "apply_label_fixes"], [196, 6, 1, "", "conll_reader"], [196, 6, 1, "", "conll_writer"], [196, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[196, 2, 1, "", "adjust_page_size"], [196, 2, 1, "", "apply_fixes"], [196, 2, 1, "", "create_grid"], [196, 2, 1, "", "display"], [196, 2, 1, "", "empty_grid"], [196, 2, 1, "", "fill_grid"], [196, 2, 1, "", "fix_all"], [196, 2, 1, "", "fix_label"], [196, 2, 1, "", "get_cell_element"], [196, 2, 1, "", "get_central_grid"], [196, 2, 1, "", "get_classes"], [196, 2, 1, "", "get_default_indx"], [196, 2, 1, "", "get_drop_down"], [196, 2, 1, "", "get_drop_down_title"], [196, 2, 1, "", "get_footer"], [196, 2, 1, "", "get_header"], [196, 2, 1, "", "get_page_control_buttons"], [196, 2, 1, "", "get_page_number"], [196, 2, 1, "", "get_sentence"], [196, 2, 1, "", "get_title_html"], [196, 2, 1, "", "next_page"], [196, 2, 1, "", "num_sample_drop_down"], [196, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[197, 6, 1, "", "calculate_label_error_score"], [197, 6, 1, "", "get_label_quality_scores"], [197, 6, 1, "", "get_unique_entities"], [197, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[198, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[200, 0, 0, "-", "robustness_fixing"], [201, 0, 0, "-", "robustness_testing"], [202, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[200, 6, 1, "", "add_context_to_data"], [200, 6, 1, "", "add_contractions"], [200, 6, 1, "", "add_punctuation_to_data"], [200, 6, 1, "", "add_typo_to_sentence"], [200, 6, 1, "", "augment_robustness"], [200, 6, 1, "", "conll_reader"], [200, 6, 1, "", "convert_accent"], [200, 6, 1, "", "create_dataframe"], [200, 6, 1, "", "create_terminology"], [200, 6, 1, "", "filter_by_entity_type"], [200, 6, 1, "", "get_cohyponyms_wordnet"], [200, 6, 1, "", "get_sample"], [200, 6, 1, "", "introduce_typos"], [200, 6, 1, "", "modify_capitalization_lower"], [200, 6, 1, "", "modify_capitalization_title"], [200, 6, 1, "", "modify_capitalization_upper"], [200, 6, 1, "", "strip_punctuation_from_data"], [200, 6, 1, "", "swap_entities_with_terminology"], [200, 6, 1, "", "swap_with_cohyponym"], [200, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[201, 6, 1, "", "add_context"], [201, 6, 1, "", "add_contractions"], [201, 6, 1, "", "add_punctuation"], [201, 6, 1, "", "add_typo_to_sentence"], [201, 6, 1, "", "american_to_british"], [201, 6, 1, "", "british_to_american"], [201, 6, 1, "", "calculate_metrics"], [201, 6, 1, "", "conll_sentence_reader"], [201, 6, 1, "", "create_terminology"], [201, 6, 1, "", "get_cohyponyms_wordnet"], [201, 6, 1, "", "introduce_typos"], [201, 6, 1, "", "modify_capitalization"], [201, 6, 1, "", "remove_context_tokens"], [201, 6, 1, "", "remove_contraction_tokens"], [201, 6, 1, "", "remove_punctuation_tokens"], [201, 6, 1, "", "run_test"], [201, 6, 1, "", "strip_punctuation"], [201, 6, 1, "", "swap_named_entities_from_terminology"], [201, 6, 1, "", "swap_with_cohyponym"], [201, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[202, 6, 1, "", "calculate_proportion"], [202, 6, 1, "", "get_augmentation_proportions"], [202, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[203, 1, 1, "", "InternalResourceDownloader"], [203, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[203, 2, 1, "", "downloadModel"], [203, 2, 1, "", "returnPrivateModels"], [203, 2, 1, "", "returnPrivatePipelines"], [203, 2, 1, "", "showAvailableAnnotators"], [203, 2, 1, "", "showPrivateModels"], [203, 2, 1, "", "showPrivatePipelines"], [203, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[204, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[204, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[205, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[205, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[206, 1, 1, "", "AnnotationToolJsonReader"], [206, 1, 1, "", "CantemistReader"], [206, 1, 1, "", "CodiEspReader"], [206, 1, 1, "", "REDatasetHelper"], [206, 1, 1, "", "SynonymAugmentationUMLS"], [206, 3, 1, "", "tf_graph"], [206, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[206, 2, 1, "", "generateAssertionTrainSet"], [206, 2, 1, "", "generateConll"], [206, 2, 1, "", "generatePlainAssertionTrainSet"], [206, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[206, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[206, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[206, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[206, 2, 1, "", "augmentCsv"], [206, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[207, 1, 1, "", "assertion_log_parser"], [207, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[207, 2, 1, "", "get_best_f1_scores"], [207, 2, 1, "", "get_charts"], [207, 2, 1, "", "loss_plot"], [207, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[207, 2, 1, "", "evaluate"], [207, 2, 1, "", "evaluate_conll_file"], [207, 2, 1, "", "get_best_f1_scores"], [207, 2, 1, "", "get_charts"], [207, 2, 1, "", "loss_plot"], [207, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.updateModels": [[208, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[208, 2, 1, "", "updateCacheModels"], [208, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[209, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[210, 0, 0, "-", "alab_utils"], [211, 0, 0, "-", "conll_parse"], [212, 0, 0, "-", "deidentification_utils"], [213, 0, 0, "-", "imports"], [215, 0, 0, "-", "licensed_annotator_type"], [216, 0, 0, "-", "log_parse"], [217, 0, 0, "-", "ner_utils"], [218, 0, 0, "-", "ocr_nlp_processor"], [219, 0, 0, "-", "ocr_utils"], [220, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[210, 3, 1, "", "document_assembler"], [210, 3, 1, "", "empty_df"], [210, 6, 1, "", "get_doc_assembler"], [210, 6, 1, "", "get_empty_df"], [210, 6, 1, "", "get_ner_df"], [210, 6, 1, "", "get_ner_sentence_borders"], [210, 6, 1, "", "get_nlp_pos_pipeline"], [210, 6, 1, "", "get_nlp_token_pipeline"], [210, 6, 1, "", "get_pos"], [210, 6, 1, "", "get_regex_tokenizer"], [210, 6, 1, "", "get_regular_tokenizer"], [210, 6, 1, "", "get_rel_df"], [210, 6, 1, "", "get_sent_detector"], [210, 6, 1, "", "get_sentence_pipeline"], [210, 6, 1, "", "get_single_task_conll"], [210, 6, 1, "", "get_token_df"], [210, 3, 1, "", "nlp_pos_pipeline"], [210, 3, 1, "", "nlp_token_pipeline"], [210, 3, 1, "", "pos"], [210, 3, 1, "", "pos_pipeline_initialized"], [210, 6, 1, "", "read_conll"], [210, 3, 1, "", "regex_tokenizer"], [210, 3, 1, "", "regular_tokenizer"], [210, 3, 1, "", "sentence_detector"], [210, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[212, 6, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[213, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[215, 4, 1, "", "ASSERTION"], [215, 4, 1, "", "DISAMBIGUATION"], [215, 4, 1, "", "FEATURE_VECTOR"], [215, 4, 1, "", "KEYWORD"], [215, 4, 1, "", "SELECTOR"], [215, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[217, 6, 1, "", "evaluate"], [217, 6, 1, "", "evaluate_conll_file"], [217, 6, 1, "", "get_charts"], [217, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, 3, 1, "", "colors"], [218, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[219, 3, 1, "", "colors"], [219, 3, 1, "", "colors_rgb"], [219, 3, 1, "", "label2color"], [219, 3, 1, "", "label2rgb"]], "sparknlp_jsl.utils.training_log_parser_utils": [[220, 6, 1, "", "aggregate_entities"], [220, 6, 1, "", "calc_metrics"], [220, 6, 1, "", "count_chunks"], [220, 6, 1, "", "get_result"], [220, 6, 1, "", "is_chunk_end"], [220, 6, 1, "", "is_chunk_start"], [220, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 158, 159, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 158, 160, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 221], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 157, 161, 163, 164, 167, 168, 170, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 203, 204, 205, 206, 207, 208, 215], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 56, 61, 66, 69, 73, 79, 83, 84, 86, 87, 96, 98, 101, 106, 111, 117, 123, 129, 132, 136, 139, 146, 151, 156, 159, 162, 165, 169, 172, 176, 180, 187, 193, 195, 199, 214], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 82, 83], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 84, 133, 138, 142, 153, 159, 166, 171, 175, 186, 194], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 158, 159, 160, 192, 196, 197, 200, 201, 202, 203, 209, 210, 212, 213, 217, 218, 220], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 159, 206, 210, 218], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 84, 159], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "annotation_merg": 42, "assert": [43, 44, 45, 46, 128, 129, 161, 162], "assertiondl": [43, 128, 161], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunk2_token": 47, "chunker": [48, 49, 50, 51, 52, 53, 54, 55, 56], "assertion_filter": 48, "chunk_convert": 49, "chunk_key_phrase_extract": 50, "chunk_sentence_splitt": 51, "chunker_filter": 52, "chunkmapp": [53, 134, 167], "chunkmapper_filter": 54, "docmapp": [55, 135, 168], "classif": [57, 58, 59, 60, 61, 62, 63, 64], "document_log_classifi": 57, "document_ml_classifi": 58, "generic_log_reg_classifi": 59, "generic_svm_classifi": 60, "medical_bert_for_sequence_classif": 62, "medical_bert_for_token_classifi": 63, "medical_distilbert_for_sequence_classif": 64, "context": [65, 66], "contextual_pars": 65, "deid": [67, 68, 69, 70, 71, 72, 130, 131, 132, 163, 164, 165], "deidentif": [67, 130, 163], "paramet": [67, 116, 212], "doccument_hashcod": 68, "name_obfusc": 70, "reidentif": 71, "replac": 72, "disambigu": [73, 74], "ner_disambigu": 74, "doc2_chunk_intern": 75, "embed": [76, 77, 78, 79], "average_embed": 76, "bert_sentence_embed": 77, "entity_chunk_embed": 78, "feature_assembl": 80, "filtering_param": 81, "merg": [85, 86], "chunk_merg": 85, "ner": [87, 88, 89, 90, 91, 92, 93, 154, 155, 156, 157, 187, 188, 189, 190], "iob_tagg": 88, "medical_n": 89, "ner_chunk": 90, "ner_converter_intern": 91, "ner_template_rend": 92, "zero_shot_n": [93, 157, 190], "normal": [94, 95, 96], "date_norm": 94, "drug_norm": 95, "qa": [97, 98, 99, 100], "beam_search_param": 97, "medical_qa": 99, "qa_ner_gener": [100, 152, 185], "re": [101, 102, 103, 104, 105], "relation_extract": [102, 139, 140, 141, 172, 173, 174], "relation_extraction_dl": [103, 140, 173], "relation_ner_chunk_filt": 104, "zero_shot_relation_extract": [105, 141, 174], "resolut": [106, 107, 108, 134, 135, 136, 137, 167, 168, 169, 170], "resolver_merg": 107, "sentence_entity_resolv": [108, 137, 170], "resolution2_chunk": 109, "router": 110, "seq2seq": [111, 112, 113, 114], "medical_encoder_decod": 112, "medical_summar": 113, "medical_text_gener": 114, "source_tracking_metadata_param": 115, "tf_graph_build": 116, "window": [117, 118], "windowed_sent": 118, "base": 119, "common": [120, 121, 122, 123], "annotator_approach_intern": 120, "annotator_model_intern": 121, "annotator_properties_intern": 122, "compat": 124, "custom_transform": 125, "deidentification_modul": 126, "eval": 127, "financ": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157], "chunk_classif": [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "document_hashcod": [131, 164], "graph": [138, 139, 140, 141, 171, 172, 173, 174], "sequence_classif": [143, 144, 145, 146, 176, 177, 178, 179], "finance_bert_for_sequence_classif": 143, "finance_classifier_dl": 144, "finance_document_ml_classifi": 145, "sequence_gener": [147, 148, 149, 150, 151, 152, 180, 181, 182, 183, 184, 185], "finance_encoder_decod": 147, "finance_qa": 148, "finance_summar": 149, "finance_text_gener": 150, "token_classif": [153, 154, 155, 156, 157, 186, 187, 188, 189, 190], "finance_bert_for_token_classifi": 154, "finance_n": 155, "intern": 160, "legal": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "legal_bert_for_sequence_classif": 177, "legal_classifier_dl": 178, "legal_document_ml_classifi": 179, "legal_encoder_decod": 181, "legal_qa": 182, "legal_summar": 183, "legal_text_gener": 184, "legal_bert_for_token_classifi": 188, "legal_n": 189, "modeltrac": 191, "nlp_test": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "bia": [192, 193], "bias_test": 192, "noisy_label": [195, 196, 197, 198], "noisy_label_fix": 196, "noisy_label_test": 197, "util": [198, 202, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "robust": [199, 200, 201, 202], "robustness_fix": 200, "robustness_test": 201, "pretrain": 203, "structured_deidentif": 204, "text_to_documents_column": 205, "train": 206, "training_log_pars": 207, "updatemodel": 208, "alab_util": 210, "conll_pars": 211, "deidentification_util": 212, "return": 212, "import": 213, "licensed_annotator_typ": 215, "log_pars": 216, "ner_util": 217, "ocr_nlp_processor": 218, "ocr_util": 219, "training_log_parser_util": 220, "api": 221, "refer": 221}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [85, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [173, "module-contents"], [174, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [85, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [97, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [118, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [134, "classes"], [135, "classes"], [137, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [161, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [196, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [215, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [56, "submodules"], [61, "submodules"], [66, "submodules"], [69, "submodules"], [73, "submodules"], [79, "submodules"], [83, "submodules"], [84, "submodules"], [86, "submodules"], [87, "submodules"], [96, "submodules"], [98, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [117, "submodules"], [123, "submodules"], [129, "submodules"], [132, "submodules"], [136, "submodules"], [139, "submodules"], [146, "submodules"], [151, "submodules"], [156, "submodules"], [159, "submodules"], [162, "submodules"], [165, "submodules"], [169, "submodules"], [172, "submodules"], [176, "submodules"], [180, "submodules"], [187, "submodules"], [193, "submodules"], [195, "submodules"], [199, "submodules"], [214, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [84, "subpackages"], [133, "subpackages"], [138, "subpackages"], [142, "subpackages"], [153, "subpackages"], [159, "subpackages"], [166, "subpackages"], [171, "subpackages"], [175, "subpackages"], [186, "subpackages"], [194, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [192, "functions"], [196, "functions"], [197, "functions"], [200, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [209, "functions"], [210, "functions"], [212, "functions"], [213, "functions"], [217, "functions"], [218, "functions"], [220, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [159, "attributes"], [206, "attributes"], [210, "attributes"], [218, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [84, "package-contents"], [159, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[61, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[66, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[67, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Parameters": [[67, "parameters"], [116, "parameters"], [116, "id1"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[69, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[71, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[72, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[73, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.feature_assembler": [[80, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[81, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[82, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[83, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator": [[84, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[85, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[86, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[87, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[88, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[89, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[90, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[91, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[92, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[93, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[94, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[96, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[97, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[98, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[99, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[100, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[101, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[102, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[103, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[104, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[105, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[106, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[107, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[108, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[109, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[110, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[111, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[112, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[113, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[114, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[115, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.tf_graph_builder": [[116, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.windowed": [[117, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[118, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[119, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[120, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[121, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[122, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[123, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[124, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[125, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[126, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[127, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[128, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[129, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[130, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[131, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[132, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[133, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[134, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[135, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[136, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[137, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[138, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[139, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[140, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[141, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[142, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[143, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[144, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[145, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[146, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[147, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[148, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[149, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[150, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[151, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[152, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[153, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[154, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[155, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[156, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[157, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[158, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[159, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[160, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[161, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[162, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[163, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[164, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[165, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[166, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[167, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[168, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[169, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[170, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[171, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[172, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[173, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[174, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[175, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[176, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[177, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[178, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[179, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[180, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[181, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[182, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[183, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[184, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[185, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[186, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[187, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[188, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[189, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[190, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[191, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[192, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[193, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[194, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[195, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[196, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[198, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[199, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[200, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[201, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[202, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[203, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[204, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[205, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[206, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[207, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.updateModels": [[208, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[209, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[210, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[211, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[212, "module-sparknlp_jsl.utils.deidentification_utils"]], "Parameters:": [[212, "parameters"]], "Returns:": [[212, "returns"]], "sparknlp_jsl.utils.imports": [[213, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[214, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[216, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[217, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[219, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.training_log_parser_utils": [[220, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[221, "api-reference"]], "Modules": [[221, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunk2_token"], [48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [55, "module-sparknlp_jsl.annotator.chunker.docmapper"], [56, "module-sparknlp_jsl.annotator.chunker"], [57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [61, "module-sparknlp_jsl.annotator.classification"], [62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [65, "module-sparknlp_jsl.annotator.context.contextual_parser"], [66, "module-sparknlp_jsl.annotator.context"], [67, "module-sparknlp_jsl.annotator.deid.deIdentification"], [68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [69, "module-sparknlp_jsl.annotator.deid"], [70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [71, "module-sparknlp_jsl.annotator.deid.reIdentification"], [72, "module-sparknlp_jsl.annotator.deid.replacer"], [73, "module-sparknlp_jsl.annotator.disambiguation"], [74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [79, "module-sparknlp_jsl.annotator.embeddings"], [80, "module-sparknlp_jsl.annotator.feature_assembler"], [81, "module-sparknlp_jsl.annotator.filtering_params"], [82, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [83, "module-sparknlp_jsl.annotator.generic_classifier"], [84, "module-sparknlp_jsl.annotator"], [85, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [86, "module-sparknlp_jsl.annotator.merge"], [87, "module-sparknlp_jsl.annotator.ner"], [88, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [89, "module-sparknlp_jsl.annotator.ner.medical_ner"], [90, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [91, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [92, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [93, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [94, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [95, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [96, "module-sparknlp_jsl.annotator.normalizer"], [97, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [98, "module-sparknlp_jsl.annotator.qa"], [99, "module-sparknlp_jsl.annotator.qa.medical_qa"], [100, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [101, "module-sparknlp_jsl.annotator.re"], [102, "module-sparknlp_jsl.annotator.re.relation_extraction"], [103, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [104, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [105, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [106, "module-sparknlp_jsl.annotator.resolution"], [107, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [108, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [109, "module-sparknlp_jsl.annotator.resolution2_chunk"], [110, "module-sparknlp_jsl.annotator.router"], [111, "module-sparknlp_jsl.annotator.seq2seq"], [112, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [113, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [114, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [115, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [116, "module-sparknlp_jsl.annotator.tf_graph_builder"], [117, "module-sparknlp_jsl.annotator.windowed"], [118, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [119, "module-sparknlp_jsl.base"], [120, "module-sparknlp_jsl.common.annotator_approach_internal"], [121, "module-sparknlp_jsl.common.annotator_model_internal"], [122, "module-sparknlp_jsl.common.annotator_properties_internal"], [123, "module-sparknlp_jsl.common"], [124, "module-sparknlp_jsl.compatibility"], [125, "module-sparknlp_jsl.custom_transformer"], [126, "module-sparknlp_jsl.deidentification_module"], [127, "module-sparknlp_jsl.eval"], [128, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [129, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [130, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [131, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [132, "module-sparknlp_jsl.finance.chunk_classification.deid"], [133, "module-sparknlp_jsl.finance.chunk_classification"], [134, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [135, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [136, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [137, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [138, "module-sparknlp_jsl.finance.graph"], [139, "module-sparknlp_jsl.finance.graph.relation_extraction"], [140, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [141, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [142, "module-sparknlp_jsl.finance"], [143, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [144, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [145, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [146, "module-sparknlp_jsl.finance.sequence_classification"], [147, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [148, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [149, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [150, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [151, "module-sparknlp_jsl.finance.sequence_generation"], [152, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [153, "module-sparknlp_jsl.finance.token_classification"], [154, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [155, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [156, "module-sparknlp_jsl.finance.token_classification.ner"], [157, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [158, "module-sparknlp_jsl.functions"], [159, "module-sparknlp_jsl"], [160, "module-sparknlp_jsl.internal"], [161, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [162, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [163, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [164, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [165, "module-sparknlp_jsl.legal.chunk_classification.deid"], [166, "module-sparknlp_jsl.legal.chunk_classification"], [167, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [168, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [169, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [170, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [171, "module-sparknlp_jsl.legal.graph"], [172, "module-sparknlp_jsl.legal.graph.relation_extraction"], [173, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [174, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [175, "module-sparknlp_jsl.legal"], [176, "module-sparknlp_jsl.legal.sequence_classification"], [177, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [178, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [179, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [180, "module-sparknlp_jsl.legal.sequence_generation"], [181, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [182, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [183, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [184, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [185, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [186, "module-sparknlp_jsl.legal.token_classification"], [187, "module-sparknlp_jsl.legal.token_classification.ner"], [188, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [189, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [190, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [191, "module-sparknlp_jsl.modelTracer"], [192, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [193, "module-sparknlp_jsl.nlp_test.bias"], [194, "module-sparknlp_jsl.nlp_test"], [195, "module-sparknlp_jsl.nlp_test.noisy_labels"], [196, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [198, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [199, "module-sparknlp_jsl.nlp_test.robustness"], [200, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [201, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [202, "module-sparknlp_jsl.nlp_test.robustness.utils"], [203, "module-sparknlp_jsl.pretrained"], [204, "module-sparknlp_jsl.structured_deidentification"], [205, "module-sparknlp_jsl.text_to_documents_columns"], [206, "module-sparknlp_jsl.training"], [207, "module-sparknlp_jsl.training_log_parser"], [208, "module-sparknlp_jsl.updateModels"], [209, "module-sparknlp_jsl.util"], [210, "module-sparknlp_jsl.utils.alab_utils"], [211, "module-sparknlp_jsl.utils.conll_parse"], [212, "module-sparknlp_jsl.utils.deidentification_utils"], [213, "module-sparknlp_jsl.utils.imports"], [214, "module-sparknlp_jsl.utils"], [215, "module-sparknlp_jsl.utils.licensed_annotator_type"], [216, "module-sparknlp_jsl.utils.log_parse"], [217, "module-sparknlp_jsl.utils.ner_utils"], [218, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [219, "module-sparknlp_jsl.utils.ocr_utils"], [220, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "logregclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "svmclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "review_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [128, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [161, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [128, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [161, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "inputannotatortypes (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "name (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "outputannotatortype (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "casesensitive (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "criteria (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "entitiesconfidence (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.entitiesConfidence"]], "inputannotatortypes (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "regex (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "setcasesensitive() (assertionfilterer method)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "whitelist (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "criteria (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "filtervalue (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "inputannotatortypes (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "regex (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "setblacklist() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcriteria() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setfilterentity() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setregex() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "whitelist (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [134, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [167, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [134, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [167, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [134, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [167, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "name (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (genericlogregclassifiermodel static method)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "name (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "pretrained() (genericsvmclassifiermodel static method)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[61, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "optionalcontextrules (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "setcasesensitive() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[66, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"]], "blacklist (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"]], "consistentobfuscation (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "dateformats (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[67, "id0"], [67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"]], "entitycasingmodespath (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "fixedmasklength (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "genderawareness (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.genderAwareness"]], "genderawareness (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.genderAwareness"]], "getblacklist() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getregexentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "getsamelengthformattedentities() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"]], "getsamelengthformattedentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"]], "ignoreregex (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "israndomdatedisplacement (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "language (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"]], "mappingscolumn (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "minyear (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[67, "id13"], [67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [130, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [163, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [130, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [163, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatedate (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "outputannotatortype (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "pretrained() (deidentificationmodel static method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [130, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [163, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "region (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "samelengthformattedentities (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"]], "samelengthformattedentities (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"]], "seed (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"]], "selectiveobfuscationmodespath (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "setageranges() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setblacklist() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setconsistentobfuscation() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"]], "setentitycasingmodes() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setfixedmasklength() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setgenderawareness() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGenderAwareness"]], "setgenderawareness() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGenderAwareness"]], "setignoreregex() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setlanguage() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setmappingscolumn() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setminyear() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatedate() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setoutputasdocument() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setreffileformat() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregion() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"]], "setsamelengthformattedentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"]], "setseed() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"]], "setselectiveobfuscationmodes() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setzipcodetag() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentification": [[67, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "unnormalizeddatemode (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"]], "zipcodetag (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[69, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "genderawareness (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "inputannotatortypes (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "language (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "nameentities (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "outputannotatortype (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "pretrained() (namechunkobfuscator static method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.pretrained"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "seed (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setgenderawareness() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setlanguage() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setnameentities() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[71, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[72, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[73, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "sparknlp_jsl.annotator.embeddings": [[79, "module-sparknlp_jsl.annotator.embeddings"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "inputannotatortypes (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "outputannotatortype (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[80, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[80, "module-sparknlp_jsl.annotator.feature_assembler"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "blacklist (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.blackList"]], "criteria (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "entitiesconfidence (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.entitiesConfidence"]], "filtervalue (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setallowlist() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setAllowList"]], "setblacklist() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setBlackList"]], "setcriteria() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setdenylist() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setDenyList"]], "setfiltervalue() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "setwhitelist() (filteringparams method)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setWhiteList"]], "sparknlp_jsl.annotator.filtering_params": [[81, "module-sparknlp_jsl.annotator.filtering_params"]], "whitelist (filteringparams attribute)": [[81, "sparknlp_jsl.annotator.filtering_params.FilteringParams.whiteList"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputlogspath() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[82, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[82, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[83, "module-sparknlp_jsl.annotator.generic_classifier"]], "assertion (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator": [[84, "module-sparknlp_jsl.annotator"]], "windowed (in module sparknlp_jsl.annotator)": [[84, "sparknlp_jsl.annotator.windowed"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "chunkprecedence (mergeprioritizationparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergeprioritizationparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "inputannotatortypes (chunkmergeapproach attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (mergecommonparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergeprioritizationparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedictresource (mergeresourceparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "selectionstrategy (mergeprioritizationparams attribute)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "setchunkprecedence() (mergeprioritizationparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (mergecommonparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (mergeprioritizationparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setreplacedictresource() (mergeresourceparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (mergeprioritizationparams method)": [[85, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[85, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[86, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[87, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[88, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[88, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "dropout (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "getclasses() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "gettrainingclassdistribution() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "sentencetokenindex (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "setbatchsize() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdropout() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "settagsmapping() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[89, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "trainingclassdistribution (medicalnermodel attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[89, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[90, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[90, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "greedymode (commonnerconverterinternalparams attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setallowlist() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setdenylist() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setgreedymode() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[91, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "combineentities (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "entityscopes (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "permuteentities (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "resampleentities (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "setcombineentities() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setpermuteentities() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[92, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [157, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [190, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [157, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [190, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [157, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [190, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[93, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[93, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[94, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[94, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[96, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[97, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[97, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[98, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "configprotobytes (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "customprompt (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "getquestiontypes() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "inputannotatortypes (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "name (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "outputannotatortype (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "pretrained() (medicalquestionanswering static method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "setconfigprotobytes() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setusecache() (medicalquestionanswering method)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "sparknlp_jsl.annotator.qa.medical_qa": [[99, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "usecache (medicalquestionanswering attribute)": [[99, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[100, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[100, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[101, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "fromentitybegincol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getrelationtypeperpair() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "inputannotatortypes (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "name (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfromentity() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setpredictionthreshold() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractionmodel method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "settoentity() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[102, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[102, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [140, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [173, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [140, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [173, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [140, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [173, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[103, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[104, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[104, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [141, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [174, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [141, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [174, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[105, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[105, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[106, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[107, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[107, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[107, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[107, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[107, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "aux_label_col (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [170, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [137, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [170, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setauxlabelcol() (sentenceentityresolvermodel method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[108, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[108, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[109, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[109, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[109, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[109, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[109, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[109, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[110, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[110, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[110, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[110, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[110, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "skiplpinputcolsvalidation (router attribute)": [[110, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[110, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[111, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "configprotobytes (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "dosample (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "ignoretokenids (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "maxnewtokens (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "name (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "outputannotatortype (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "randomseed (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "refinechunksize (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setignoretokenids() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setrandomseed() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[112, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "usecache (medicalencoderdecoder attribute)": [[112, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "loadsavedmodel() (medicalsummarizer static method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "name (medicalsummarizer attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "pretrained() (medicalsummarizer static method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[113, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "configprotobytes (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "inputannotatortypes (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "loadsavedmodel() (medicaltextgenerator static method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxtextlength (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "modeltype (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "outputannotatortype (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "pretrained() (medicaltextgenerator static method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "setconfigprotobytes() (medicaltextgenerator method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setmaxtextlength() (medicaltextgenerator method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setstopateos() (medicaltextgenerator method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "setusecache() (medicaltextgenerator method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[114, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "usecache (medicaltextgenerator attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[115, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[115, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getoutputact() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getuserelationdirection() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "setbatchnorm() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[116, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[116, "id0"], [116, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "sparknlp_jsl.annotator.windowed": [[117, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "gluestring (windowedparams attribute)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "inputannotatortypes (windowedsentencemodel attribute)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "setgluestring() (windowedparams method)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setwindowsize() (windowedparams method)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[118, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "windowsize (windowedparams attribute)": [[118, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "sparknlp_jsl.base": [[119, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[120, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[120, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[120, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[120, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[120, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[121, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[121, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[121, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[121, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[121, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[121, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[122, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[122, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[122, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[122, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[123, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[124, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[124, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[124, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[124, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[125, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[125, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[125, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[125, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[125, "module-sparknlp_jsl.custom_transformer"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[126, "sparknlp_jsl.deidentification_module.Deidentifier"]], "deid_with_custom_pipeline() (deidentifier method)": [[126, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[126, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[126, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "sparknlp_jsl.deidentification_module": [[126, "module-sparknlp_jsl.deidentification_module"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[127, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[127, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[127, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[127, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[127, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[127, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[127, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[127, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[127, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[127, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[127, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[127, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[127, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[128, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[128, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[128, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[129, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[130, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[130, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[130, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[131, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "setidcolumn() (financedocumenthashcoder method)": [[131, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[131, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[132, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[133, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[134, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[134, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[134, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[135, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[135, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[136, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[137, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[137, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[137, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[138, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[139, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[140, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[140, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[141, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[141, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[142, "module-sparknlp_jsl.finance"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[143, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[143, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[143, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[143, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[143, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[143, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[144, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[145, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[146, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[147, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "name (financeencoderdecoder attribute)": [[147, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[147, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "loadsavedmodel() (financequestionanswering static method)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "name (financequestionanswering attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "pretrained() (financequestionanswering static method)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[148, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "loadsavedmodel() (financesummarizer static method)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "name (financesummarizer attribute)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "pretrained() (financesummarizer static method)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[149, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "loadsavedmodel() (financetextgenerator static method)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "name (financetextgenerator attribute)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "pretrained() (financetextgenerator static method)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[150, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[151, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[152, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[152, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[153, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[154, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[154, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[154, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[154, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[154, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[154, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[155, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[156, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[157, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[157, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profile"]], "profilev22() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24y17() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y17"]], "profilev24y18() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y18"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[158, "sparknlp_jsl.functions.profileV24Y22"]], "sparknlp_jsl.functions": [[158, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[159, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[159, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[159, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[159, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[159, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[159, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[159, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[159, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[159, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[159, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[160, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[160, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[160, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[160, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[160, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[161, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[161, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[161, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[162, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[163, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[163, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[163, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[164, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "setidcolumn() (legaldocumenthashcoder method)": [[164, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[164, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[165, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[166, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[167, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[167, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[167, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[168, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[168, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[169, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[170, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[170, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[170, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[171, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[172, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[173, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[173, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[174, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[174, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[175, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[176, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[177, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[177, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[177, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[177, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[177, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[177, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[178, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[179, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[180, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "name (legalencoderdecoder attribute)": [[181, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[181, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "loadsavedmodel() (legalquestionanswering static method)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "name (legalquestionanswering attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "pretrained() (legalquestionanswering static method)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[182, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "loadsavedmodel() (legalsummarizer static method)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "name (legalsummarizer attribute)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "pretrained() (legalsummarizer static method)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[183, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "loadsavedmodel() (legaltextgenerator static method)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "name (legaltextgenerator attribute)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "pretrained() (legaltextgenerator static method)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[184, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[185, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[185, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[186, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[187, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[188, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[188, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[188, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[188, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[188, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[188, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[189, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[190, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[190, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[191, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[191, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[191, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[192, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[192, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[192, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[192, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[192, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[193, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[194, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[195, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[196, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[196, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[198, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[198, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[199, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[200, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[200, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[201, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[202, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[202, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[202, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[202, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[203, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[203, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[203, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[204, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[204, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[204, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[205, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[205, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[205, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[206, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[206, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[206, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[206, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[206, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[206, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[206, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[206, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[206, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[206, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[206, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[207, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[207, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[207, "module-sparknlp_jsl.training_log_parser"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[208, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[208, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[208, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[208, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[209, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[209, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[210, "module-sparknlp_jsl.utils.alab_utils"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[210, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[211, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[212, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[212, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[213, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[213, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[214, "module-sparknlp_jsl.utils"]], "assertion (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[215, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[215, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[216, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[217, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[217, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[218, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[218, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[218, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[219, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "sparknlp_jsl.utils.ocr_utils": [[219, "module-sparknlp_jsl.utils.ocr_utils"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[220, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[220, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})