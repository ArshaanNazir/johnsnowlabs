Search.setIndex({"docnames": ["getting_started/index", "index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index", "reference/autosummary/sparknlp_jsl/alab/index", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index", "reference/autosummary/sparknlp_jsl/annotator/assertion/index", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index", "reference/autosummary/sparknlp_jsl/annotator/chunker/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index", "reference/autosummary/sparknlp_jsl/annotator/context/index", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index", "reference/autosummary/sparknlp_jsl/annotator/deid/index", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index", "reference/autosummary/sparknlp_jsl/annotator/index", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index", "reference/autosummary/sparknlp_jsl/annotator/merge/index", "reference/autosummary/sparknlp_jsl/annotator/ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index", "reference/autosummary/sparknlp_jsl/annotator/qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/annotator/re/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index", "reference/autosummary/sparknlp_jsl/annotator/router/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/index", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index", "reference/autosummary/sparknlp_jsl/base/index", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index", "reference/autosummary/sparknlp_jsl/common/index", "reference/autosummary/sparknlp_jsl/compatibility/index", "reference/autosummary/sparknlp_jsl/custom_transformer/index", "reference/autosummary/sparknlp_jsl/deidentification_module/index", "reference/autosummary/sparknlp_jsl/eval/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/finance/graph/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/finance/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/functions/index", "reference/autosummary/sparknlp_jsl/index", "reference/autosummary/sparknlp_jsl/internal/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index", "reference/autosummary/sparknlp_jsl/legal/graph/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index", "reference/autosummary/sparknlp_jsl/legal/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index", "reference/autosummary/sparknlp_jsl/modelTracer/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index", "reference/autosummary/sparknlp_jsl/nlp_test/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index", "reference/autosummary/sparknlp_jsl/pretrained/index", "reference/autosummary/sparknlp_jsl/structured_deidentification/index", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index", "reference/autosummary/sparknlp_jsl/training/index", "reference/autosummary/sparknlp_jsl/training_log_parser/index", "reference/autosummary/sparknlp_jsl/updateModels/index", "reference/autosummary/sparknlp_jsl/util/index", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index", "reference/autosummary/sparknlp_jsl/utils/imports/index", "reference/autosummary/sparknlp_jsl/utils/index", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index", "reference/autosummary/sparknlp_jsl/utils/log_parse/index", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index", "reference/index"], "filenames": ["getting_started/index.rst", "index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/core_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/fused_rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/gru_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/lstm_ops/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders/tf2contrib/rnn_cell/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/assertion_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/assertion_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/basetfmodel/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/build_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/generic_classifier_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/progresstracker/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/generic_classifier/settings/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/graph_builders/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/create_graph/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/dataset_encoder/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/ner_model_saver/index.rst", "reference/autosummary/sparknlp_jsl/_tf_graph_builders_1x/ner_dl/sentence_grouper/index.rst", "reference/autosummary/sparknlp_jsl/alab/index.rst", "reference/autosummary/sparknlp_jsl/annotator/annotation_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/assertion_dl_reg/index.rst", "reference/autosummary/sparknlp_jsl/annotator/assertion/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunk2_token/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/assertion_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_converter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_key_phrase_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunk_sentence_splitter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunker_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/chunkmapper_filterer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/annotator/chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_log_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_log_reg_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/generic_svm_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/classification/medical_distilbert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/contextual_parser/index.rst", "reference/autosummary/sparknlp_jsl/annotator/context/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/doccument_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/name_obfuscator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/reIdentification/index.rst", "reference/autosummary/sparknlp_jsl/annotator/deid/replacer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/index.rst", "reference/autosummary/sparknlp_jsl/annotator/disambiguation/ner_disambiguator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/doc2_chunk_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/average_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/bert_sentence_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/entity_chunk_embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/extractive_summarization/index.rst", "reference/autosummary/sparknlp_jsl/annotator/embeddings/index.rst", "reference/autosummary/sparknlp_jsl/annotator/feature_assembler/index.rst", "reference/autosummary/sparknlp_jsl/annotator/filtering_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/generic_classifier/index.rst", "reference/autosummary/sparknlp_jsl/annotator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/chunk_merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/merge/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/iob_tagger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/medical_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_chunker/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_converter_internal/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/ner_template_render/index.rst", "reference/autosummary/sparknlp_jsl/annotator/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/date_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/drug_normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/normalizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/beam_search_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/medical_qa/index.rst", "reference/autosummary/sparknlp_jsl/annotator/qa/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/relation_ner_chunk_filter/index.rst", "reference/autosummary/sparknlp_jsl/annotator/re/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/resolver_merger/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/annotator/resolution2_chunk/index.rst", "reference/autosummary/sparknlp_jsl/annotator/router/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/annotator/seq2seq/medical_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/annotator/source_tracking_metadata_params/index.rst", "reference/autosummary/sparknlp_jsl/annotator/tf_graph_builder/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/index.rst", "reference/autosummary/sparknlp_jsl/annotator/windowed/windowed_sentence/index.rst", "reference/autosummary/sparknlp_jsl/base/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_approach_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_model_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/annotator_properties_internal/index.rst", "reference/autosummary/sparknlp_jsl/common/index.rst", "reference/autosummary/sparknlp_jsl/compatibility/index.rst", "reference/autosummary/sparknlp_jsl/custom_transformer/index.rst", "reference/autosummary/sparknlp_jsl/deidentification_module/index.rst", "reference/autosummary/sparknlp_jsl/eval/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/finance/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/finance/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/finance_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_qa/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/finance_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/finance/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/finance_ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/finance/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/functions/index.rst", "reference/autosummary/sparknlp_jsl/index.rst", "reference/autosummary/sparknlp_jsl/internal/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/assertionDL/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/assertion/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/deIdentification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/document_hashcoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/deid/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/chunkmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/docmapper/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/index.rst", "reference/autosummary/sparknlp_jsl/legal/chunk_classification/resolution/sentence_entity_resolver/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/relation_extraction_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/graph/relation_extraction/zero_shot_relation_extraction/index.rst", "reference/autosummary/sparknlp_jsl/legal/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_bert_for_sequence_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_classifier_dl/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_classification/legal_document_ml_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_encoder_decoder/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_qa/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_summarizer/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/legal_text_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/sequence_generation/qa_ner_generator/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_bert_for_token_classifier/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/legal_ner/index.rst", "reference/autosummary/sparknlp_jsl/legal/token_classification/ner/zero_shot_ner/index.rst", "reference/autosummary/sparknlp_jsl/modelTracer/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/bias_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/bias/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/noisy_label_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/noisy_labels/utils/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_fixing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/robustness_testing/index.rst", "reference/autosummary/sparknlp_jsl/nlp_test/robustness/utils/index.rst", "reference/autosummary/sparknlp_jsl/pretrained/index.rst", "reference/autosummary/sparknlp_jsl/structured_deidentification/index.rst", "reference/autosummary/sparknlp_jsl/text_to_documents_columns/index.rst", "reference/autosummary/sparknlp_jsl/training/index.rst", "reference/autosummary/sparknlp_jsl/training_log_parser/index.rst", "reference/autosummary/sparknlp_jsl/updateModels/index.rst", "reference/autosummary/sparknlp_jsl/util/index.rst", "reference/autosummary/sparknlp_jsl/utils/alab_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/conll_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/deidentification_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/imports/index.rst", "reference/autosummary/sparknlp_jsl/utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/licensed_annotator_type/index.rst", "reference/autosummary/sparknlp_jsl/utils/log_parse/index.rst", "reference/autosummary/sparknlp_jsl/utils/ner_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_nlp_processor/index.rst", "reference/autosummary/sparknlp_jsl/utils/ocr_utils/index.rst", "reference/autosummary/sparknlp_jsl/utils/training_log_parser_utils/index.rst", "reference/index.rst"], "titles": ["Getting Started", "Spark NLP Documentation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.assertion_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.graph_builders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.alab</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.annotation_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion.assertion_dl_reg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunk2_token</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.assertion_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunk_sentence_splitter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunker_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.chunkmapper_filterer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_log_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_log_reg_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.generic_svm_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context.contextual_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.context</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.doccument_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.name_obfuscator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.reIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.deid.replacer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.disambiguation.ner_disambiguator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.doc2_chunk_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.average_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings.extractive_summarization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.embeddings</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.feature_assembler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.filtering_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.generic_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge.chunk_merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.merge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.iob_tagger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.medical_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_chunker</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_converter_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.ner_template_render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.date_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer.drug_normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.normalizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.beam_search_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.medical_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.qa.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.relation_ner_chunk_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.re.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.resolver_merger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.resolution2_chunk</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.seq2seq.medical_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.source_tracking_metadata_params</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.tf_graph_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.annotator.windowed.windowed_sentence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_approach_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_model_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common.annotator_properties_internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.compatibility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.custom_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.deidentification_module</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.eval</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.finance_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.finance_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.finance.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.internal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion.assertionDL</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.assertion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.deIdentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.deid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.docmapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_classifier_dl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_qa</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_summarizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.legal_text_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.sequence_generation.qa_ner_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.legal_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.legal.token_classification.ner.zero_shot_ner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.modelTracer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias.bias_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.bias</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.noisy_labels.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_fixing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.robustness_testing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.nlp_test.robustness.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.pretrained</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.structured_deidentification</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.text_to_documents_columns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.training_log_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.updateModels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.alab_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.conll_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.deidentification_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.imports</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.licensed_annotator_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.log_parse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ner_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_nlp_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.ocr_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sparknlp_jsl.utils.training_log_parser_utils</span></code>", "API Reference"], "terms": {"4": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "3": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "1": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "0": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "healthcar": [0, 1, 10, 12, 33, 35, 41, 93], "i": [0, 10, 12, 13, 16, 19, 20, 21, 22, 23, 24, 33, 35, 36, 39, 41, 43, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 72, 74, 75, 77, 78, 81, 83, 86, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 117, 127, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 159, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 197, 198, 201, 202, 203, 205, 208, 209, 213, 214, 221], "commerci": 0, "extens": [0, 77], "clinic": [0, 43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 83, 86, 89, 90, 91, 92, 94, 96, 100, 103, 104, 105, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 186, 189, 191], "biomed": 0, "text": [0, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 79, 86, 89, 90, 91, 92, 93, 94, 96, 98, 100, 103, 104, 105, 106, 109, 110, 111, 113, 115, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 199, 201, 202, 206, 207, 211], "mine": 0, "If": [0, 10, 12, 13, 22, 23, 24, 33, 35, 36, 41, 43, 48, 50, 51, 52, 53, 54, 55, 62, 63, 64, 65, 67, 68, 70, 78, 81, 82, 83, 86, 90, 92, 94, 95, 98, 101, 103, 104, 105, 106, 109, 113, 117, 125, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 159, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 189, 190, 191, 193, 197, 205, 209, 214], "you": [0, 10, 33, 41, 42, 43, 51, 65, 67, 70, 90, 93, 100, 103, 105, 109, 111, 125, 129, 131, 149, 156, 162, 164, 183, 190, 205, 207], "don": [0, 52, 101, 109, 201, 202], "t": [0, 10, 23, 24, 43, 52, 65, 67, 83, 90, 100, 101, 103, 109, 115, 127, 129, 145, 149, 151, 156, 162, 179, 183, 185, 190, 201, 202, 207, 221], "have": [0, 23, 24, 41, 43, 50, 51, 52, 53, 55, 67, 78, 86, 90, 93, 103, 109, 117, 129, 131, 135, 136, 145, 153, 156, 162, 164, 168, 169, 179, 186, 190, 193, 197, 201], "subscript": 0, "yet": [0, 24], "can": [0, 10, 23, 33, 41, 43, 44, 45, 48, 50, 52, 62, 63, 64, 65, 67, 68, 70, 74, 78, 81, 83, 86, 90, 92, 98, 100, 101, 103, 105, 106, 109, 113, 115, 117, 129, 131, 138, 142, 144, 145, 149, 151, 155, 156, 162, 164, 171, 175, 178, 179, 183, 185, 189, 190, 197, 198, 201, 202, 207, 213, 214], "ask": 0, "free": [0, 24], "trial": 0, "click": 0, "button": 0, "below": [0, 78], "try": [0, 57, 58, 83, 95, 109, 125, 138, 146, 171, 180], "http": [0, 20, 22, 23, 24, 41, 74, 105, 109], "www": [0, 210], "johnsnowlab": [0, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 79, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 111, 114, 115, 119, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191], "com": [0, 24, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 79, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 111, 114, 115, 119, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 210], "provid": [0, 22, 23, 24, 41, 43, 51, 63, 65, 67, 90, 91, 109, 123, 129, 131, 145, 155, 156, 162, 164, 179, 189, 190, 205, 208], "specif": [0, 10, 33, 78, 90, 105, 117, 156, 190, 193], "annot": [0, 10, 33, 41, 121, 122, 123, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 160, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 202, 204, 206, 207, 211, 219], "pipelin": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 103, 104, 105, 106, 109, 110, 111, 115, 127, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191, 192, 193, 198, 202, 204, 219], "model": [0, 1, 5, 8, 10, 12, 15, 16, 23, 24, 28, 31, 33, 35, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 72, 74, 77, 78, 83, 86, 89, 90, 91, 92, 93, 94, 100, 103, 104, 105, 106, 109, 113, 114, 115, 117, 119, 122, 125, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 159, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 198, 201, 202, 204, 207, 209], "embed": [0, 10, 12, 16, 18, 33, 35, 39, 43, 45, 48, 50, 53, 55, 62, 63, 64, 67, 68, 70, 72, 74, 81, 85, 89, 90, 91, 92, 103, 104, 105, 106, 109, 111, 117, 128, 129, 131, 136, 138, 141, 144, 145, 153, 155, 156, 160, 162, 164, 169, 171, 174, 178, 179, 186, 189, 190, 201, 202], "entiti": [0, 41, 42, 43, 45, 48, 49, 50, 51, 52, 53, 55, 63, 65, 67, 70, 71, 72, 74, 78, 82, 86, 90, 91, 92, 93, 94, 95, 101, 103, 104, 105, 106, 108, 109, 111, 129, 131, 135, 136, 138, 141, 142, 153, 155, 156, 158, 161, 162, 164, 168, 169, 171, 174, 175, 186, 189, 190, 191, 193, 197, 201, 202, 203, 205, 207, 211], "recognit": [0, 24, 63, 90, 94, 155, 156, 158, 189, 190, 191], "link": [0, 74], "normal": [0, 13, 24, 36, 57, 58, 65, 85, 109, 117, 138, 145, 146, 159, 160, 171, 179, 180, 201], "assert": [0, 10, 33, 41, 48, 52, 85, 134, 143, 160, 167, 176, 207, 208, 211, 216], "statu": [0, 43, 44, 45, 129, 162, 207], "detect": [0, 44, 219], "de": [0, 67, 70, 131, 164], "identif": [0, 205], "relat": [0, 10, 33, 41, 53, 55, 78, 103, 104, 105, 106, 117, 135, 136, 141, 142, 153, 161, 168, 169, 174, 175, 186, 193, 202, 211], "extract": [0, 41, 43, 45, 48, 50, 65, 74, 77, 79, 90, 91, 103, 104, 106, 109, 129, 138, 141, 142, 156, 162, 171, 174, 175, 190, 192, 193, 201, 202], "spell": [0, 128, 201], "check": [0, 10, 33, 41, 43, 45, 65, 96, 100, 105, 117, 149, 183, 209, 221], "correct": [0, 197], "The": [0, 10, 13, 20, 21, 22, 23, 24, 33, 36, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 74, 77, 78, 81, 82, 83, 86, 90, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 111, 113, 114, 115, 117, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 158, 159, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 192, 198, 201, 203, 204, 205, 206, 207, 213], "librari": [0, 1, 41, 62, 63, 64, 75, 110, 125, 132, 144, 155, 160, 165, 178, 189], "offer": 0, "access": [0, 41], "sever": [0, 23, 43, 48, 67, 70, 109, 129, 131, 162, 164], "transform": [0, 13, 36, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 81, 86, 90, 91, 94, 95, 96, 101, 103, 104, 105, 106, 109, 110, 126, 129, 131, 132, 136, 138, 141, 142, 144, 145, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 175, 178, 179, 186, 189, 190, 191, 193], "jsl": [0, 41, 53, 55, 136, 153, 169, 186, 211, 219], "bert": [0, 62, 63, 64, 77, 78, 90, 104, 106, 109, 111, 141, 142, 144, 155, 156, 174, 175, 178, 189, 190], "biobert": [0, 193], "clinicalbert": 0, "glove": [0, 45], "med": 0, "icd": [0, 109, 138, 171], "o": [0, 24, 63, 70, 72, 89, 92, 155, 189, 205, 207, 221], "It": [0, 22, 24, 41, 67, 68, 78, 81, 83, 90, 92, 117, 131, 145, 156, 164, 179, 190, 193, 201, 203, 209, 213], "also": [0, 24, 62, 63, 64, 67, 74, 78, 90, 92, 101, 103, 109, 123, 131, 144, 155, 156, 159, 164, 178, 189, 190, 201], "includ": [0, 21, 41, 43, 82, 86, 90, 92, 100, 105, 106, 116, 117, 129, 149, 156, 162, 183, 190, 201, 202, 211], "over": [0, 19, 67, 90, 156, 190, 201, 202, 219], "50": [0, 10, 24, 33, 53, 55, 65, 83, 135, 136, 153, 156, 168, 169, 186], "pre": [0, 41, 50, 53, 55, 62, 63, 64, 75, 77, 90, 94, 103, 104, 106, 110, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 189, 190, 191], "train": [0, 2, 9, 10, 12, 15, 22, 23, 24, 25, 32, 33, 35, 38, 41, 43, 44, 45, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 103, 104, 106, 109, 110, 117, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 153, 155, 156, 158, 160, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 186, 189, 190, 191, 193, 198, 201], "recogn": [0, 78, 90, 92, 94, 106, 156, 190], "follow": [0, 19, 20, 65, 67, 70, 90, 92, 109, 131, 156, 159, 164, 190, 193, 207, 210], "mani": [0, 18, 51, 74, 78, 113], "more": [0, 18, 19, 22, 23, 44, 50, 62, 64, 67, 75, 78, 92, 93, 110, 131, 132, 144, 155, 164, 165, 178, 189], "support": [0, 10, 33, 60, 67, 70, 90, 131, 145, 164, 179], "sign": [0, 207], "symptom": [0, 78, 103], "treatment": [0, 105, 106, 142, 175, 207], "procedur": 0, "test": [0, 43, 49, 51, 90, 105, 106, 111, 129, 145, 156, 162, 179, 190, 193, 198, 201, 202, 203, 207, 208, 214], "lab": [0, 41, 160, 207, 211], "section": [0, 93], "drug": [0, 78, 92, 96, 105, 106, 142, 175], "name": [0, 6, 10, 12, 20, 22, 24, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 125, 127, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 197, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 219], "dosag": [0, 78, 92, 96], "strength": [0, 78, 92], "rout": 0, "durat": 0, "frequenc": [0, 24, 41, 92, 201, 202], "risk": [0, 159], "factor": [0, 24, 159], "smoke": 0, "obes": 0, "diabet": [0, 50, 77], "hypertens": 0, "substanc": 0, "abus": 0, "anatomi": 0, "organ": [0, 63, 155, 189, 205], "subdivis": 0, "cell": [0, 12, 18, 19, 20, 22, 23, 24, 35, 63, 90, 155, 156, 189, 190, 197, 205], "structur": [0, 106, 117, 142, 175, 205, 213], "tissu": 0, "gene": 0, "chemic": 0, "demograph": 0, "ag": [0, 67, 71, 72, 86, 89, 131, 159, 164, 205], "gender": [0, 67, 70, 86, 89, 131, 164, 193], "height": [0, 15, 38, 199], "weight": [0, 22, 24, 41, 77, 78, 117, 161, 199], "race": 0, "ethnic": 0, "marit": 0, "vital": [0, 207], "sensit": [0, 48, 65, 77, 103, 104, 105, 117], "data": [0, 22, 23, 24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 81, 83, 86, 89, 90, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 115, 117, 127, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 197, 198, 201, 202, 205, 207, 213], "patient": [0, 43, 52, 53, 55, 65, 68, 70, 72, 78, 100, 101, 129, 136, 149, 153, 159, 162, 169, 183, 186, 205], "address": [0, 43, 45, 50, 57, 58, 59, 60, 67, 74, 77, 78, 83, 86, 91, 100, 109, 114, 115, 149, 150, 151, 183, 184, 185, 190], "phone": [0, 67, 131, 164, 205], "email": [0, 205], "date": [0, 42, 51, 67, 68, 71, 82, 95, 111, 127, 131, 164, 205, 209, 213], "identifi": [0, 49, 50, 51, 86, 105, 109, 111, 198, 205, 207, 221], "For": [0, 19, 24, 41, 45, 48, 62, 63, 67, 75, 77, 78, 89, 90, 94, 96, 103, 104, 105, 106, 109, 110, 131, 132, 141, 142, 144, 145, 155, 156, 158, 164, 165, 174, 175, 178, 179, 189, 190, 191], "inform": [0, 1, 23, 24, 65, 67, 68, 86, 92, 95, 96, 103, 117, 131, 159, 164, 201, 207], "visit": [0, 103], "our": 0, "site": [0, 65], "built": [0, 24, 145, 179], "top": [0, 50, 62, 63, 64, 90, 113, 144, 155, 156, 178, 189, 190, 207], "apach": 0, "x": [0, 13, 20, 21, 24, 36, 197], "us": [0, 1, 10, 12, 18, 19, 20, 22, 23, 24, 35, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 83, 86, 90, 91, 92, 94, 95, 98, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 114, 115, 117, 119, 127, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 158, 160, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 193, 198, 201, 202, 204, 205, 207, 211, 213, 219], "need": [0, 10, 18, 23, 24, 33, 45, 65, 67, 77, 90, 91, 101, 103, 109, 131, 156, 164, 190, 207], "java": [0, 93, 113, 114, 119, 121, 122, 128, 148, 150, 182, 184, 204], "8": [0, 24, 62, 64, 78, 90, 144, 155, 156, 178, 189, 190, 207], "ar": [0, 10, 19, 20, 21, 23, 24, 33, 41, 48, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 67, 70, 71, 74, 77, 78, 83, 86, 90, 92, 93, 94, 96, 98, 100, 103, 104, 105, 106, 109, 111, 113, 115, 117, 125, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 155, 156, 158, 159, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 189, 190, 191, 193, 197, 201, 202, 205, 207, 209, 211, 221], "pyspark": [0, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 83, 86, 89, 90, 91, 92, 95, 100, 103, 104, 106, 110, 114, 115, 125, 129, 131, 132, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 162, 164, 165, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 192, 193, 198, 201, 202, 205, 206, 207, 211, 219], "6": [0, 10, 24, 33, 47, 105, 145, 179, 207], "7": [0, 2, 25, 207], "recommend": [0, 74, 90, 156, 190], "basic": [0, 22, 24], "knowledg": [0, 74, 109], "framework": 0, "work": [0, 90, 117, 156, 190], "environ": [0, 214], "befor": [0, 24, 45, 50, 90, 93, 113, 114, 119, 122, 148, 150, 156, 182, 184, 190], "pleas": [0, 41, 62, 63, 71, 90, 104, 109, 141, 144, 145, 155, 156, 174, 178, 179, 189, 190], "refer": [0, 1, 41, 50, 67, 68, 70, 71, 75, 82, 103, 109, 110, 131, 132, 164, 165, 213], "document": [0, 10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 79, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 115, 127, 129, 131, 132, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 197, 201, 202, 206, 207, 211], "first": [0, 23, 24, 49, 51, 65, 67, 77, 90, 101, 103, 131, 156, 164, 190, 207], "let": [0, 103, 109], "": [0, 10, 24, 41, 45, 53, 67, 70, 74, 77, 93, 98, 100, 109, 113, 114, 115, 116, 117, 119, 121, 122, 148, 149, 150, 151, 159, 182, 183, 184, 185, 201, 202, 203], "make": [0, 41, 65, 67, 68, 93, 131, 164, 201], "sure": [0, 41, 67, 131, 164], "version": [0, 10, 33, 70, 92, 103, 123, 125, 159, 160, 204, 209], "oracl": 0, "openjdk": 0, "0_292": 0, "packag": 0, "pip": [0, 207], "extra": [0, 48, 92], "index": [0, 13, 36, 43, 44, 90, 93, 129, 162, 197, 198, 211], "url": [0, 41, 205], "pypi": 0, "secret": [0, 41, 160], "code": [0, 21, 24, 41, 65, 67, 68, 109, 117, 138, 159, 171, 205, 207], "upgrad": 0, "part": [0, 24, 68, 75, 110, 132, 165, 197, 198, 214], "split": [0, 18, 24, 51, 83, 90, 198, 201, 207, 211, 221], "e": [0, 24, 45, 50, 53, 62, 63, 64, 65, 67, 70, 78, 90, 93, 100, 101, 105, 109, 129, 131, 138, 144, 149, 155, 156, 162, 164, 171, 178, 183, 189, 190, 193, 197, 201, 202, 209, 221], "onli": [0, 20, 21, 24, 41, 50, 53, 67, 70, 83, 86, 90, 98, 100, 103, 105, 113, 115, 131, 149, 151, 156, 164, 183, 185, 190, 201, 202, 207], "avail": [0, 10, 21, 33, 50, 62, 63, 78, 86, 90, 92, 100, 115, 144, 145, 149, 151, 155, 156, 178, 179, 183, 185, 189, 190, 204], "user": [0, 41, 65, 92, 109, 202], "valid": [0, 10, 33, 41, 43, 83, 90, 105, 129, 145, 156, 162, 179, 190, 198], "licens": [0, 67, 92, 131, 160, 164], "did": 0, "receiv": [0, 24], "contact": [0, 205], "u": [0, 20, 24, 90, 127, 156, 190, 209], "href": 0, "mailto": 0, "info": [0, 197], "thi": [0, 1, 9, 10, 18, 19, 20, 21, 22, 23, 24, 32, 33, 41, 43, 45, 49, 50, 51, 53, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 72, 75, 77, 78, 86, 90, 92, 93, 96, 100, 101, 103, 105, 109, 113, 114, 117, 119, 122, 123, 127, 129, 131, 145, 146, 148, 149, 150, 156, 162, 164, 179, 180, 182, 183, 184, 190, 192, 193, 198, 201, 202, 203, 205, 207, 213, 214, 221, 222], "simpl": [0, 24], "piec": [0, 51], "import": [0, 10, 33, 41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 95, 103, 104, 109, 110, 129, 131, 132, 136, 138, 141, 144, 145, 146, 153, 155, 156, 160, 162, 164, 165, 169, 171, 174, 178, 179, 180, 186, 189, 190, 199, 207, 215], "sparknlp_jsl": 0, "Or": 0, "sparksess": [0, 41, 62, 63, 64, 90, 100, 104, 106, 114, 115, 125, 141, 142, 144, 149, 150, 151, 155, 156, 160, 174, 175, 178, 183, 184, 185, 189, 190, 193, 198, 201, 202, 205, 206, 211, 219], "modul": [0, 1, 21], "flexibl": [0, 19], "sql": [0, 41, 62, 63, 64, 100, 106, 114, 115, 125, 142, 144, 149, 150, 151, 155, 175, 178, 183, 184, 185, 189, 192, 193, 198, 201, 202, 205, 206, 207, 211, 216, 219], "builder": [0, 117], "appnam": 0, "enterpris": 0, "master": 0, "local": [0, 43, 62, 63, 64, 67, 77, 83, 90, 94, 100, 103, 106, 109, 114, 115, 129, 131, 138, 142, 144, 145, 149, 150, 151, 155, 156, 158, 162, 164, 171, 175, 178, 179, 183, 184, 185, 189, 190, 191], "config": [0, 65], "driver": 0, "memori": [0, 22, 23, 24, 62, 64, 90, 100, 117, 144, 149, 155, 156, 178, 183, 189, 190], "16": [0, 47, 207], "maxresults": 0, "2g": 0, "jar": [0, 41, 211, 219], "nlp_2": 0, "11": [0, 9, 32, 45, 52, 67, 71, 95, 131, 164, 207], "version_publ": 0, "getorcr": 0, "main": 1, "page": [1, 45, 197, 222], "workshop": [1, 24, 41, 75, 90, 110, 132, 145, 156, 165, 179, 190], "hub": [1, 45, 62, 63, 78, 90, 103, 104, 109, 144, 145, 155, 156, 178, 179, 189, 190], "welcom": 1, "python": [1, 19, 20, 21, 24, 117], "legal": [1, 53, 55, 62, 63, 64, 90, 94, 103, 104, 106, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 160], "financ": [1, 53, 55, 62, 63, 64, 90, 94, 103, 104, 106, 160, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 189, 191], "contain": [1, 22, 23, 24, 41, 43, 44, 45, 52, 53, 55, 62, 63, 64, 67, 68, 70, 71, 75, 86, 90, 92, 93, 103, 104, 109, 110, 116, 117, 121, 122, 123, 129, 131, 132, 135, 136, 138, 141, 144, 153, 155, 156, 162, 164, 165, 168, 169, 171, 174, 178, 186, 189, 190, 193, 198, 202, 203, 205, 207, 213], "how": [1, 48, 50, 53, 62, 63, 64, 71, 74, 83, 86, 90, 92, 101, 103, 113, 144, 145, 155, 156, 178, 179, 189, 190], "exampl": [1, 10, 19, 24, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 115, 117, 129, 131, 132, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 205, 207, 210], "get": [1, 13, 36, 41, 43, 67, 72, 90, 100, 115, 117, 129, 145, 149, 151, 160, 162, 179, 183, 185, 190, 198, 201, 202, 211], "start": [1, 10, 18, 22, 33, 43, 44, 45, 75, 86, 90, 103, 109, 110, 129, 132, 138, 156, 160, 162, 165, 171, 190, 201, 202, 207, 211, 221], "requir": [1, 22, 23, 24, 41, 43, 45, 57, 58, 62, 64, 71, 75, 90, 109, 110, 129, 132, 144, 146, 155, 156, 162, 165, 178, 180, 189, 190, 207, 214], "instal": [1, 10, 41, 214], "session": [1, 15, 16, 38, 39, 41, 193, 198, 201, 202, 207, 211, 219], "from": [1, 9, 10, 12, 16, 18, 20, 22, 23, 24, 32, 33, 35, 39, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 103, 104, 105, 109, 110, 111, 113, 114, 115, 117, 119, 122, 129, 131, 132, 136, 138, 141, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 197, 201, 202, 203, 204, 207, 209, 210, 211], "api": [1, 101], "assertionmodel": [2, 25, 43, 45, 48, 129, 138, 162, 171], "seq_max_len": [2, 25], "feat_siz": [2, 10, 25, 33], "n_class": [2, 10, 25, 33], "devic": [2, 25, 205], "cpu": [2, 23, 25], "sourc": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221], "fully_connected_lay": [2, 25], "input_data": [2, 25], "output_dim": [2, 10, 24, 25, 33], "activation_func": [2, 25], "none": [2, 4, 6, 8, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 25, 27, 29, 31, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 79, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 119, 122, 127, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 197, 199, 201, 202, 203, 204, 205, 207, 210, 211, 213, 214, 221], "add_bidirectional_lstm": [2, 25], "n_hidden": [2, 25], "30": [2, 25, 47, 68, 95, 100, 115, 145, 149, 151, 179, 183, 185, 207], "num_lay": [2, 25], "add_optim": [2, 25], "trainset": [2, 25], "testset": [2, 25], "epoch": [2, 25, 43, 83, 90, 129, 145, 156, 162, 179, 190, 201, 208, 218], "batch_siz": [2, 4, 15, 17, 18, 22, 23, 24, 25, 27, 38, 40], "64": [2, 10, 25, 33, 52, 86, 89, 90, 145, 179, 207], "learning_r": [2, 4, 9, 25, 27, 32, 83], "01": [2, 15, 25, 38, 45, 67, 68, 71, 90, 95, 131, 156, 164, 190, 207], "dropout": [2, 15, 24, 25, 38, 43, 83, 90, 129, 145, 156, 162, 179, 190], "15": [2, 10, 25, 33, 68, 86, 89, 95], "epoch_acc": [2, 25], "calc_accuraci": [2, 25], "dataset": [2, 13, 15, 17, 25, 36, 38, 40, 43, 45, 70, 90, 91, 106, 109, 129, 138, 142, 145, 156, 162, 171, 175, 179, 190, 193, 198, 201, 207], "calcul": [2, 23, 24, 25, 43, 50, 90, 109, 129, 156, 159, 162, 190, 193, 198, 201, 202, 203], "accuraci": [2, 8, 25, 31, 90, 117, 156, 190], "confusion_matrix": [2, 25], "sess": [2, 25], "persist_graph": [2, 25], "model_loc": [2, 4, 6, 10, 12, 27, 29, 33, 35], "model_filenam": [2, 4, 6, 10, 12, 27, 29, 33, 35], "assertion_model": [3, 11, 26, 34, 43], "model_id": [4, 27], "get_graph": [4, 27], "is_built": [4, 27], "export_graph": [4, 6, 27, 29], "generate_batch": [4, 27], "input": [4, 9, 18, 19, 20, 22, 23, 24, 27, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 115, 117, 127, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 197, 201, 202, 211, 213, 219], "output": [4, 9, 13, 18, 22, 23, 24, 27, 32, 36, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 115, 116, 117, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 192, 197, 198, 201, 202, 203, 211, 213, 219], "fit_dataset": [4, 27], "training_set": [4, 27], "validation_set": [4, 27], "training_batch_s": [4, 27], "validation_batch_s": [4, 27], "epochs_n": [4, 8, 27, 31], "verbos": [4, 6, 27, 29, 43, 90, 129, 145, 156, 162, 179, 190, 208, 218, 221], "true": [4, 6, 10, 15, 19, 23, 24, 27, 29, 33, 38, 41, 42, 43, 50, 51, 53, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 81, 83, 86, 90, 92, 93, 95, 100, 101, 103, 104, 109, 110, 111, 113, 117, 121, 122, 127, 128, 131, 132, 138, 144, 145, 146, 149, 155, 156, 164, 165, 171, 178, 179, 180, 183, 189, 190, 193, 198, 202, 204, 205, 207, 208, 211, 214, 218, 219, 221], "progresstrack": [4, 7, 11, 27, 30, 34], "load_graph": [4, 27], "models_dir": [4, 9, 27, 32], "build": [4, 6, 10, 20, 22, 24, 27, 29, 33, 41, 117], "param": [4, 6, 10, 27, 29, 33, 41, 53, 67, 70, 75, 86, 90, 93, 113, 114, 119, 122, 123, 131, 148, 150, 156, 160, 164, 182, 184, 190, 193, 197, 198, 201, 202, 203, 207, 211, 219], "run_test": [4, 6, 27, 29, 202], "build_param": [5, 10, 28, 33], "genericclassifiermodel": [6, 29, 57, 58, 83, 146, 180], "basetfmodel": [7, 11, 30, 34], "build_model": [7, 11, 30, 34], "generic_classifier_model": [7, 11, 30, 34], "set": [7, 10, 11, 24, 30, 34, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 79, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 111, 113, 114, 115, 116, 117, 119, 122, 126, 129, 131, 132, 136, 142, 148, 150, 151, 156, 160, 162, 164, 165, 169, 175, 182, 184, 185, 190, 193, 198, 201, 202, 203, 207, 208, 211, 219], "batches_n": [8, 31], "on_training_start": [8, 31], "on_training_end": [8, 31], "on_batch": [8, 31], "loss": [8, 9, 24, 31, 32, 44, 90, 117, 156, 190, 208, 218], "is_valid": [8, 31], "fals": [8, 10, 12, 13, 15, 19, 22, 23, 24, 31, 33, 35, 36, 38, 41, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 115, 117, 127, 129, 131, 132, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 159, 160, 162, 164, 165, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 198, 201, 202, 205, 207, 211, 214, 219, 221], "on_epoch": [8, 31], "get_report_interv": [8, 31], "print_progress": [8, 31], "end_of_epoch": [8, 31], "model_op": [9, 32], "gener": [9, 10, 16, 32, 33, 39, 41, 50, 67, 68, 83, 90, 93, 98, 100, 101, 103, 113, 115, 131, 145, 149, 151, 156, 164, 179, 183, 185, 190, 201, 202, 205, 207, 211, 213, 219], "enumer": [9, 32, 211], "deriv": [9, 32, 59, 60], "defin": [9, 22, 32, 41, 45, 48, 52, 57, 58, 65, 78, 82, 86, 90, 92, 95, 105, 109, 117, 146, 156, 180, 190, 202, 211], "new": [9, 24, 32, 41, 43, 50, 54, 68, 72, 90, 92, 94, 98, 100, 103, 104, 109, 113, 115, 123, 138, 141, 149, 151, 156, 158, 159, 171, 174, 183, 185, 190, 191, 192, 193, 197, 207, 209, 221], "init": [9, 32], "10": [9, 10, 15, 19, 32, 33, 38, 44, 53, 55, 68, 96, 104, 109, 136, 138, 153, 169, 171, 186, 198, 207], "model_tensor": [9, 32], "100": [9, 10, 15, 32, 33, 38, 83, 100, 115, 145, 149, 151, 179, 183, 185, 221], "acc": [9, 32], "101": [9, 15, 32, 38], "102": [9, 32], "target": [9, 10, 32, 33, 43, 44, 45, 74, 75, 78, 83, 103, 104, 110, 113, 129, 132, 141, 161, 162, 165, 174, 207], "103": [9, 32], "104": [9, 32], "105": [9, 32], "run_typ": [9, 32], "evalu": [9, 32, 41, 100, 149, 183, 193, 208, 218], "predict": [9, 10, 15, 24, 32, 33, 38, 41, 43, 57, 58, 74, 83, 90, 129, 146, 156, 162, 180, 190, 193, 197, 198, 201, 202, 208, 218, 221], "datasets_dir": [9, 32], "logs_dir": [9, 32], "tmp": [9, 10, 32, 33, 106], "genericclassifi": [9, 32, 59, 60, 117], "default_model_node_nam": [9, 32], "except": [10, 33, 90, 201, 202, 214], "wrongtfvers": [10, 33], "rais": [10, 22, 23, 24, 33, 90, 214], "tensorflow": [10, 12, 16, 21, 23, 33, 35, 39, 43, 62, 63, 64, 83, 90, 100, 103, 113, 115, 117, 129, 144, 145, 149, 151, 155, 156, 162, 178, 179, 183, 185, 189, 190], "current": [10, 24, 33, 62, 63, 64, 86, 90, 95, 100, 106, 114, 115, 117, 125, 142, 144, 149, 150, 151, 155, 156, 175, 178, 183, 184, 185, 189, 190, 206, 214, 221], "xx": [10, 33], "tensorflowaddonsneed": 10, "when": [10, 12, 24, 35, 41, 43, 44, 51, 65, 67, 78, 86, 90, 91, 92, 93, 95, 101, 103, 109, 113, 115, 129, 131, 138, 156, 159, 162, 164, 171, 190, 201, 202, 204, 207, 214], "addon": 10, "tfgraphbuild": [10, 33, 103, 117], "creat": [10, 12, 22, 23, 33, 35, 41, 44, 53, 65, 68, 95, 103, 117, 126, 197, 198, 201, 202, 207], "graph": [10, 12, 33, 35, 43, 90, 103, 117, 129, 143, 156, 160, 162, 176, 190, 208], "ner_dl": [10, 11, 33, 34, 90, 156, 190], "generic_classifi": [10, 11, 33, 34, 85, 160], "assertion_dl": [10, 11, 33, 34, 43, 129, 162], "relation_extract": [10, 33, 85, 102, 117, 139, 143, 172, 176], "nlp": [10, 12, 33, 35, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 75, 76, 77, 78, 79, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 110, 114, 115, 119, 132, 144, 145, 149, 150, 151, 155, 156, 160, 165, 178, 179, 183, 184, 185, 189, 190, 193, 207, 211, 219, 222], "paramet": [10, 23, 33, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 114, 115, 116, 119, 123, 125, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 158, 159, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 192, 197, 198, 201, 202, 205, 207, 208, 209, 210, 218, 219], "dict": [10, 33, 41, 43, 52, 65, 67, 78, 86, 92, 94, 100, 103, 104, 106, 160, 193, 197, 201, 202, 203, 205, 211, 213, 221], "tf_graph": [10, 33, 103, 117, 207], "get_model": [10, 33], "supports_auto_file_nam": [10, 33], "return": [10, 13, 22, 23, 24, 33, 36, 41, 43, 45, 48, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 75, 77, 78, 83, 86, 90, 94, 100, 103, 104, 106, 108, 109, 110, 114, 115, 125, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 159, 160, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 193, 197, 198, 201, 202, 203, 204, 205, 207, 208, 211, 214, 218, 219, 221], "automat": [10, 41, 67, 101, 106, 131, 142, 164, 175, 197], "file": [10, 16, 21, 33, 39, 41, 43, 52, 65, 67, 70, 82, 83, 86, 90, 92, 103, 109, 117, 127, 129, 131, 138, 145, 156, 162, 164, 171, 179, 190, 193, 197, 198, 201, 202, 205, 207, 208, 209, 211, 213, 218, 219], "method": [10, 22, 33, 41, 50, 65, 67, 70, 83, 92, 103, 131, 138, 164, 171, 197, 198, 201, 202, 207, 213, 222], "overridden": [10, 33], "child": [10, 33], "get_model_filenam": [10, 33], "implement": [10, 18, 19, 20, 22, 24, 59, 60, 93, 106, 113, 114, 119, 121, 122, 142, 148, 150, 175, 182, 184, 201, 202], "check_build_param": [10, 33], "given": [10, 18, 22, 24, 33, 50, 53, 55, 67, 68, 70, 77, 78, 86, 90, 100, 103, 106, 117, 127, 131, 136, 142, 149, 153, 156, 159, 164, 169, 175, 183, 186, 190, 193, 201, 202, 214], "get_build_param": [10, 33], "get_build_params_with_default": [10, 33], "default": [10, 12, 22, 23, 24, 33, 35, 41, 42, 43, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 72, 74, 75, 77, 78, 82, 83, 86, 90, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 114, 115, 117, 125, 129, 131, 132, 135, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 159, 162, 164, 165, 168, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 193, 197, 198, 201, 202, 203, 204, 205, 207, 211, 219, 221], "valu": [10, 22, 23, 33, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 86, 90, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 111, 113, 115, 116, 117, 119, 123, 126, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 159, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 189, 190, 191, 197, 198, 199, 201, 202, 203, 205, 213, 221], "str": [10, 12, 13, 16, 33, 35, 36, 39, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 81, 82, 83, 86, 89, 90, 92, 94, 96, 100, 101, 103, 104, 105, 106, 109, 111, 114, 115, 116, 117, 125, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 159, 160, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 193, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 218, 219], "ani": [10, 23, 33, 41, 42, 68, 78, 86, 90, 105, 111, 117, 156, 190, 193, 201, 202], "retriev": [10, 33, 90, 156, 190, 201, 202], "found": [10, 33, 65, 75, 78, 110, 132, 165, 201, 202], "get_model_build_param": [10, 33], "get_model_build_param_explan": [10, 33], "explan": [10, 33], "genericclassifiertfgraphbuild": [10, 33], "tf": [10, 16, 19, 21, 22, 23, 33, 39, 62, 63, 64, 117, 144, 155, 178, 189], "genericclassifierapproach": [10, 33, 83], "extend": [10, 33, 75, 90, 110, 132, 145, 156, 165, 179, 190, 207], "base": [10, 20, 22, 24, 33, 41, 43, 45, 47, 48, 50, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 70, 74, 75, 77, 78, 79, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 106, 109, 110, 113, 114, 115, 119, 121, 122, 123, 129, 131, 132, 136, 138, 141, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 165, 169, 171, 174, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 198, 201, 202, 203, 207, 211], "sparknlp": [10, 33, 43, 45, 47, 48, 50, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 103, 104, 106, 110, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 186, 189, 190, 191, 193, 198, 201, 202, 211], "datafram": [10, 33, 41, 68, 105, 109, 192, 193, 197, 198, 201, 202, 205, 206, 207, 208, 211, 213], "pd": [10, 33, 41, 68, 211], "read_csv": [10, 33], "petfind": [10, 33], "mini": [10, 33], "csv": [10, 33, 41, 52, 65, 67, 70, 72, 81, 92, 127, 131, 145, 164, 179, 201, 202, 207, 213], "dl_param": [10, 33], "input_dim": [10, 33], "302": [10, 33], "hidden_lay": [10, 33], "300": [10, 33, 103, 117], "200": [10, 24, 33, 103, 117, 219], "hidden_act": [10, 33], "tanh": [10, 20, 24, 33, 117], "hidden_act_l2": [10, 33], "batch_norm": [10, 33], "output_act": 10, "softmax": [10, 18, 109, 117], "loss_func": 10, "cross_entropi": 10, "gc_graph": [10, 33], "auto": [10, 33, 117], "save": [10, 12, 16, 33, 35, 39, 41, 43, 53, 62, 63, 64, 67, 83, 90, 100, 103, 106, 114, 115, 117, 127, 129, 142, 144, 145, 149, 150, 151, 155, 156, 162, 175, 178, 179, 183, 184, 185, 189, 190, 193, 197, 198, 201, 202, 207, 210, 219], "gcl": [10, 33], "pb": [10, 33, 83, 90, 103, 117, 156, 190], "we": [10, 22, 24, 41, 51, 52, 53, 55, 57, 58, 67, 74, 78, 83, 90, 101, 109, 131, 135, 136, 138, 145, 146, 153, 159, 164, 168, 169, 171, 179, 180, 186], "modelfil": [10, 83], "gen_clf": [10, 33, 57, 58, 83, 146, 180], "setlabelcolumn": [10, 33, 57, 83, 90, 103, 117, 145, 146, 156, 179, 180, 190], "setinputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 115, 117, 126, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191], "featur": [10, 24, 33, 45, 81, 83, 86, 90], "setoutputcol": [10, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 111, 115, 126, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191], "setmodelfil": [10, 33, 83, 103], "setepochsnumb": [10, 33, 83, 103], "setbatchs": [10, 33, 43, 83, 90, 103, 104, 129, 145, 162, 179], "setfeaturesc": [10, 33, 83], "zscore": [10, 33, 83], "setfiximbal": [10, 33, 83, 103], "setlearningr": [10, 33, 43, 83, 103, 129, 162], "001": [10, 24, 33, 83, 90, 103, 156, 190], "setoutputlogspath": [10, 33, 43, 83], "log": [10, 33, 43, 45, 83, 90, 129, 145, 156, 162, 179, 190, 193, 198, 201, 202, 208, 218], "setvalidationsplit": [10, 33, 43, 83, 90, 103], "clf_pipelin": [10, 33], "stage": [10, 33, 41, 43, 45, 48, 49, 52, 65, 67, 70, 72, 74, 86, 89, 91, 92, 95, 96, 100, 103, 104, 105, 109, 115, 129, 131, 138, 141, 149, 151, 159, 162, 164, 171, 174, 183, 185], "features_asm": [10, 33, 83], "bool": [10, 12, 13, 33, 35, 36, 41, 43, 48, 50, 53, 62, 64, 65, 67, 70, 72, 74, 75, 79, 83, 90, 92, 96, 98, 100, 101, 103, 104, 105, 109, 113, 114, 115, 116, 117, 150, 159, 160, 184, 201, 202, 205, 207, 211, 214, 219], "an": [10, 18, 19, 22, 23, 24, 33, 41, 43, 48, 57, 58, 65, 67, 70, 74, 75, 77, 78, 81, 86, 90, 92, 94, 95, 101, 103, 106, 109, 110, 117, 123, 129, 131, 132, 138, 145, 146, 156, 158, 162, 164, 165, 171, 179, 180, 190, 191, 193, 198, 201, 202, 205, 207, 211, 219, 222], "otherwis": [10, 24, 33, 43, 45, 50, 57, 58, 59, 60, 67, 72, 74, 75, 77, 78, 81, 83, 86, 90, 98, 100, 101, 103, 104, 109, 110, 113, 114, 115, 131, 132, 149, 150, 151, 156, 164, 165, 183, 184, 185, 190, 193, 208, 214, 218, 221], "locat": [10, 41, 53, 55, 62, 63, 64, 65, 74, 90, 92, 94, 103, 104, 106, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 189, 190, 191, 204, 205, 209], "where": [10, 12, 16, 23, 24, 33, 35, 39, 41, 48, 53, 55, 67, 68, 75, 83, 89, 90, 101, 103, 104, 110, 117, 131, 132, 135, 136, 141, 153, 156, 164, 165, 168, 169, 174, 186, 190, 197, 198, 201, 202, 207, 209], "logregclassifiertfgraphbuild": 10, "svmclassifiertfgraphbuild": 10, "assertiontfgraphbuild": [10, 33], "assertiondlapproach": [10, 33, 43, 117, 129, 162], "blstm_34_32_30_": [10, 33], "_": [10, 33, 47, 71, 72, 90, 156, 190], "format": [10, 23, 33, 41, 43, 65, 67, 70, 86, 89, 90, 92, 95, 131, 156, 164, 190, 193, 197, 198, 201, 202, 203, 205, 207, 213, 219], "setlabelcol": [10, 33, 43, 45, 58, 83, 109, 129, 138, 162, 171], "label": [10, 33, 41, 43, 45, 52, 54, 57, 58, 59, 60, 62, 63, 64, 67, 82, 83, 86, 89, 90, 92, 94, 103, 104, 106, 108, 109, 117, 128, 129, 131, 138, 142, 144, 145, 146, 155, 156, 158, 161, 162, 164, 171, 175, 178, 179, 180, 189, 190, 191, 197, 198, 201, 207, 208, 211, 219], "chunk": [10, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 65, 67, 68, 70, 74, 75, 77, 78, 82, 86, 89, 91, 92, 93, 95, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 115, 129, 131, 132, 135, 136, 141, 142, 146, 149, 151, 153, 162, 164, 165, 168, 169, 174, 175, 180, 183, 185, 186, 197, 207, 208, 218, 219, 221], "128": [10, 12, 24, 33, 35, 43, 62, 63, 64, 129, 144, 155, 162, 178, 189], "setdropout": [10, 33, 43, 83, 90, 129, 145, 162, 179], "setepoch": [10, 33, 43, 129, 162], "setstartcol": [10, 33, 43, 45, 75, 129, 162], "setendcol": [10, 33, 43, 45, 129, 162], "end": [10, 23, 33, 43, 44, 45, 50, 67, 86, 89, 90, 101, 103, 113, 115, 129, 131, 156, 159, 162, 164, 190, 201, 202, 207, 211, 221], "setmaxsentlen": [10, 33, 43, 129, 162], "250": [10, 33, 43, 78, 129, 162], "setenableoutputlog": [10, 33, 43], "training_log": [10, 33], "setgraphfold": [10, 33, 43, 90, 117], "nertfgraphbuild": [10, 33], "medicalnerapproach": [10, 33, 90, 117, 156, 190], "embeddings_dim": [10, 12, 33, 35], "nchar": [10, 12, 15, 33, 35, 38, 90, 156, 190], "83": [10, 33], "ntag": [10, 12, 15, 33, 35, 38, 90, 156, 190], "12": [10, 33, 47, 68, 95, 207], "medic": [10, 109, 117, 193, 205, 210], "ner": [10, 15, 16, 33, 38, 39, 41, 43, 45, 50, 52, 53, 55, 63, 67, 68, 70, 72, 74, 77, 78, 85, 86, 101, 105, 106, 128, 129, 131, 136, 142, 143, 153, 154, 160, 162, 164, 169, 175, 176, 186, 187, 193, 198, 201, 202, 207, 211, 219], "is_med": [10, 12, 33, 35, 193], "medical_ner_graph": [10, 33], "nertagg": [10, 33, 77, 90, 103, 104, 141, 156, 174, 190], "sentenc": [10, 13, 15, 33, 36, 38, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 70, 72, 74, 77, 78, 79, 86, 89, 90, 91, 92, 93, 94, 104, 105, 106, 108, 109, 111, 113, 115, 127, 129, 131, 135, 136, 138, 141, 142, 144, 145, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 186, 189, 190, 191, 193, 197, 198, 201, 202, 207, 211], "token": [10, 33, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 86, 89, 90, 91, 92, 94, 98, 100, 103, 104, 105, 106, 109, 110, 111, 113, 115, 117, 127, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 160, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191, 197, 198, 201, 202, 207, 211], "setmaxepoch": [10, 33, 90, 145, 156, 179, 190], "setrandomse": [10, 33, 90, 93, 98, 113, 156, 190], "setverbos": [10, 33, 43, 90, 156, 190], "setevaluationlogextend": [10, 33], "setincludeconfid": [10, 33, 43, 90, 198], "ner_log": [10, 33], "setenablememoryoptim": [10, 33, 90], "relationextractiontfgraphbuild": [10, 33], "relationextractionapproach": [10, 33, 103, 117, 207], "6000": [10, 33], "relu": [10, 24, 33, 117], "re_with_bn": [10, 33], "re_approach": [10, 33], "rel": [10, 33, 53, 55, 77, 78, 95, 117, 135, 136, 153, 168, 169, 186, 207], "pos_tag": [10, 33, 78, 103, 105, 106, 117, 197], "train_ner_chunk": [10, 33, 103, 117, 207], "depend": [10, 23, 24, 33, 42, 51, 54, 78, 90, 100, 103, 104, 105, 106, 108, 111, 117, 141, 149, 156, 174, 183, 190, 193, 202, 211], "70": [10, 33, 52, 90, 190, 219], "setfroment": [10, 33, 103], "begin1i": [10, 33], "end1i": [10, 33], "label1": [10, 33, 207], "settoent": [10, 33, 103], "begin2i": [10, 33], "end2i": [10, 33], "label2": [10, 33, 207], "tfgraphbuilderfactori": [10, 33], "factori": [10, 33], "differ": [10, 20, 24, 33, 41, 50, 81, 86, 90, 105, 117, 156, 190, 201, 202, 207, 219], "static": [10, 13, 15, 16, 24, 33, 36, 38, 39, 43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 93, 94, 100, 103, 104, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204, 209], "spark": [10, 33, 41, 42, 43, 45, 47, 49, 50, 52, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 83, 86, 89, 90, 92, 94, 95, 96, 100, 103, 104, 105, 106, 109, 110, 111, 114, 115, 125, 127, 128, 129, 131, 132, 141, 144, 145, 149, 150, 151, 155, 156, 158, 160, 162, 164, 165, 174, 178, 179, 183, 184, 185, 189, 190, 191, 193, 198, 201, 202, 205, 206, 207, 211, 213, 219, 222], "model_nam": [10, 33], "want": [10, 33, 41, 42, 43, 51, 53, 55, 65, 67, 74, 78, 90, 93, 100, 101, 103, 105, 109, 111, 129, 131, 136, 149, 162, 164, 169, 183, 205], "configur": [10, 33, 41], "path": [10, 33, 41, 43, 45, 49, 52, 53, 55, 57, 58, 65, 67, 77, 83, 86, 90, 92, 94, 100, 103, 109, 117, 129, 131, 135, 136, 138, 145, 153, 156, 158, 162, 164, 168, 169, 171, 179, 186, 190, 191, 193, 197, 198, 201, 202, 207, 208, 209, 210, 211, 213, 218, 219], "rb": [10, 33], "filenam": [10, 25, 33], "doesn": [10, 24, 103], "modulenotfounderror": 10, "print_model_param": [10, 33], "allow": [10, 23, 24, 33, 41, 50, 51, 53, 62, 64, 72, 103, 111, 144, 155, 159, 178, 189, 205, 209], "descript": [10, 33, 41, 50, 100, 109, 138, 149, 171, 183, 202, 207], "everi": [10, 19, 33, 41, 67, 90, 131, 156, 164, 190, 201, 204], "create_graph": [11, 14, 34, 37], "dataset_encod": [11, 14, 34, 37], "ner_model": [11, 14, 34, 37, 53, 55, 74, 78, 136, 153, 169, 186], "ner_model_sav": [11, 14, 34, 37], "sentence_group": [11, 14, 34, 37], "tf2contrib": 11, "core_rnn_cel": [11, 21], "fused_rnn_cel": [11, 21], "gru_op": [11, 21], "lstm_op": [11, 21], "rnn": [11, 18, 19, 21, 22, 24], "rnn_cell": [11, 19, 21], "graph_build": [11, 34], "int": [12, 24, 35, 41, 42, 43, 50, 53, 57, 58, 62, 63, 64, 67, 68, 70, 74, 78, 79, 83, 90, 93, 95, 98, 100, 103, 104, 105, 109, 111, 113, 115, 117, 119, 145, 151, 159, 179, 185, 197, 198, 201, 202, 205, 207, 210, 213, 219], "lstm_size": [12, 35, 90, 156, 190], "gpu_devic": [12, 35], "nerdl": [12, 35, 193], "arg": [12, 13, 16, 22, 23, 24, 35, 36, 39, 41, 43, 53, 54, 55, 62, 63, 64, 77, 90, 94, 101, 103, 104, 106, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 160, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 189, 190, 191, 201, 204, 206, 207, 211, 214], "folder": [12, 16, 35, 39, 43, 62, 63, 64, 83, 90, 100, 104, 106, 114, 115, 117, 129, 141, 142, 144, 145, 149, 150, 151, 155, 156, 162, 174, 175, 178, 179, 183, 184, 185, 189, 190, 209, 219], "number": [12, 22, 23, 24, 35, 41, 43, 45, 50, 53, 57, 58, 67, 68, 79, 83, 86, 90, 98, 100, 101, 103, 104, 109, 113, 115, 117, 129, 131, 141, 145, 146, 149, 151, 156, 162, 164, 174, 179, 180, 183, 185, 190, 193, 197, 198, 201, 202, 205, 210, 213, 221], "uniqu": [12, 35, 74, 90], "tag": [12, 16, 35, 39, 41, 43, 48, 52, 67, 82, 89, 90, 91, 92, 103, 129, 131, 145, 156, 162, 164, 179, 190, 197, 201, 208, 213, 218, 221], "dimens": [12, 19, 22, 24, 35, 90, 156, 190], "word": [12, 13, 35, 36, 53, 55, 67, 74, 89, 92, 94, 96, 98, 109, 113, 117, 131, 136, 145, 158, 164, 169, 179, 191, 193, 201, 202, 221], "charact": [12, 13, 16, 35, 36, 39, 67, 70, 74, 92, 131, 164, 201, 202], "option": [12, 23, 24, 35, 41, 43, 45, 50, 52, 57, 58, 59, 60, 65, 67, 74, 77, 78, 81, 83, 86, 90, 92, 100, 109, 114, 115, 117, 145, 149, 150, 151, 156, 179, 183, 184, 185, 190, 197, 201, 202, 204, 205, 207, 214, 219], "size": [12, 22, 23, 24, 35, 43, 62, 64, 83, 90, 98, 113, 117, 119, 129, 144, 145, 155, 156, 162, 178, 179, 189, 190, 199], "hidden": [12, 15, 24, 35, 38, 63, 117, 155, 189, 199], "lstm": [12, 22, 24, 35, 90, 156, 190], "disk": [12, 16, 35, 39, 43, 83, 90, 103, 129, 145, 156, 162, 179, 190], "which": [12, 19, 23, 24, 35, 50, 52, 59, 60, 62, 63, 64, 65, 67, 77, 78, 81, 86, 90, 92, 94, 95, 98, 100, 103, 104, 105, 106, 109, 113, 115, 117, 125, 129, 131, 138, 142, 144, 149, 151, 155, 156, 158, 162, 164, 171, 175, 178, 183, 185, 189, 190, 191, 197, 198, 201, 202, 209, 214], "gpu": [12, 23, 35, 160], "being": [12, 13, 24, 35, 36, 67, 111, 117, 131, 164], "datasetencod": [13, 36], "embeddings_resolv": [13, 36], "tag2id": [13, 36], "piece_tag": [13, 36], "encod": [13, 16, 36, 39, 94, 103, 104, 106, 117, 141, 142, 145, 158, 174, 175, 179, 191], "shuffl": [13, 36, 145, 179], "lower": [13, 36, 52, 53, 67, 75, 90, 110, 131, 132, 156, 164, 165, 190, 201], "case": [13, 18, 22, 24, 36, 41, 44, 48, 50, 53, 62, 64, 65, 67, 75, 77, 78, 90, 101, 103, 104, 105, 110, 131, 132, 144, 155, 156, 164, 165, 178, 189, 190, 201, 202, 221], "remov": [13, 36, 48, 50, 52, 96, 105, 201, 202], "addit": [13, 24, 36, 45, 67, 90, 105, 109, 138, 145, 156, 171, 179, 190], "white": [13, 36, 48, 52, 68, 92, 199], "space": [13, 23, 24, 36, 197, 201], "process": [13, 24, 36, 43, 48, 52, 62, 63, 64, 75, 82, 83, 90, 92, 100, 103, 104, 109, 110, 113, 115, 117, 129, 132, 138, 141, 144, 149, 155, 156, 162, 165, 171, 174, 178, 183, 189, 190, 193, 198, 201, 202, 207, 219], "get_char_index": [13, 36], "list": [13, 22, 23, 36, 41, 43, 45, 48, 52, 53, 57, 58, 62, 63, 64, 67, 70, 78, 82, 86, 90, 91, 92, 93, 94, 98, 100, 101, 103, 104, 105, 106, 109, 111, 113, 115, 116, 117, 129, 131, 138, 142, 149, 151, 156, 158, 159, 162, 164, 171, 175, 183, 185, 190, 191, 197, 198, 201, 202, 204, 205, 206, 207, 208, 211, 213, 218, 219, 221, 222], "outpu": [13, 36], "layer": [13, 23, 24, 36, 43, 59, 62, 63, 64, 83, 90, 117, 129, 144, 155, 156, 162, 178, 189, 190], "nermodel": [15, 38, 43, 48, 89, 90, 92, 129, 156, 162, 190], "dummy_tag": [15, 38], "use_contrib": [15, 38], "use_gpu_devic": [15, 38], "add_bilstm_char_repr": [15, 38], "dim": [15, 24, 38], "25": [15, 38, 47, 67, 71, 101, 109, 131, 138, 164, 171, 207], "add_cnn_char_repr": [15, 38], "nfilter": [15, 38], "pad": [15, 38], "add_pretrained_word_embed": [15, 38], "add_context_repr": [15, 38], "hidden_s": [15, 38], "residu": [15, 38], "add_inference_lay": [15, 38], "crf": [15, 38, 90, 156, 190], "predictions_op_nam": [15, 38], "add_training_op": [15, 38], "clip_gradi": [15, 38], "train_op_nam": [15, 38], "num_tru": [15, 38], "arrai": [15, 38, 43, 57, 58, 62, 63, 64, 67, 75, 81, 86, 90, 91, 100, 110, 113, 115, 116, 129, 131, 132, 144, 145, 146, 149, 151, 155, 156, 162, 164, 165, 178, 179, 180, 183, 185, 189, 190, 198], "fill": [15, 38, 93], "l": [15, 38, 67, 70, 207], "val": [15, 38], "get_sentence_length": [15, 38], "batch": [15, 18, 23, 24, 38, 41, 43, 62, 64, 83, 90, 117, 129, 144, 145, 155, 156, 162, 178, 179, 189, 190], "idx": [15, 38], "word_embed": [15, 38, 42, 43, 45, 51, 68, 72, 74, 90, 103, 111, 129, 156, 162, 190], "get_sentence_token_length": [15, 38], "tag_id": [15, 38], "get_word_length": [15, 38], "char_id": [15, 38], "get_char_id": [15, 38], "get_from_batch": [15, 38], "get_tag_id": [15, 38], "get_word_embed": [15, 38], "slice": [15, 17, 38, 40, 53, 55, 77, 78, 136, 169], "init_vari": [15, 38], "epoch_start": [15, 38], "epoch_end": [15, 38], "32": [15, 17, 23, 24, 38, 40, 47, 65, 111], "lr": [15, 38, 43, 90, 145, 156, 179, 190], "po": [15, 38, 42, 51, 52, 90, 103, 111, 128, 156, 190, 197, 201, 211], "65": [15, 38, 207], "measur": [15, 38, 50, 159], "20": [15, 24, 38, 68, 83, 95, 145, 179], "get_softmax": [15, 38], "score": [15, 38, 43, 50, 59, 60, 83, 90, 94, 106, 129, 142, 156, 158, 162, 175, 190, 191, 197, 198, 203, 208, 218, 221], "threshold": [15, 38, 52, 53, 67, 74, 78, 92, 94, 103, 104, 109, 131, 164, 197, 198, 208, 218], "close": [15, 38], "nermodelsav": [16, 39], "embeddings_fil": [16, 39], "restore_tensorflow_st": [16, 39], "export_dir": [16, 39], "restor": [16, 39, 43, 45, 50, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 100, 106, 109, 114, 115, 117, 142, 144, 149, 150, 151, 155, 156, 175, 178, 183, 184, 185, 189, 190], "directori": [16, 39, 41], "save_model": [16, 39], "separ": [16, 39, 41, 50, 52, 67, 70, 86, 90, 92, 103, 105, 127, 156, 190, 193, 197, 213], "variabl": [16, 20, 22, 24, 39, 100, 115, 149, 151, 183, 185], "sentencegroup": [17, 40], "bucket_length": [17, 40], "get_bucket_id": [17, 40], "length": [17, 22, 23, 40, 41, 43, 45, 62, 63, 64, 67, 70, 74, 86, 98, 100, 113, 115, 117, 129, 131, 144, 149, 151, 155, 162, 164, 178, 183, 185, 189, 198, 201, 202], "core": 18, "embeddingwrapp": 18, "inputprojectionwrapp": 18, "outputprojectionwrapp": 18, "rnncell": [18, 19, 23, 24], "embedding_class": 18, "embedding_s": 18, "initi": [18, 20, 22, 23, 24, 74, 90, 103, 193, 207], "reus": [18, 20, 22, 24], "oper": [18, 19, 23, 24, 50, 117], "ad": [18, 90, 92, 117, 156, 190, 201, 202], "note": [18, 90, 145, 156, 179, 190, 221], "mai": [18, 22, 24, 44, 53, 65, 75, 78, 90, 105, 110, 117, 132, 165], "effici": [18, 19, 22, 23, 41], "wrapper": [18, 20, 24, 101, 128], "instead": [18, 20, 45, 62, 64, 201], "concaten": [18, 23, 50], "whole": [18, 50], "sequenc": [18, 19, 22, 23, 62, 64, 67, 68, 117, 131, 144, 164, 178], "your": [18, 41, 51, 90, 117, 145, 156, 160, 179, 190, 205], "time": [18, 19, 20, 23, 24, 41, 67, 70, 90, 113, 117, 131, 164, 190, 201], "do": [18, 23, 65, 82, 90, 92, 93, 201, 202], "feed": [18, 62, 64, 90], "zero_st": [18, 24], "dtype": [18, 22, 23, 24], "call": [18, 20, 22, 24, 74], "state": [18, 22, 23, 24, 63, 90, 100, 115, 145, 149, 155, 156, 179, 183, 189, 190, 201, 205, 207], "run": [18, 22, 23, 24, 117, 201, 202], "num_proj": [18, 24], "activ": [18, 24, 103, 104, 117, 141, 174, 193, 198, 201, 202], "input_s": [18, 22, 23, 24], "project": [18, 24, 41], "output_s": [18, 22], "directli": [18, 41], "construct": [19, 24, 63, 155, 189], "fuse": 19, "fusedrnncel": [19, 22], "abstract": [19, 22], "object": [19, 41, 54, 62, 63, 64, 90, 103, 117, 128, 144, 145, 155, 156, 178, 179, 189, 190], "repres": [19, 24, 41, 48, 50, 52, 67, 82, 86, 109, 117, 131, 164, 219], "A": [19, 22, 23, 24, 47, 50, 53, 55, 62, 63, 64, 65, 77, 78, 83, 86, 89, 90, 91, 92, 94, 98, 100, 103, 104, 106, 109, 113, 115, 117, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 155, 156, 158, 159, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 189, 190, 191, 197, 198, 201, 204, 205, 207, 213], "entir": [19, 22, 62, 64], "expand": 19, "In": [19, 24, 44, 50, 65, 68, 78, 90, 101, 104, 117, 141, 145, 156, 174, 179, 190], "effect": [19, 67, 70, 113, 131, 164], "recurr": [19, 22, 23, 24, 86, 89, 90, 156, 190], "network": [19, 22, 23, 24, 59, 90, 117, 156, 190], "unlik": [19, 22, 100, 149, 183], "subclass": [19, 22, 78, 93, 113, 114, 119, 122, 148, 150, 182, 184], "onc": [19, 90, 98, 104, 113, 141, 174], "put": [19, 33, 51, 74, 145, 179], "loop": [19, 100, 115, 149, 151, 183, 185], "insid": [19, 92, 145, 179], "usual": [19, 92, 106, 109, 142, 175], "lead": [19, 44, 117], "much": [19, 22, 83, 145, 179], "complex": [19, 117], "less": [19, 23, 67, 90, 131, 156, 164, 190], "must": [19, 22, 23, 24, 43, 45, 50, 53, 68, 75, 101, 110, 129, 132, 162, 165], "__call__": 19, "signatur": 19, "fusedrnncelladaptor": 19, "use_dynamic_rnn": 19, "adaptor": 19, "timereversedfusedrnn": 19, "revers": 19, "compat": [19, 22, 62, 63, 64, 90, 144, 155, 156, 160, 178, 189, 190, 193], "v1": 19, "nn": [19, 52, 91], "basicrnncel": 19, "fw_lstm": 19, "contrib": [19, 21, 90, 156, 190], "bw_lstm": 19, "fw_out": 19, "fw_state": 19, "bw_out": 19, "bw_state": 19, "block": [20, 22], "gru": [20, 24], "op": [20, 21, 22], "layerrnncel": [20, 22], "grublockcel": 20, "num_unit": [20, 22, 24], "cell_siz": 20, "gru_cel": 20, "deprec": 20, "grublockcellv2": 20, "arxiv": [20, 22, 23, 24], "org": [20, 22, 23, 24, 74, 109], "ab": [20, 22, 23, 24], "1406": [20, 24], "1078": [20, 24], "comput": [20, 23, 24, 50, 77, 78, 113, 117, 221], "forward": [20, 23], "propag": [20, 24], "step": [20, 24, 48, 90, 190], "kernel": 20, "mathemat": 20, "equat": [20, 24], "bias": [20, 22, 24], "b_ru": 20, "constant_initi": 20, "b_c": 20, "x_h_prev": 20, "h_prev": 20, "r_bar": 20, "u_bar": 20, "w_ru": 20, "r": [20, 24, 53, 207], "sigmoid": [20, 117], "h_prevr": 20, "circ": [20, 24], "x_h_prevr": 20, "c_bar": 20, "w_c": [20, 24], "c": [20, 24, 67, 70], "h": [20, 24], "input_shap": [20, 22, 24], "temporari": 20, "impl": 20, "scheme": [20, 89, 207], "distribut": [21, 43, 83, 90, 103, 109, 125, 129, 138, 145, 156, 162, 171, 179, 190, 193], "origin": [21, 24, 41, 53, 57, 58, 67, 70, 72, 92, 95, 109, 117, 131, 138, 146, 159, 164, 171, 180, 201, 202, 221], "modifi": [21, 86, 89, 92, 202], "chang": [21, 24, 86, 92, 117, 197, 201, 202, 214], "just": [21, 90, 156, 190, 201, 202], "therefor": [21, 24], "all": [21, 24, 41, 50, 51, 53, 57, 58, 62, 64, 67, 70, 78, 83, 90, 92, 96, 98, 101, 103, 105, 109, 113, 116, 117, 125, 131, 138, 146, 156, 164, 171, 180, 190, 201, 202, 209, 211, 222], "function": [21, 41, 53, 59, 60, 92, 109, 117, 127, 192, 207, 222], "enabl": [21, 24, 43, 48, 52, 67, 72, 90, 117, 156, 190], "lstmblockcel": 22, "forget_bia": [22, 24], "cell_clip": [22, 24], "use_peephol": [22, 24], "lstm_cell": 22, "1409": 22, "2329": 22, "add": [22, 24, 44, 90, 92, 95, 96, 101, 105, 156, 190, 192, 197, 201, 202, 205], "forget": [22, 24], "gate": [22, 24], "order": [22, 24, 50, 86, 100, 103, 115, 116, 149, 151, 183, 185], "reduc": [22, 24], "scale": [22, 24, 53, 83], "begin": [22, 23, 24, 44, 68, 75, 86, 89, 90, 92, 103, 105, 109, 110, 132, 138, 165, 171, 201, 202, 207, 211], "rnn_cell_impl": [22, 24], "lstmcell": [22, 24], "monolith": 22, "should": [22, 24, 33, 41, 43, 50, 52, 53, 65, 74, 77, 90, 92, 93, 96, 100, 109, 113, 114, 119, 122, 129, 145, 148, 149, 150, 156, 162, 179, 182, 183, 184, 190, 193, 197, 198, 201, 202, 203, 204, 207, 213], "faster": [22, 62, 64, 117, 144, 155, 178, 189], "bia": [22, 24, 160, 195], "matric": [22, 24], "long": [22, 24, 53, 100, 149, 159, 183, 207], "scope": [22, 23, 24, 43, 93, 129, 162], "match": [22, 23, 43, 45, 53, 62, 64, 65, 67, 74, 75, 86, 91, 110, 129, 131, 132, 144, 155, 162, 164, 165, 178, 189, 202], "inputs_shap": [22, 24], "short": [22, 24, 53, 100, 149, 183], "term": [22, 24, 43, 52, 57, 58, 67, 70, 117, 129, 131, 146, 159, 162, 164, 180, 201, 202, 205], "lstmblockwrapp": 22, "helper": [22, 23, 126, 205, 209], "housekeep": 22, "altern": 22, "similar": [22, 24, 50, 67, 79, 131, 164, 198, 221], "type": [22, 23, 24, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 74, 75, 77, 78, 83, 86, 89, 90, 91, 92, 94, 95, 96, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 115, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 201, 202, 203, 208, 211, 218, 219, 221], "_call_cel": 22, "properti": [22, 23, 67, 123, 131, 164], "unit": [22, 24, 96, 103, 104, 117, 141, 174], "initial_st": 22, "sequence_length": [22, 23], "d": [22, 24, 41, 67, 205], "tensor": [22, 23, 24, 117], "shape": [22, 23, 24], "time_len": 22, "tupl": [22, 23, 24, 93, 160, 197, 201, 202], "initial_cell_st": 22, "initial_output": 22, "self": [22, 24, 54, 81], "_num_unit": 22, "expect": [22, 95, 207], "zero": [22, 23, 94, 106, 142, 158, 175, 191], "ha": [22, 23, 24, 41, 43, 48, 50, 52, 54, 57, 58, 65, 67, 68, 75, 77, 90, 93, 95, 101, 103, 110, 115, 129, 132, 145, 146, 151, 156, 162, 165, 179, 180, 185, 190, 198, 219], "heterogen": 22, "specifi": [22, 24, 43, 57, 58, 67, 68, 78, 83, 86, 89, 90, 106, 116, 129, 142, 145, 146, 156, 162, 175, 179, 180, 190, 207], "each": [22, 23, 24, 41, 43, 45, 50, 57, 58, 67, 77, 78, 83, 86, 90, 93, 100, 101, 105, 106, 117, 129, 131, 142, 145, 146, 156, 162, 164, 175, 179, 180, 190, 193, 197, 198, 201, 202, 203, 209, 211, 219], "int32": [22, 23], "int64": [22, 23], "vector": [22, 23, 24, 50, 57, 58, 60, 76, 78, 81, 83, 146, 180], "element": [22, 23, 119, 197], "pair": [22, 24, 41, 48, 52, 78, 86, 92, 101, 103, 104, 105, 106, 142, 175], "final": [22, 23, 53], "cell_stat": 22, "valueerror": [22, 23, 24], "mismatch": 22, "lstmblockfusedcel": 22, "lstm_fused_cel": 22, "extrem": 22, "singl": [22, 23, 24, 50, 53, 59, 67, 79, 81, 90, 92, 145, 156, 179, 190, 193, 197, 201, 211], "both": [22, 23, 24, 44, 63, 65, 67, 70, 77, 78, 90, 96, 103, 131, 155, 156, 159, 164, 189, 190, 193, 201, 202, 205], "than": [22, 50, 52, 67, 90, 93, 100, 109, 131, 149, 156, 164, 183, 190], "abov": [22, 113, 221], "consist": [22, 24, 50, 67, 70, 78, 106, 131, 142, 164, 175, 197, 198, 201], "stack_bidirectional_rnn": 23, "cells_fw": 23, "cells_bw": 23, "initial_states_fw": 23, "initial_states_bw": 23, "bidirect": [23, 24], "neural": [23, 24, 59, 90, 117, 156, 190], "stack": [23, 24], "combin": [23, 24, 77, 92, 93, 101, 159, 201, 202], "backward": 23, "next": [23, 95], "bidirectional_rnn": 23, "doe": [23, 24, 86, 90, 156, 190], "share": [23, 24, 53, 78], "between": [23, 24, 41, 43, 50, 59, 60, 67, 77, 78, 79, 90, 91, 92, 96, 103, 104, 105, 106, 109, 117, 129, 131, 141, 142, 145, 156, 162, 164, 174, 175, 179, 190, 198, 201, 202, 205, 207, 221], "direct": [23, 24, 41, 103, 104, 105, 117, 141, 174], "intermedi": 23, "As": [23, 24], "describ": [23, 24, 50, 193], "1303": 23, "5778": 23, "instanc": [23, 41, 78, 103, 104, 109, 123, 141, 174, 193], "one": [23, 24, 41, 42, 43, 62, 64, 76, 77, 78, 83, 86, 90, 92, 101, 105, 109, 129, 156, 162, 190, 197, 201, 202, 205, 209], "per": [23, 24, 41, 43, 45, 51, 62, 64, 74, 83, 90, 92, 103, 129, 145, 156, 162, 179, 190, 208, 218, 221], "nest": 23, "appropri": [23, 41, 202], "cell_fw": 23, "state_s": [23, 24], "same": [23, 24, 41, 50, 67, 70, 78, 86, 90, 92, 100, 101, 115, 131, 149, 151, 156, 164, 183, 185, 190, 193, 198, 201, 202], "correspond": [23, 50, 59, 60, 67, 74, 77, 131, 164, 197, 198, 201, 202, 203], "either": [23, 45, 50, 75, 89, 101, 103, 109, 110, 132, 145, 165, 179, 214], "actual": 23, "variablescop": 23, "subgraph": 23, "output_state_fw": 23, "output_state_bw": 23, "depth": [23, 24], "output_states_fw": 23, "output_states_bw": 23, "typeerror": 23, "cell_bw": 23, "empti": [23, 75, 78, 83, 86, 90, 101, 109, 110, 132, 156, 165, 190, 207], "stack_bidirectional_dynamic_rnn": 23, "parallel_iter": 23, "time_major": 23, "swap_memori": 23, "dynam": [23, 24], "max_tim": 23, "iter": [23, 45, 57, 58, 90, 146, 156, 180, 190, 201, 202], "parallel": 23, "those": [23, 41, 50, 68, 92, 105], "tempor": 23, "trade": 23, "off": [23, 90, 129, 145, 156, 162, 179, 190], "take": [23, 62, 64, 67, 77, 81, 83, 101, 113, 123, 131, 144, 159, 164, 178, 197, 198, 213], "while": [23, 41, 44, 90, 95, 109, 113, 117, 138, 156, 171, 190, 193], "smaller": [23, 117], "longer": [23, 86, 117, 198], "bit": [23, 62, 64, 144, 178], "becaus": [23, 93, 113, 114, 119, 122, 148, 150, 182, 184, 207], "avoid": [23, 24, 41, 44, 50, 193, 198, 201, 202], "transpos": 23, "howev": [23, 52, 90, 156, 190], "most": [23, 50, 78, 90, 156, 190, 198], "major": 23, "so": [23, 24, 60, 90, 145, 156, 179, 190], "accept": [23, 145, 179], "emit": 23, "form": [23, 57, 58, 74, 78, 90, 96, 101, 103, 145, 146, 156, 179, 180, 190], "transpar": [23, 199], "swap": [23, 201, 202], "produc": [23, 24, 86, 92], "infer": [23, 24, 90, 106, 117, 142, 156, 175, 190], "back": 23, "prop": 23, "would": [23, 145, 179], "typic": 23, "fit": [23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 81, 83, 86, 90, 91, 94, 95, 96, 100, 101, 103, 104, 105, 106, 109, 110, 115, 129, 131, 132, 136, 138, 141, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 171, 174, 178, 179, 180, 183, 185, 186, 189, 190, 191, 219], "veri": [23, 53, 67, 90, 131, 156, 164, 190], "minim": [23, 79, 94, 103, 104, 106, 141, 142, 158, 174, 175, 191], "perform": [23, 24, 43, 67, 70, 90, 100, 105, 113, 114, 115, 117, 131, 149, 150, 156, 164, 183, 184, 190, 193, 208, 218, 221], "penalti": 23, "layers_output": 23, "coupledinputforgetgatelstmcel": 24, "proj_clip": 24, "num_unit_shard": 24, "num_proj_shard": 24, "state_is_tupl": 24, "math_op": 24, "layer_norm": 24, "norm_gain": 24, "norm_shift": 24, "non": [24, 43, 78], "peephol": 24, "pdf": [24, 219], "semanticscholar": 24, "1154": 24, "0131eae85b2e11d53df7f1360eeb6476e7f4": 24, "felix": 24, "ger": 24, "jurgen": 24, "schmidhub": 24, "fred": 24, "cummin": 24, "learn": [24, 43, 83, 90, 103, 109, 117, 129, 145, 156, 162, 179, 190], "continu": [24, 109, 138, 171], "iet": 24, "850": 24, "855": 24, "1999": [24, 95], "research": 24, "googl": 24, "pub": 24, "archiv": 24, "43905": 24, "hasim": 24, "sak": 24, "andrew": 24, "senior": 24, "francois": 24, "beaufai": 24, "architectur": [24, 90, 156, 190], "larg": [24, 62, 64, 90, 113, 144, 155, 156, 178, 189, 190], "acoust": 24, "interspeech": 24, "2014": 24, "coupl": 24, "1503": 24, "04069": 24, "greff": 24, "et": 24, "al": 24, "search": [24, 43, 74, 90, 109, 129, 138, 156, 162, 171, 190], "odyssei": 24, "peep": 24, "hole": 24, "connect": [24, 41, 117], "1607": 24, "06450": 24, "jimmi": 24, "lei": 24, "ba": 24, "jami": 24, "ryan": 24, "kiro": 24, "geoffrei": 24, "hinton": 24, "appli": [24, 53, 67, 101, 131, 164, 197, 201, 202, 207], "intern": [24, 90, 92, 100, 109, 115, 123, 149, 156, 160, 183, 190, 204, 207], "nonlinear": 24, "2d": 24, "column": [24, 41, 42, 43, 44, 45, 51, 52, 53, 55, 57, 58, 65, 67, 68, 75, 81, 83, 86, 89, 90, 103, 105, 109, 110, 111, 116, 117, 129, 131, 132, 135, 136, 138, 145, 146, 153, 156, 162, 164, 165, 168, 169, 171, 179, 180, 186, 190, 192, 193, 198, 201, 202, 205, 206, 207, 211, 213], "c_state": 24, "m_state": 24, "after": [24, 45, 57, 58, 62, 63, 64, 90, 95, 100, 103, 144, 146, 149, 155, 178, 180, 183, 189, 201], "read": [24, 43, 52, 65, 67, 81, 86, 92, 145, 179, 197, 201, 202, 207], "previou": [24, 221], "wa": [24, 41, 43, 51, 53, 55, 68, 70, 72, 78, 101, 129, 136, 145, 153, 162, 169, 179, 186], "here": 24, "cannot": [24, 214], "via": [24, 48, 52], "timefreqlstmcel": 24, "feature_s": 24, "frequency_skip": 24, "tara": 24, "n": [24, 45, 50, 70, 74, 90, 98, 113, 156, 190, 210], "sainath": 24, "bo": 24, "li": 24, "pattern": [24, 41, 67, 91, 96, 100, 131, 149, 159, 164, 183, 201, 211], "v": [24, 45, 101, 208, 218], "convolut": 24, "lvcsr": 24, "task": [24, 41, 62, 63, 64, 106, 113, 142, 144, 155, 175, 178, 189, 207, 211], "submit": 24, "2016": 24, "clip": 24, "gridlstmcel": 24, "share_time_frequency_weight": 24, "num_frequency_block": 24, "start_freqindex_list": 24, "end_freqindex_list": 24, "couple_input_forget_g": 24, "grid": [24, 197], "nal": 24, "kalchbrenn": 24, "ivo": 24, "danihelka": 24, "alex": 24, "grave": 24, "proc": 24, "iclr": 24, "1507": 24, "01526": 24, "shared_weight": 24, "flag": [24, 50, 83, 100, 197], "_state_is_tupl": 24, "bidirectionalgridlstmcel": 24, "backward_slice_offset": 24, "gridlstm": 24, "henc": 24, "affect": [24, 50, 115, 151, 185], "real": [24, 90, 156], "onlin": 24, "system": [24, 205], "two": [24, 50, 52, 54, 67, 76, 86, 92, 101, 131, 164], "attentioncellwrapp": 24, "attn_length": 24, "attn_siz": 24, "attn_vec_s": 24, "attent": 24, "1601": 24, "06733": 24, "lstma": 24, "highwaywrapp": 24, "couple_carry_transform_g": 24, "carry_bias_init": 24, "highwai": 24, "k": [24, 57, 58, 109, 113, 198, 201], "srivastava": 24, "j": 24, "preprint": 24, "1505": 24, "00387": 24, "2015": 24, "layernormbasiclstmcel": 24, "dropout_keep_prob": 24, "dropout_prob_se": 24, "1603": 24, "05118": 24, "without": [24, 67, 109, 117, 131, 164, 201, 202], "stanislau": 24, "semeniuta": 24, "aliaksei": 24, "severyn": 24, "erhardt": 24, "barth": 24, "nascel": 24, "use_bia": 24, "kwarg": 24, "na": 24, "paper": 24, "1611": 24, "01578": 24, "barret": 24, "zoph": 24, "quoc": 24, "le": 24, "reinforc": 24, "2017": [24, 159], "ugrnncel": 24, "updat": [24, 90, 190, 197, 209], "ugrnn": 24, "compromis": 24, "vanilla": 24, "There": 24, "determin": [24, 48, 50, 79, 103, 105, 106, 117, 142, 175], "whether": [24, 43, 48, 50, 51, 53, 54, 57, 58, 62, 64, 65, 67, 70, 74, 75, 79, 83, 86, 90, 92, 96, 98, 100, 101, 103, 105, 106, 109, 110, 113, 115, 116, 117, 129, 131, 132, 138, 142, 144, 145, 146, 149, 151, 155, 156, 160, 162, 164, 165, 171, 175, 178, 179, 180, 183, 185, 189, 190, 193, 202, 208, 214], "integr": 24, "instantan": 24, "idea": [24, 117], "feedforward": 24, "09913": 24, "jasmin": 24, "collin": 24, "jascha": 24, "sohl": 24, "dickstein": 24, "david": 24, "sussillo": 24, "capac": 24, "trainabl": 24, "num": 24, "new_output": 24, "ident": 24, "new_stat": 24, "intersectionrnncel": 24, "num_in_proj": 24, "y_activ": 24, "nn_op": 24, "intersect": 24, "well": [24, 78, 96, 208, 218, 221], "design": 24, "improv": [24, 44, 90, 100, 106, 115, 117, 142, 149, 156, 175, 183, 190], "flow": [24, 117], "through": [24, 41, 65], "dimension": 24, "y": [24, 70, 72], "To": [24, 43, 45, 48, 52, 62, 63, 64, 65, 71, 103, 109, 144, 155, 178, 189, 207], "achiev": [24, 50, 90, 156, 190], "subsequ": [24, 53], "deepli": 24, "best": [24, 90, 145, 156, 179, 190, 208], "new_i": 24, "equal": [24, 41, 52, 77, 78, 90, 113, 156, 190], "compiledwrapp": 24, "compile_st": 24, "wrap": [24, 93, 113, 114, 119, 121, 122, 148, 150, 182, 184], "execut": [24, 41, 67, 70, 131, 164], "xla": 24, "jit": 24, "phasedlstmcel": 24, "leak": 24, "ratio_on": 24, "trainable_ratio_on": 24, "period_init_min": 24, "period_init_max": 24, "1000": [24, 109, 138, 171], "phase": 24, "1610": 24, "09513v1": 24, "float32": 24, "float64": 24, "store": [24, 43, 83, 90, 105, 123, 129, 145, 156, 162, 179, 190], "second": [24, 49, 90, 101, 156, 190, 204], "features_s": 24, "lstmstatetupl": 24, "timestep": 24, "convlstmcel": 24, "conv_ndim": 24, "output_channel": 24, "kernel_shap": 24, "skip_connect": 24, "conv_lstm_cel": 24, "1506": 24, "04214v1": 24, "conv1dlstmcel": 24, "conv_1d_lstm_cel": 24, "1d": 24, "conv2dlstmcel": 24, "conv_2d_lstm_cel": 24, "conv3dlstmcel": 24, "conv_3d_lstm_cel": 24, "3d": 24, "glstmcell": 24, "number_of_group": 24, "group": [24, 51, 67, 91, 101], "g": [24, 53, 62, 63, 64, 78, 90, 100, 101, 105, 109, 129, 138, 144, 149, 155, 156, 162, 171, 178, 183, 189, 190, 193, 197, 201, 202, 221], "1703": 24, "10722": 24, "kuchaiev": 24, "b": [24, 43, 62, 63, 64, 89, 90, 91, 92, 94, 100, 103, 113, 115, 155, 156, 158, 189, 190, 191, 197, 221], "ginsburg": 24, "trick": 24, "brief": [24, 50], "sub": 24, "evenli": 24, "fed": 24, "num_input": 24, "known": [24, 91], "divis": 24, "innermost": 24, "incompat": 24, "layernormlstmcel": 24, "srucel": 24, "sru": 24, "fast": 24, "cnn": [24, 90, 156, 190], "cf": 24, "1709": 24, "02755": 24, "variat": 24, "character": 24, "simplifi": 24, "consecut": 24, "tradition": 24, "multipli": 24, "matrix": 24, "w_hh": 24, "ensu": 24, "flavor": 24, "replac": [24, 65, 67, 68, 69, 70, 85, 86, 92, 96, 131, 164, 197, 201, 202], "multipl": [24, 42, 78, 106, 142, 175], "h_": 24, "pointwis": 24, "result": [24, 41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 81, 82, 83, 86, 89, 90, 91, 94, 95, 96, 100, 103, 104, 105, 106, 109, 110, 115, 127, 129, 131, 132, 136, 141, 142, 144, 145, 146, 149, 151, 153, 155, 156, 158, 162, 164, 165, 169, 174, 175, 178, 179, 180, 183, 185, 186, 189, 190, 191, 193, 198, 201, 202, 203], "gain": 24, "boolean": [24, 41, 51, 67, 86, 93, 117, 208, 218], "exist": [24, 41, 90, 103, 109, 138, 171, 209], "alreadi": [24, 41, 57, 58, 90, 103, 109, 138, 146, 156, 171, 180, 190], "error": [24, 90, 156, 190, 197, 198, 214], "string": [24, 68, 74, 75, 82, 86, 91, 96, 101, 110, 117, 119, 132, 145, 165, 179, 193, 197, 199, 201, 202, 206, 207], "mistak": 24, "keyword": [24, 42, 50, 51, 85, 111, 216], "argument": [24, 103], "weightnormlstmcel": 24, "norm": 24, "adapt": 24, "1602": 24, "07868": 24, "tim": 24, "saliman": 24, "diederik": 24, "p": [24, 43, 53, 55, 116, 136, 169, 221], "kingma": 24, "reparameter": 24, "acceler": 24, "deep": [24, 43, 117, 129, 145, 162, 179], "indrnncel": 24, "independ": 24, "indrnn": 24, "1803": 24, "04831": 24, "mean": [24, 43, 50, 65, 77, 78, 90, 95, 156, 190, 198, 201, 202], "act": [24, 145, 179], "w": 24, "indygrucel": 24, "kernel_initi": 24, "bias_initi": 24, "grucel": 24, "u_r": 24, "u_z": 24, "5": [24, 44, 47, 52, 53, 55, 65, 67, 74, 77, 78, 86, 89, 90, 92, 96, 104, 131, 136, 141, 145, 156, 164, 169, 174, 179, 190, 197, 201, 202, 203, 204, 207], "respect": [24, 41], "diagon": 24, "hadamard": 24, "product": 24, "r_j": 24, "sigmaleft": 24, "mathbf": 24, "w_rmathbf": 24, "_j": 24, "u_rcirc": 24, "_jright": 24, "z_j": 24, "w_zmathbf": 24, "u_zcirc": 24, "tild": 24, "phileft": 24, "denot": 24, "indygru": 24, "node": [24, 100, 117, 149, 183], "see": [24, 48, 62, 63, 64, 71, 75, 90, 92, 101, 103, 104, 109, 110, 132, 141, 144, 145, 155, 156, 165, 174, 178, 179, 189, 190, 219], "its": [24, 67, 70, 72, 78, 86], "own": [24, 90, 145, 156, 179, 190, 205], "oppos": 24, "nunit": 24, "indylstmcel": 24, "indylstm": 24, "basiclstmcel": 24, "u_f": 24, "u_i": 24, "u_o": 24, "u_c": 24, "regular": [24, 41, 45, 48, 52, 67, 117, 131, 164, 193, 211], "f_t": 24, "sigma_gleft": 24, "w_f": 24, "x_t": 24, "b_fright": 24, "i_t": 24, "w_i": 24, "b_iright": 24, "o_t": 24, "w_o": 24, "b_oright": 24, "c_t": 24, "c_": 24, "sigma_cleft": 24, "b_cright": 24, "baselin": 24, "detail": [24, 41, 96, 103], "analysi": [24, 105, 145, 179], "1903": 24, "08023": 24, "ntmcontrollerst": 24, "ntmcell": 24, "control": [24, 41, 43, 48, 90, 96, 129, 162], "memory_s": 24, "memory_vector_dim": 24, "read_head_num": 24, "write_head_num": 24, "shift_rang": 24, "clip_valu": 24, "ture": 24, "machin": [24, 60, 117], "1807": 24, "08518": 24, "mark": [24, 43, 45, 50, 68, 101, 129, 162], "collier": 24, "joeran": 24, "beel": 24, "turn": [24, 100, 201, 202], "snowkylin": 24, "ntm": 24, "cours": 24, "1410": 24, "5401": 24, "wayn": 24, "prev_stat": 24, "minimalrnncel": 24, "glorot_uniform": 24, "ones": [24, 67, 70, 72, 90, 100, 131, 149, 156, 164, 183, 190, 201], "minimalrnn": 24, "1806": 24, "05394v2": 24, "minmin": 24, "chen": 24, "jeffrei": 24, "pennington": 24, "samuel": 24, "schoenholz": 24, "isometri": 24, "field": [24, 49, 51, 65, 81, 86, 93, 95, 111, 116, 127], "theori": 24, "signal": 24, "icml": 24, "2018": [24, 95, 159], "sum": 24, "cfncell": 24, "chao": 24, "openreview": 24, "net": [24, 45], "id": [24, 41, 49, 67, 68, 75, 98, 100, 109, 113, 115, 127, 131, 132, 149, 151, 164, 165, 183, 185, 205, 207, 211], "s1dizvclg": 24, "thoma": 24, "laurent": 24, "jame": 24, "von": 24, "brecht": 24, "cfn": [24, 131], "goe": 24, "contract": [24, 201, 202], "map": [24, 53, 54, 55, 65, 67, 71, 78, 90, 92, 103, 104, 109, 123, 131, 135, 136, 138, 153, 156, 164, 168, 169, 171, 186, 190, 197, 205, 207], "linear": [24, 62, 63, 64, 117, 144, 155, 178, 189], "decoupl": 24, "tf_graph_1x": [33, 207], "manipul": 41, "json": [41, 53, 55, 65, 67, 127, 131, 135, 136, 153, 164, 168, 169, 186, 193, 198, 201, 202, 207, 211, 213], "export": [41, 207, 211], "layout": 41, "annotationlab": 41, "interfac": [41, 109], "john": [41, 68, 70, 72, 101, 160], "snow": [41, 160], "tool": 41, "multi": [41, 53, 62, 63, 64, 67, 83, 144, 145, 155, 178, 179, 189], "modal": 41, "team": 41, "collabor": 41, "ml": [41, 43, 45, 47, 48, 52, 53, 55, 57, 58, 62, 63, 64, 65, 67, 70, 75, 77, 78, 83, 86, 89, 90, 91, 92, 95, 96, 103, 104, 110, 129, 131, 132, 136, 138, 141, 144, 145, 146, 153, 155, 156, 162, 164, 165, 169, 171, 174, 178, 179, 180, 186, 189, 190, 192, 219], "programmat": 41, "conll": [41, 90, 156, 190, 193, 197, 198, 201, 202, 207, 211], "excel": 41, "classif": [41, 83, 85, 144, 145, 146, 155, 160, 178, 179, 180, 189, 193], "preannot": 41, "upload": 41, "interact": [41, 197, 205], "up": [41, 117, 145, 179, 202], "delet": 41, "edit": [41, 53], "usag": [41, 90, 92, 96, 100, 145, 149, 156, 179, 183, 190], "tutori": 41, "set_credenti": 41, "usernam": [41, 205], "password": 41, "client_secret": 41, "annotationlab_url": 41, "credenti": [41, 160], "client": 41, "get_all_project": 41, "visibl": [41, 67, 131, 164], "rtype": [41, 211], "get_project_config": 41, "project_nam": 41, "create_project": 41, "project_descript": 41, "project_sampl": 41, "project_instruct": 41, "random": [41, 67, 68, 90, 93, 98, 113, 115, 131, 145, 151, 156, 164, 179, 185, 190, 201, 202, 205, 213], "sequenti": [41, 86], "sampl": [41, 68, 98, 100, 113, 115, 149, 151, 183, 185, 193, 197, 201, 202, 210], "show": [41, 43, 44, 47, 48, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 74, 75, 77, 78, 86, 89, 94, 95, 96, 100, 101, 103, 104, 105, 106, 110, 115, 129, 131, 132, 136, 141, 144, 145, 149, 151, 153, 155, 158, 162, 164, 165, 169, 174, 178, 179, 183, 185, 186, 189, 191, 199, 204, 207, 219], "guidelin": 41, "delete_project": 41, "confirm": 41, "set_project_config": 41, "classification_label": 41, "ner_label": [41, 89, 207], "assertion_label": [41, 207, 211], "relations_label": 41, "By": [41, 50, 78, 90, 105, 156, 190], "multiclass": [41, 83], "upload_task": 41, "task_list": 41, "title_list": 41, "id_offset": 41, "custom": [41, 43, 45, 65, 67, 100, 103, 104, 109, 115, 126, 127, 131, 149, 151, 161, 164, 183, 185, 199, 201], "titl": [41, 201, 202, 211], "increment": 41, "offset": [41, 43], "delete_task": 41, "task_id": [41, 207], "get_annot": 41, "output_nam": 41, "save_dir": [41, 219], "write": [41, 116, 197, 219], "get_conll_data": 41, "input_json_path": [41, 211], "exported_conl": 41, "ground_truth": [41, 109, 211], "excluded_label": [41, 207, 211], "excluded_task_id": [41, 211], "excluded_task_titl": [41, 211], "regex_pattern": [41, 201, 211], "io": [41, 201, 202, 219], "select": [41, 43, 44, 48, 50, 51, 53, 55, 62, 63, 64, 67, 68, 70, 71, 78, 79, 86, 94, 100, 101, 103, 104, 109, 115, 129, 131, 136, 141, 144, 149, 151, 153, 155, 158, 162, 164, 169, 174, 178, 183, 185, 186, 189, 191, 205, 211], "ground": [41, 109, 198, 211], "truth": [41, 109, 198, 211], "complet": [41, 211], "latest": [41, 211], "exclud": [41, 45, 90, 156, 190, 207, 211], "irrelev": [41, 211], "regex": [41, 42, 48, 49, 51, 52, 65, 67, 82, 91, 111, 131, 164, 201, 211], "get_assertion_data": 41, "relevant_ner_label": 41, "unannotated_label": 41, "unannotated_label_strategi": 41, "unannotated_label_strategy_dict": 41, "included_task_id": 41, "seed": [41, 67, 68, 70, 90, 93, 98, 113, 115, 131, 145, 151, 156, 164, 179, 185, 190, 205, 213], "panda": [41, 68, 197, 198, 202, 211], "relev": [41, 50, 207], "assign": [41, 201, 202, 203], "strategi": [41, 86, 101, 197], "occurr": [41, 90, 109, 156, 190], "unannot": 41, "count": [41, 90, 193, 201, 202], "fraction": 41, "absolut": 41, "dictionari": [41, 45, 51, 53, 55, 65, 67, 78, 86, 92, 94, 103, 104, 106, 111, 131, 135, 136, 142, 153, 158, 164, 168, 169, 175, 186, 191, 193, 197, 201, 202, 203, 213], "entity_label": [41, 67, 127, 131, 164], "sample_weight_or_count": 41, "max": [41, 43, 45, 53, 58, 62, 63, 64, 113, 115, 129, 144, 146, 155, 162, 178, 180, 189, 199], "get_relation_extraction_data": 41, "negative_rel": 41, "relation_pair": 41, "negative_relation_strategi": 41, "negative_relation_strategy_dict": 41, "were": [41, 54, 90, 156, 190, 211], "discard": [41, 94, 158, 191], "rest": [41, 48, 52, 82, 86, 92, 198], "plausibl": 41, "possibl": [41, 42, 43, 48, 50, 51, 52, 53, 54, 58, 65, 78, 82, 83, 86, 92, 96, 103, 105, 111, 116, 117, 129, 146, 162, 180, 201, 202], "neg": [41, 43, 100, 106, 149, 183], "entity1": [41, 101, 103, 104, 141, 174], "entity2": [41, 101, 103, 104, 141, 174], "get_classification_data": 41, "generate_preannot": 41, "all_result": 41, "document_column": 41, "ner_column": 41, "assertion_column": 41, "relations_column": 41, "user_nam": 41, "titles_list": 41, "light_pipelin": 41, "fullannot": [41, 42, 72, 202], "full_pipelin": 41, "df": [41, 95, 128, 192, 202, 205, 206, 207], "collect": [41, 81, 90, 156, 190], "documentassembl": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 86, 89, 90, 91, 92, 95, 96, 103, 104, 105, 106, 109, 110, 111, 115, 129, 131, 132, 136, 138, 141, 144, 145, 151, 153, 155, 156, 162, 164, 165, 169, 171, 174, 178, 179, 185, 186, 189, 190, 211], "older": 41, "offeset": 41, "overrit": 41, "upload_preannot": 41, "get_iaa_metr": 41, "conll_dir": 41, "annotator_nam": 41, "set_ref_annot": 41, "return_nerdlmetr": 41, "results_token_bas": 41, "iaa": 41, "metric": [41, 43, 90, 193, 201, 202, 203, 208, 218, 221], "present": [41, 43, 47, 48, 86, 89, 92, 109, 129, 138, 162, 171], "comparison": [41, 77, 202], "made": [41, 86, 117], "full": [41, 53, 96, 100, 149, 159, 183], "partial": [41, 53, 159], "nerdlmetr": [41, 128], "report": [41, 198, 201, 202, 210], "review_annot": 41, "conll_path": [41, 197, 198, 201, 202], "ner_model_path": [41, 90, 156, 190], "review": 41, "compar": [41, 50, 193, 202], "conn_path": 41, "chunk_based_comparison_df": 41, "cuhunk": 41, "token_based_comparision_df": 41, "chunk_frequency_df": 41, "metrics_result": 41, "annotationmerg": 42, "classnam": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 79, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 119, 121, 122, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191], "java_model": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 77, 78, 79, 83, 86, 89, 90, 91, 92, 93, 94, 95, 100, 101, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 119, 122, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191], "merg": [42, 57, 58, 85, 89, 108, 146, 160, 180], "inputtyp": [42, 51, 111], "wordpiec": [42, 51, 111], "sentence_embed": [42, 51, 74, 77, 78, 109, 111, 138, 145, 171, 179], "categori": [42, 51, 57, 58, 59, 60, 62, 64, 83, 103, 104, 106, 111, 141, 142, 144, 145, 146, 161, 174, 175, 178, 179, 180], "sentiment": [42, 51, 111, 145, 179], "named_ent": [42, 51, 63, 89, 90, 91, 92, 94, 111, 155, 156, 158, 189, 190, 191, 207], "labeled_depend": [42, 51, 53, 55, 111, 135, 136, 153, 168, 169, 186], "languag": [42, 43, 45, 50, 51, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 70, 74, 75, 77, 78, 83, 86, 90, 94, 100, 103, 104, 106, 109, 110, 111, 114, 115, 127, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204, 207], "empty_data": [42, 68, 72, 109], "createdatafram": [42, 43, 47, 49, 50, 52, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 86, 89, 90, 92, 94, 95, 96, 100, 103, 104, 106, 109, 110, 111, 115, 129, 131, 132, 141, 144, 145, 149, 151, 155, 156, 158, 162, 164, 165, 174, 178, 179, 183, 185, 189, 190, 191], "todf": [42, 43, 47, 49, 50, 52, 62, 63, 64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 86, 89, 90, 92, 94, 95, 96, 100, 103, 104, 105, 106, 109, 110, 111, 115, 129, 131, 132, 141, 144, 145, 149, 151, 155, 156, 158, 162, 164, 165, 174, 178, 179, 183, 185, 189, 190, 191], "document1": 42, "document2": [42, 68], "setinputtyp": [42, 111], "all_doc": 42, "pipelinemodel": [42, 57, 58, 90, 145, 156, 179, 190, 192, 193, 201, 202, 219], "setstag": [42, 44, 47, 50, 51, 53, 55, 57, 58, 62, 63, 64, 68, 75, 77, 78, 81, 83, 90, 94, 106, 110, 111, 132, 136, 144, 145, 146, 153, 155, 156, 158, 165, 169, 178, 179, 180, 186, 189, 190, 191], "lp": 42, "lightpipelin": [42, 72, 202, 211], "doc": [42, 109, 138, 171, 193, 197], "replic": 42, "23": [42, 49, 159], "inputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 115, 119, 121, 122, 136, 169], "outputannotatortyp": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 76, 77, 78, 79, 81, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 115, 119, 121, 122, 136, 169], "skiplpinputcolsvalid": [42, 53, 81, 111, 121, 122], "filter": [42, 48, 51, 52, 54, 92, 98, 105, 111, 113, 198, 201, 202, 204, 207], "algorithm": [43, 45, 50, 57, 58, 129, 146, 162, 180, 201], "absent": [43, 48, 129, 162], "hypothet": [43, 48, 129, 162], "condit": [43, 90, 129, 156, 162, 190], "associated_with_other_person": [43, 129, 162], "etc": [43, 78, 101, 109, 129, 138, 162, 171], "pretrain": [43, 45, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 83, 86, 89, 90, 91, 92, 93, 94, 100, 103, 104, 105, 106, 109, 111, 114, 115, 127, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 158, 160, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 209], "assertiondlmodel": [43, 48, 129, 162], "startcol": [43, 45, 75, 110, 129, 132, 162, 165], "endcol": [43, 45, 129, 162], "batchsiz": [43, 62, 64, 83, 90, 104, 129, 141, 144, 145, 155, 156, 162, 174, 178, 179, 189, 190], "optim": [43, 83, 90, 129, 156, 162, 190, 201], "learningr": [43, 83, 129, 162], "rate": [43, 83, 90, 129, 145, 156, 162, 179, 190, 207], "maxsentlen": [43, 129, 162], "graphfold": [43, 90, 117, 129, 156, 162, 190], "extern": [43, 86, 90, 92, 117, 129, 156, 162, 190], "hdf": [43, 83, 90, 103, 109, 129, 138, 145, 156, 162, 171, 179, 190, 209], "dbf": [43, 83, 90, 103, 109, 129, 138, 145, 156, 162, 171, 179, 190], "cloud": [43, 83, 90, 103, 109, 129, 138, 145, 156, 162, 171, 179, 190], "storag": [43, 83, 90, 103, 109, 129, 138, 145, 156, 162, 171, 179, 190], "s3": [43, 74, 83, 90, 103, 109, 129, 138, 145, 156, 162, 171, 179, 190, 204], "graphfil": [43, 90, 117, 129, 156, 162, 190], "happen": [43, 90, 117, 129, 156, 162, 190], "configprotobyt": [43, 62, 63, 64, 90, 100, 113, 115, 129, 144, 145, 149, 151, 155, 156, 162, 178, 179, 183, 185, 189, 190], "configproto": [43, 62, 63, 64, 90, 100, 113, 115, 129, 144, 145, 149, 151, 155, 156, 162, 178, 179, 183, 185, 189, 190], "serial": [43, 62, 63, 64, 90, 100, 113, 115, 129, 144, 145, 149, 151, 155, 156, 162, 178, 179, 183, 185, 189, 190], "byte": [43, 62, 63, 64, 90, 100, 113, 115, 129, 144, 145, 149, 151, 155, 156, 162, 178, 179, 183, 185, 189, 190], "config_proto": [43, 129, 162], "serializetostr": [43, 129, 162], "validationsplit": [43, 83, 90, 129, 145, 156, 162, 179, 190], "proport": [43, 90, 129, 145, 156, 162, 179, 190, 201, 202, 203], "against": [43, 50, 90, 129, 145, 156, 162, 179, 190, 193, 202], "testdataset": [43, 90, 129, 156, 162, 190], "statist": [43, 90, 129, 156, 162, 190], "dure": [43, 67, 70, 74, 90, 104, 129, 131, 145, 156, 162, 164, 179, 190, 202, 203, 205], "includeconfid": [43, 90, 129, 156, 162, 190], "confid": [43, 48, 52, 53, 55, 59, 60, 83, 86, 90, 92, 94, 106, 109, 129, 135, 136, 142, 153, 156, 158, 162, 168, 169, 175, 186, 190, 191, 198], "metadata": [43, 44, 49, 50, 51, 65, 67, 74, 78, 86, 89, 90, 93, 94, 95, 103, 104, 105, 106, 111, 116, 129, 141, 156, 158, 162, 174, 190, 191], "enableoutputlog": [43, 90, 129, 145, 156, 162, 179, 190], "outputlogspath": [43, 83, 90, 129, 145, 156, 162, 179, 190], "won": [43, 83, 90, 103, 129, 145, 156, 162, 179, 190], "level": [43, 48, 50, 52, 65, 90, 129, 145, 156, 162, 179, 190, 207], "scopewindow": [43, 129, 162], "window": [43, 85, 90, 113, 129, 156, 160, 162, 190], "express": [43, 48, 52, 67, 117, 129, 131, 162, 164], "document_assembl": [43, 44, 45, 49, 57, 58, 91, 94, 95, 100, 115, 129, 146, 149, 151, 158, 162, 180, 183, 185, 191, 211], "doc2chunk": [43, 68, 75, 95, 110, 132, 165], "setchunkcol": [43, 45, 75, 91, 110, 129, 132, 162, 165], "setstartcolbytokenindex": [43, 75], "setfailonmiss": [43, 75], "setlowercas": [43, 53, 75, 96], "wordembeddingsmodel": [43, 45, 50, 53, 55, 67, 68, 70, 72, 74, 77, 78, 86, 89, 90, 91, 92, 103, 104, 105, 106, 129, 131, 136, 141, 153, 156, 162, 164, 169, 174, 186, 190], "embeddings_clin": [43, 45, 50, 53, 55, 67, 68, 70, 72, 78, 86, 89, 91, 92, 103, 104, 105, 106, 129, 131, 136, 141, 153, 162, 164, 169, 174, 186], "en": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 68, 70, 72, 74, 77, 78, 83, 86, 89, 90, 91, 92, 93, 94, 100, 103, 104, 105, 106, 109, 114, 115, 127, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 153, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191], "setcasesensit": [43, 45, 48, 57, 58, 62, 63, 64, 65, 91, 104, 109, 111, 129, 138, 144, 146, 155, 162, 171, 178, 180, 189], "012": [43, 129, 162], "015": [43, 129, 162], "setscopewindow": [43, 129, 162], "assertionpipelin": [43, 45, 48, 129, 138, 162, 171], "srt": [43, 117], "setgraphfil": [43, 90, 117], "setconfigprotobyt": [43, 62, 63, 64, 90, 100, 113, 115], "conf": [43, 90], "contai": 43, "colnam": 43, "start_col": 43, "end_col": [43, 103], "float": [43, 50, 52, 53, 57, 58, 67, 74, 77, 78, 79, 81, 83, 86, 90, 92, 94, 103, 104, 109, 145, 179, 197, 198, 201, 202, 203, 208, 218], "maximum": [43, 53, 57, 58, 90, 98, 100, 104, 105, 109, 113, 115, 117, 145, 146, 149, 151, 156, 179, 180, 183, 185, 190], "settestdataset": 43, "read_a": [43, 52, 65, 67, 86, 92], "reada": [43, 52, 65, 67, 86, 92], "waht": 43, "left": [43, 53, 103, 104, 105, 141, 174], "right": [43, 50, 53, 77, 103, 104, 105, 141, 174], "dl": [43, 117], "approach": [43, 50, 53, 55, 121, 129, 135, 136, 153, 162, 168, 169, 186], "targetnerlabel": [43, 45, 129, 162], "common": [43, 48, 52, 53, 55, 57, 58, 65, 67, 70, 75, 77, 78, 81, 83, 86, 89, 90, 92, 95, 103, 104, 109, 110, 129, 131, 132, 136, 138, 141, 146, 153, 156, 160, 162, 164, 165, 169, 171, 174, 180, 186, 190], "fever": [43, 48, 129, 162], "sore": [43, 48, 129, 162], "throat": [43, 48, 129, 162], "stomach": [43, 48, 52, 129, 162], "pain": [43, 48, 52, 109, 129, 162], "she": [43, 129, 162, 207], "maintain": [43, 129, 162], "epidur": [43, 48, 129, 162], "pca": [43, 48, 129, 162], "sentencedetector": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 65, 67, 70, 74, 77, 78, 86, 89, 90, 91, 92, 94, 105, 106, 109, 111, 129, 131, 136, 138, 145, 153, 156, 162, 164, 169, 171, 179, 186, 190], "medicalnermodel": [43, 50, 53, 55, 67, 68, 70, 72, 78, 86, 89, 90, 91, 92, 103, 104, 105, 106, 129, 131, 136, 141, 153, 156, 162, 164, 169, 174, 186, 190], "ner_clin": [43, 105, 106, 129, 162], "nerconvert": [43, 48, 50, 67, 68, 70, 74, 77, 86, 89, 92, 103, 104, 105, 106, 129, 131, 141, 162, 164, 174], "ner_chunk": [43, 48, 50, 53, 55, 67, 68, 70, 72, 74, 77, 78, 85, 88, 89, 92, 101, 103, 104, 105, 106, 127, 129, 131, 136, 141, 153, 162, 164, 169, 174, 186, 201, 202, 219], "clinicalassert": [43, 48, 129, 162], "selectexpr": [43, 44, 47, 48, 50, 52, 53, 55, 65, 71, 74, 75, 77, 78, 86, 89, 94, 95, 96, 103, 104, 105, 106, 110, 129, 132, 136, 141, 145, 158, 162, 165, 169, 174, 179, 191], "truncat": [43, 44, 47, 48, 50, 52, 53, 55, 62, 63, 64, 65, 67, 68, 70, 71, 75, 77, 78, 94, 96, 100, 101, 103, 104, 105, 106, 110, 115, 117, 129, 131, 132, 136, 141, 144, 145, 149, 151, 153, 155, 158, 162, 164, 165, 169, 174, 178, 179, 183, 185, 186, 189, 191], "bytearrai": 43, "assertion_jsl_aug": 43, "lang": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 93, 94, 100, 103, 104, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204], "remote_loc": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 93, 94, 100, 103, 104, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204], "download": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 94, 100, 103, 104, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204, 209, 210], "load": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 74, 77, 78, 83, 86, 90, 94, 100, 104, 106, 109, 114, 115, 131, 135, 136, 141, 142, 144, 145, 149, 150, 151, 153, 155, 156, 158, 164, 168, 169, 174, 175, 178, 179, 183, 184, 185, 186, 189, 190, 191, 193, 204, 207], "remot": [43, 45, 50, 53, 55, 57, 58, 59, 60, 62, 63, 64, 67, 74, 77, 78, 83, 86, 90, 94, 100, 103, 104, 106, 109, 114, 115, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 149, 150, 151, 155, 156, 158, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 183, 184, 185, 189, 190, 191, 204], "resourc": [43, 45, 49, 50, 51, 57, 58, 59, 60, 67, 74, 77, 78, 81, 83, 86, 90, 92, 100, 109, 111, 114, 115, 145, 149, 150, 151, 156, 179, 183, 184, 185, 190, 204], "Will": [43, 45, 50, 57, 58, 59, 60, 67, 74, 77, 78, 83, 86, 100, 109, 114, 115, 149, 150, 151, 183, 184, 185, 190], "repositori": [43, 45, 50, 57, 58, 59, 60, 67, 74, 77, 78, 83, 86, 100, 109, 114, 115, 149, 150, 151, 183, 184, 185, 190], "assertionchunkconvert": 44, "some": [44, 67, 70, 78, 90, 131, 156, 164, 190], "issu": [44, 91, 197, 198], "indic": [44, 50, 83, 86, 100], "robust": [44, 160, 195], "wai": [44, 50], "reliabl": 44, "chunktextcol": 44, "chunkbegincol": 44, "chunkendcol": 44, "outputtokenbegincol": 44, "outputtokenendcol": 44, "convert": [44, 47, 49, 67, 75, 92, 96, 110, 111, 131, 132, 164, 165, 197, 201, 202, 206], "setchunktextcol": 44, "setchunkbegincol": 44, "char_begin": 44, "setchunkendcol": 44, "char_end": 44, "setoutputtokenbegincol": 44, "token_begin": 44, "setoutputtokenendcol": 44, "token_end": 44, "minni": 44, "57": 44, "63": [44, 47, 86, 89, 92], "62": [44, 70, 72], "pcp": [44, 67, 71, 131, 164], "31": [44, 49, 105, 207], "34": [44, 47, 207], "33": 44, "inputcol": [44, 62, 64, 81, 117, 126, 145, 179], "outputcol": [44, 81, 126, 219], "col": [44, 49, 52, 65, 71, 74, 103, 109, 138, 171], "setparam": [44, 68, 75, 81, 110, 122], "assertionlogregapproach": 45, "regress": [45, 57, 58, 59, 62, 64, 144, 146, 178, 180], "done": [45, 90, 145, 156, 179, 190, 202], "assertionlogregmodel": [45, 129, 162], "maxit": [45, 57, 58, 146, 180], "regparam": 45, "enetparam": 45, "elast": 45, "beforeparam": 45, "context": [45, 50, 77, 85, 100, 113, 115, 117, 149, 151, 160, 183, 185, 201, 202], "afterparam": 45, "externalfeatur": 45, "nercol": 45, "sentence_detector": [45, 49, 53, 55, 78, 91, 94, 129, 136, 153, 158, 162, 169, 186, 191, 211], "chunker": [45, 85, 91, 129, 160, 162], "Then": [45, 74, 90, 103, 109, 145, 156, 179, 190], "setreg": 45, "setbefor": 45, "setaft": 45, "13": [45, 67, 71, 95, 96, 131, 164, 207], "labelcol": [45, 57, 58, 109, 138, 146, 171, 180], "setmaxit": [45, 57, 58], "lamda": 45, "setenet": 45, "enet": 45, "setnercol": 45, "settargetnerlabel": 45, "logreg": [45, 57, 58, 146, 180], "logarithm": [45, 57, 58, 146, 180], "obtain": [45, 50, 72, 101, 106, 129, 142, 156, 162, 175, 190, 203], "assertionpretrain": 45, "assertion_ml": 45, "assertiondl": [46, 85, 130, 134, 163, 167], "assertion_chunk_convert": [46, 85], "assertion_dl_reg": [46, 85], "chunk2token": 47, "chunkassembl": [47, 75, 110, 132, 165], "ngramgener": [47, 50], "ngram": [47, 53, 58, 98, 113, 146, 180], "setdelimit": 47, "setn": 47, "setenablecumul": 47, "ngram_token": 47, "year": [47, 50, 67, 71, 77, 86, 89, 92, 95, 131, 159, 164], "old": [47, 50, 67, 71, 86, 89, 90, 92, 103, 104, 131, 156, 159, 164, 190], "man": [47, 86, 89, 92], "hospit": [47, 86, 89, 92, 205], "a_63": 47, "old_man": 47, "14": [47, 67, 68, 71, 131, 164], "man_pres": 47, "18": [47, 67, 71, 109, 115, 131, 151, 164, 185], "28": [47, 50, 159, 207], "presents_to": 47, "27": 47, "to_th": 47, "41": [47, 53, 55, 105, 135, 136, 153, 168, 169, 186], "the_hospit": 47, "42": [47, 52, 207], "hospital_": 47, "assertionfilter": 48, "come": [48, 50, 52, 86, 109, 138, 171], "criteria": [48, 52, 54, 82, 86], "isin": [48, 52, 82], "whitelist": [48, 52, 82, 92], "ignor": [48, 52, 62, 64, 67, 82, 86, 92, 98, 100, 109, 113, 115, 131, 144, 149, 151, 155, 164, 178, 183, 185, 189, 201], "what": [48, 52, 86, 94, 96, 101, 103, 109, 158, 191], "entitiesconfid": [48, 52, 82], "setcriteria": [48, 52, 82], "setwhitelist": [48, 52, 74, 82], "chunksfilt": 48, "casesensit": [48, 62, 64, 65, 144, 155, 178, 189], "definit": [48, 94, 106, 142, 158, 175, 191], "chunkconvert": 49, "regexmatch": [49, 51, 65, 111], "test_data": [49, 111, 202, 207], "my": [49, 94, 145, 158, 179, 191], "rule": [49, 65, 67, 90, 131, 164, 193], "ceremoni": 49, "regex_match": 49, "setexternalrul": [49, 51, 111], "src": [49, 51, 90, 111, 145, 156, 179, 190], "matcher": [49, 111], "txt": [49, 51, 67, 70, 72, 111, 131, 164, 201, 202], "delimit": [49, 86, 92, 113], "outdf": 49, "71": 49, "80": 49, "chunkkeyphraseextract": 50, "kei": [50, 51, 53, 93, 94, 106, 111, 116, 142, 158, 160, 175, 191, 193, 197, 198, 203, 205, 221], "phrase": [50, 91, 100, 149, 183], "bertsentenceembed": [50, 77, 78, 109, 111, 138, 171], "cosin": [50, 53, 79, 109, 138, 171], "represent": [50, 65, 77, 78, 92], "maxim": [50, 78, 103], "margin": [50, 199], "mmr": 50, "setdiverg": 50, "selectmostdiffer": 50, "other": [50, 53, 55, 62, 63, 64, 67, 68, 70, 78, 86, 90, 94, 103, 104, 105, 106, 109, 117, 129, 131, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 161, 162, 164, 168, 169, 171, 174, 175, 178, 179, 180, 189, 191, 201, 202, 205], "too": [50, 90, 117, 156, 190], "broader": 50, "thei": [50, 60, 78, 90, 113, 117, 156, 190, 205], "belong": 50, "understand": 50, "variou": [50, 100, 149, 183], "rank": 50, "gram": [50, 98, 113], "yakekeywordextractor": 50, "yake": 50, "textmatch": 50, "desir": [50, 53, 86, 105, 201], "latter": 50, "topn": [50, 74], "out": [50, 90, 96, 98, 109, 113, 145, 156, 179, 190], "conjunct": 50, "diverg": 50, "aim": [50, 100, 149, 183], "goal": 50, "within": [50, 75, 78, 110, 132, 165], "interv": 50, "higher": [50, 198], "enforc": 50, "ensur": 50, "sole": 50, "constraint": [50, 207], "documentlevelprocess": 50, "row": [50, 51, 207], "rather": [50, 90, 100, 149, 183], "particular": [50, 78, 106, 109, 138, 142, 171, 175], "concatenatesent": 50, "averag": [50, 62, 64, 76, 77, 78], "droppunctu": 50, "punctuat": [50, 96, 201, 202], "ner_tagg": [50, 106], "ner_jsl_slim": 50, "ner_tag": [50, 103, 104, 105, 106, 141, 174], "ner_convert": [50, 53, 55, 68, 74, 78, 92, 106, 136, 153, 169, 186], "key_phrase_extractor": 50, "settopn": 50, "setdocumentlevelprocess": 50, "ner_chunk_key_phras": 50, "her": [50, 77, 94, 158, 191], "becom": [50, 77, 117], "last": [50, 77, 90, 100, 109, 156, 190, 202], "he": [50, 70, 77], "complain": [50, 77], "swell": [50, 77], "hi": [50, 77, 94, 158, 191], "forearm": [50, 77], "explod": [50, 52, 53, 55, 65, 71, 74, 77, 78, 86, 89, 94, 96, 103, 104, 105, 106, 136, 141, 145, 158, 169, 174, 179, 191, 193], "AS": [50, 53, 55, 77, 78, 94, 136, 158, 169, 191], "key_phras": 50, "documentsimilar": 50, "mmrscore": 50, "gestat": 50, "mellitu": 50, "7391447825527298": 50, "4366776288430703": 50, "7323921930094919": 50, "44348688715422274": 50, "13577881610104517": 50, "085800103824974": 50, "setselectmostdiffer": 50, "highest": [50, 83, 86, 98, 100, 113, 115, 149, 151, 183, 185], "setconcatenatesent": 50, "them": [50, 62, 63, 64, 77, 78, 79, 83, 90, 104, 105, 109, 144, 155, 156, 178, 189, 190], "setdroppunctu": 50, "sbert_jsl_medium_uncas": 50, "chunksentencesplitt": 51, "documento": 51, "header": [51, 81, 145, 179, 199, 207], "title_regex": 51, "paragraph": [51, 93], "groupbysent": 51, "insertchunk": 51, "defaultent": 51, "setgroupbysent": 51, "assum": [51, 78, 203], "detector": [51, 201, 202, 211], "setinsertchunk": 51, "insert": 51, "setdefaultent": 51, "chunkfiltererapproach": 52, "chunkfiltererapproachmodel": 52, "blacklist": [52, 67, 82, 86, 92, 131, 164], "filtervalu": [52, 82], "attribut": [52, 72], "confidencethreshold": [52, 219], "past": 52, "histori": 52, "gastroenter": 52, "docassembl": 52, "postagg": [52, 103, 104, 141, 174], "perceptronmodel": [52, 78, 103, 104, 105, 106, 141, 174, 211], "setregexpars": [52, 91], "chunkerfilt": 52, "chunksfilterapproach": 52, "entitiesconfidenceresourc": [52, 86], "setblacklist": [52, 67, 82], "setregex": [52, 82], "dash": [52, 103, 105], "creteria": 52, "setfilterent": 52, "filter_bi": 52, "filterent": 52, "setentitiesconfidenceresourc": [52, 86], "binari": [52, 92, 106, 109, 142, 175], "chunkfilter": 52, "17": [52, 86, 89, 207], "22": [52, 53, 55, 95, 135, 136, 153, 159, 168, 169, 186, 207], "36": 52, "53": 52, "81": [52, 105, 207], "110": [52, 86, 89], "now": 52, "care": [52, 105], "118": 52, "132": 52, "black": [52, 92, 199, 219, 220], "setentitiesconfid": 52, "entities_confid": 52, "chunkmapperfuzzymatchingparam": 53, "fuzzymatch": 53, "enabletokenfingerprintmatch": 53, "enablecharfingerprintmatch": 53, "enablefuzzymatch": 53, "maxtokenngramfingerprint": 53, "mintokenngramfingerprint": 53, "maxtokenngramdroppingtoken": 53, "maxtokenngramdroppingcharsratio": 53, "maxtokenngramdroppingoper": 53, "maxcharngramfingerprint": 53, "mincharngramfingerprint": 53, "fuzzymatchingdist": 53, "fuzzymatchingdistancethreshold": 53, "fuzzydistancescalingmod": 53, "setenabletokenfingerprintmatch": 53, "etfm": [53, 123], "fingerprint": 53, "driven": 53, "three": 53, "maxtokenngramdrop": 53, "setenablecharfingerprintmatch": 53, "ecfm": 53, "char": [53, 67, 90, 131, 156, 164, 190], "setenablefuzzymatch": 53, "efm": 53, "fuzzi": 53, "setmaxtokenngramfingerprint": 53, "mxtnf": 53, "setmintokenngramfingerprint": 53, "mntnf": 53, "min": [53, 58, 146, 180, 199], "setmaxtokenngramdroppingtoken": 53, "etd": 53, "drop": 53, "enabletokenngrammatch": 53, "whenev": 53, "matter": [53, 103], "high": [53, 117, 198], "sy": 53, "maxsiz": 53, "setmaxtokenngramdroppingcharsratio": 53, "amount": [53, 74, 198], "ratio": 53, "setmaxtokenngramdroppingoper": 53, "setmaxcharngramfingerprint": 53, "setmincharngramfingerprint": 53, "minimum": [53, 58, 67, 90, 131, 156, 164, 190, 197], "setfuzzymatchingdist": 53, "fmd": 53, "distanc": [53, 67, 74, 78, 103, 104, 105, 109, 131, 138, 164, 171], "levenshtein": [53, 67, 74, 131, 164], "longest": 53, "jaccard": 53, "setfuzzymatchingdistancethreshold": 53, "fmdth": 53, "setfuzzydistancescalingmod": 53, "fdsm": 53, "mode": [53, 67, 70, 83, 128, 129, 131, 162, 164, 205], "integ": [53, 67, 68, 90, 115, 131, 151, 164, 185, 190, 197, 198, 205], "commonchunkmapperparam": 53, "allowmultitokenchunk": 53, "multivaluesrel": 53, "lowercas": [53, 55, 67, 75, 96, 110, 131, 132, 135, 136, 153, 164, 165, 168, 169, 186, 201, 202], "setallowmultitokenchunk": 53, "mc": 53, "skip": [53, 67, 131, 164], "multitoken": 53, "setmultivaluesrel": 53, "send": 53, "setrel": [53, 55, 136, 153, 169, 186], "lc": 53, "chunkmapperapproach": [53, 135, 153, 168, 186], "mapper": [53, 55, 135, 136, 153, 168, 169, 186], "jsondictionari": [53, 55, 135, 136, 153, 168, 169, 186], "chunkmappermodel": [53, 135, 153, 168, 186], "label_depend": [53, 54, 55, 101, 108, 135, 136, 153, 168, 169, 186], "mappinmg": [53, 55, 135, 136, 153, 168, 169, 186], "go": [53, 55, 135, 136, 153, 168, 169, 186, 198], "decid": [53, 55, 135, 136, 153, 168, 169, 186], "ner_posology_larg": [53, 55, 78, 136, 153, 169, 186], "nerconverterintern": [53, 55, 72, 78, 92, 101, 136, 153, 169, 186, 207], "chunkermapperapproach": [53, 55, 136, 153, 169, 186], "setdictionari": [53, 55, 65, 136, 153, 169, 186], "home": [53, 55, 136, 153, 169, 186], "mappings2": [53, 55, 136, 153, 169, 186], "action": [53, 55, 135, 136, 153, 168, 169, 186], "sampledata": [53, 55, 78, 136, 153, 169, 186], "warfarina": [53, 55, 135, 136, 153, 168, 169, 186], "lusa": [53, 55, 135, 136, 153, 168, 169, 186], "amlodipin": [53, 55, 135, 136, 153, 168, 169, 186], "mg": [53, 55, 78, 135, 136, 153, 168, 169, 186], "35": [53, 55, 105, 135, 136, 153, 168, 169, 186], "analges": [53, 55, 135, 136, 153, 168, 169, 186], "56995": [53, 55, 135, 136, 153, 168, 169, 186], "all_rel": [53, 55, 135, 136, 153, 168, 169, 186], "antipyret": [53, 55, 135, 136, 153, 168, 169, 186], "9989": [53, 55, 135, 136, 153, 168, 169, 186], "55": [53, 55, 135, 136, 153, 168, 169, 186], "56": [53, 55, 135, 136, 153, 168, 169, 186], "9123": [53, 55, 135, 136, 153, 168, 169, 186], "bow": [53, 55, 74, 136, 169], "drug_chunk_embed": [53, 55, 78, 136, 169], "drug_chunk": [53, 55, 78, 136, 169], "drug_embed": [53, 55, 78, 136, 169], "cach": [53, 55, 78, 81, 86, 100, 114, 115, 136, 138, 149, 150, 169, 171, 183, 184, 209], "drug_action_treatment_mapp": [53, 55], "open": [53, 55, 62, 63, 64, 75, 90, 92, 94, 103, 104, 106, 110, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 189, 191], "chunkmapperfilter": 54, "chunkmapp": [54, 56, 85, 134, 137, 167, 170], "successfulli": 54, "returncriteria": 54, "success": 54, "fail": [54, 75, 81, 110, 132, 165], "chunkmapperfilterermodel": 54, "setreturncriteria": 54, "return_criteria": 54, "itself": [54, 86], "docmapperapproach": [55, 136, 169], "docmappermodel": [55, 136, 169], "assertion_filter": [56, 85], "chunk_convert": [56, 85], "chunk_key_phrase_extract": [56, 85], "chunk_sentence_splitt": [56, 85], "chunker_filter": [56, 85], "chunkmapper_filter": [56, 85], "docmapp": [56, 85, 134, 137, 167, 170], "documentlogregclassifierapproach": 57, "classifi": [57, 58, 83, 103, 104, 141, 145, 146, 174, 179, 180, 193], "tol": [57, 58, 146, 180], "converg": [57, 58, 146, 180], "toler": [57, 58, 146, 180], "fitintercept": [57, 58, 146, 180], "intercept": [57, 58, 146, 180], "vectorizationmodelpath": [57, 58, 146, 180], "been": [57, 58, 67, 131, 146, 164, 180], "classificationmodelpath": [57, 58, 146, 180], "could": [57, 58, 65, 74, 145, 146, 179, 180], "like": [57, 58, 65, 67, 131, 145, 146, 164, 179, 180], "stopwords_clean": [57, 58, 146, 180], "stopwordsclean": [57, 58, 146, 180], "cleantoken": [57, 58, 146, 180], "stemmer": [57, 58, 146, 180], "stem": [57, 58, 103, 104, 105, 141, 146, 174, 180], "clf_model": [57, 58, 83, 146, 180], "settol": [57, 58], "dist": [57, 58, 109], "setfitintercept": [57, 58], "setvectorizationmodelpath": [57, 58], "setclassificationmodelpath": [57, 58], "setlabel": [57, 58], "documentlogregclassifiermodel": 57, "mergechunk": [57, 58, 146, 180], "vectorizationmodel": [57, 58, 146, 180], "classificationmodel": [57, 58, 146, 180], "setmergechunk": [57, 58], "setvectorizationmodel": [57, 58], "setclassificationmodel": [57, 58], "classifier_logreg_ad": 57, "documentmlclassifierparam": 58, "mintokenngram": [58, 146, 180], "maxtokenngram": [58, 146, 180], "documentmlclassifierapproach": [58, 146, 180], "classificationmodelclass": [58, 146, 180], "sparkml": [58, 146, 180], "svm": [58, 60, 146, 180], "setclassificationmodelclass": 58, "setmintokenngram": 58, "setmaxtokenngram": 58, "documentmlclassifiermodel": 58, "classifierml_ad": 58, "genericlogregclassifierapproach": 59, "genericlogregclassifi": 59, "multinomi": 59, "logist": [59, 60], "featurevector": [59, 60], "vari": [59, 60], "genericlogregclassifiermodel": 59, "generic_logreg_classifier_ad": 59, "genericsvmclassifierapproach": 60, "svmclassifi": 60, "standard": [60, 96, 116], "genericsvmclassifiermodel": 60, "generic_svm_classifier_ad": 60, "document_log_classifi": [61, 85], "document_ml_classifi": [61, 85], "generic_log_reg_classifi": [61, 85], "generic_svm_classifi": [61, 85], "medical_bert_for_sequence_classif": [61, 85], "medical_bert_for_token_classifi": [61, 85], "medical_distilbert_for_sequence_classif": [61, 85], "medicalbertforsequenceclassif": [62, 64], "medicalbertfortokenclassifi": [62, 63], "head": [62, 63, 64, 90, 144, 155, 156, 178, 189, 190], "pool": [62, 64, 144, 178], "companion": [62, 63, 64, 90, 128, 144, 145, 155, 156, 178, 179, 189, 190], "huggingfac": [62, 63, 64, 144, 155, 178, 189], "maxsentencelength": [62, 63, 64, 144, 155, 178, 189], "tokenclassifi": [62, 63, 144, 155, 178, 189], "felt": [62, 64, 144, 178], "drowsi": [62, 64, 144, 178], "had": [62, 64, 74, 144, 178], "blur": [62, 64, 144, 178], "vision": [62, 64, 144, 178], "aspirin": [62, 64, 96, 144, 178], "coalescesent": [62, 64], "setmaxsentencelength": [62, 63, 64, 111], "getclass": [62, 63, 64, 90, 94, 103, 104, 106], "setcoalescesent": [62, 64], "probabl": [62, 64, 98, 100, 113, 115, 149, 151, 183, 185, 198], "due": [62, 64], "limit": [62, 64, 67, 74, 103], "almost": [62, 64], "512": [62, 64], "help": [62, 64, 67, 109, 117, 131, 164, 205], "loadsavedmodel": [62, 63, 64, 90, 100, 104, 106, 114, 115, 141, 142, 144, 149, 150, 151, 155, 156, 174, 175, 178, 183, 184, 185, 189, 190], "spark_sess": [62, 63, 64, 90, 100, 104, 106, 114, 115, 141, 142, 144, 149, 150, 151, 155, 156, 174, 175, 178, 183, 184, 185, 189, 190], "loadsavedmodelopensourc": [62, 63, 64, 144, 155, 178, 189], "bertfortokenclassifierpath": [62, 63, 64, 144, 155, 178, 189], "tfmodelpath": [62, 63, 64, 144, 155, 178, 189], "bertfortokenclassifi": [62, 63, 64, 144, 155, 178, 189], "taht": [62, 63, 64, 144, 155, 178, 189], "bert_sequence_classifier_ad": 62, "bert_token_classifier_ner_bionlp": [63, 155, 189], "erba": [63, 155, 189], "ir": [63, 131, 155, 189], "myb": [63, 155, 189], "viru": [63, 155, 189], "erythroid": [63, 155, 189], "infect": [63, 155, 189], "bone": [63, 155, 189], "marrow": [63, 155, 189], "blastoderm": [63, 155, 189], "cultur": [63, 155, 189], "tissue_structur": [63, 155, 189], "medicaldistilbertforsequenceclassif": 64, "distilbert": 64, "sequenceclassifi": 64, "distilbertforsequenceclassif": 64, "destilbertfortokenclassifierpath": 64, "distilbert_sequence_classifier_ad": 64, "contextualparserapproach": 65, "setjsonpath": 65, "along": 65, "addition": [65, 90, 117, 156, 190], "unifi": 65, "jsonpath": 65, "prefixandsuffixmatch": 65, "prefix": [65, 74, 82, 90, 92, 156, 190, 221], "suffix": [65, 201], "hit": [65, 201, 202], "tsv": [65, 92], "optionalcontextrul": 65, "regardless": 65, "shortestcontextmatch": 65, "stop": [65, 90, 92, 113, 115, 156, 190, 204], "find": [65, 77, 101, 106, 109, 125], "completecontextmatch": 65, "exact": 65, "parser": [65, 207], "liver": 65, "metastas": 65, "pt1bn0m0": 65, "t5": 65, "primari": 65, "colon": 65, "contextualpars": [65, 86], "regex_token": [65, 211], "39": 65, "confidencevalu": 65, "00": [65, 207], "49": [65, 207], "148": 65, "156": 65, "ct4bcn2m1": 65, "189": 65, "194": 65, "n3m1": 65, "316": 65, "323": 65, "setprefixandsuffixmatch": 65, "setoptionalcontextrul": 65, "setshortestcontextmatch": 65, "setcompletecontextmatch": 65, "boundari": 65, "contextualparsermodel": 65, "mycontextualparsermodel": 65, "contextual_pars": [66, 85], "deidentificationmodel": [67, 72, 131, 164], "obfusc": [67, 68, 70, 71, 72, 82, 131, 164, 205, 213], "mask": [67, 127, 131, 164], "person": [67, 74, 92, 131, 164, 205], "These": [67, 106, 131, 142, 164, 175], "setregexpatternsdictionari": [67, 131, 164], "line": [67, 92, 131, 164, 207, 211], "regexpatternsdictionari": [67, 131, 164], "protect": [67, 131, 164], "anonim": [67, 131, 164], "obfuscated": [67, 131, 164], "dateformat": [67, 131, 164, 205], "obfuscatereffil": [67, 70, 131, 164, 205, 213], "reffileformat": [67, 70, 131, 164], "refsep": [67, 70, 131, 164], "sep": [67, 131, 164, 207], "reffil": [67, 70, 131, 164], "datetag": [67, 131, 164], "dai": [67, 68, 95, 131, 164, 205, 213], "displac": [67, 131, 164, 205], "60": [67, 131, 164, 205], "datetoyear": [67, 131, 164], "minyear": [67, 131, 164], "pars": [67, 68, 131, 164, 207], "consistentobfusc": [67, 131, 164], "sameentitythreshold": [67, 131, 164], "consid": [67, 74, 78, 79, 93, 98, 100, 104, 105, 109, 115, 131, 149, 151, 164, 183, 185, 221], "appear": [67, 77, 78, 101, 131, 164], "9": [67, 103, 109, 131, 164, 207], "obfuscaterefsourc": [67, 70, 131, 164, 205], "doesnt": [67, 131, 164], "tha": [67, 131, 164], "obfuscatorreffil": [67, 131, 164], "faker": [67, 68, 70, 127, 131, 164, 213], "randomli": [67, 90, 131, 156, 164, 190, 201, 202, 205], "regexoverrid": [67, 131, 164], "priorit": [67, 86, 131, 164], "english": [67, 70, 131, 164, 201, 202], "german": [67, 70, 131, 164], "spanish": [67, 70, 131, 164], "fr": [67, 70, 131, 164], "french": [67, 70, 131, 164], "arab": [67, 70, 131, 164], "ro": [67, 70, 131, 164], "romanian": [67, 70, 131, 164], "With": [67, 70, 131, 164], "repli": [67, 70, 131, 164], "ouptut": [67, 131, 164], "ignoreregex": [67, 131, 164], "israndomdatedisplac": [67, 131, 164], "deidentificationparam": [67, 131, 164], "mappingscolumn": [67, 131, 164], "fake": [67, 131, 164], "returnentitymap": [67, 131, 164], "ssn": [67, 131, 164], "passport": [67, 131, 164], "dln": [67, 131, 164], "npi": [67, 131, 164], "c_card": [67, 131, 164], "iban": [67, 131, 164], "dea": [67, 131, 164], "maskingpolici": [67, 131, 164], "polici": [67, 96, 131, 164], "same_length_char": [67, 131, 164], "compos": [67, 131, 164], "asterisk": [67, 131, 164], "surround": [67, 77, 131, 164], "squar": [67, 131, 164], "bracket": [67, 131, 164], "total": [67, 131, 164, 197], "smith": [67, 101, 131, 164], "jo": [67, 131, 164], "fixed_length_char": [67, 131, 164], "fix": [67, 131, 164, 197, 201, 203], "samelengthformattedent": [67, 131, 164], "fax": [67, 131, 164, 205], "idnum": [67, 131, 164], "bioid": [67, 131, 164, 205], "medicalrecord": [67, 131, 164, 205], "zip": [67, 131, 164, 205], "vin": [67, 131, 164], "plate": [67, 131, 164], "selectiveobfuscationmodespath": [67, 131, 164], "mask_same_length_char": [67, 131, 164], "minu": [67, 131, 164], "plu": [67, 131, 164], "mask_entity_label": [67, 131, 164], "mask_fixed_length_char": [67, 131, 164], "invok": [67, 131, 164], "setfixedmasklength": [67, 131, 164], "intact": [67, 131, 164], "deidentifi": [67, 68, 71, 127, 131, 164, 213], "accord": [67, 68, 86, 127, 131, 164, 201], "setmod": [67, 68, 131, 164], "entitycasingmodespath": [67, 131, 164], "uppercas": [67, 131, 164, 201, 202], "upper": [67, 90, 103, 104, 105, 131, 141, 156, 164, 174, 190, 201], "capit": [67, 131, 164, 201, 202], "titlecas": [67, 131, 164], "genderawar": [67, 70, 131, 164], "awar": [67, 70, 131, 164, 202], "might": [67, 70, 90, 131, 156, 164, 190], "decreas": [67, 70, 117, 131, 164], "setuseabbrevi": [67, 70, 131, 164], "clinical_sensitive_ent": [67, 70, 131, 164], "ner_deid_enrich": [67, 70, 131, 164], "ner_con": [67, 131, 164], "dei": [67, 71, 131, 164], "dic_regex_patterns_main_categori": [67, 131, 164], "setobfuscatereffil": [67, 70, 72, 131, 164], "obfuscate_fixed_ent": [67, 131, 164], "setreffileformat": [67, 70, 72, 131, 164], "setrefsep": [67, 70, 72, 131, 164], "setdateformat": [67, 131, 164], "mm": [67, 81, 95, 131, 164, 205, 207], "dd": [67, 81, 95, 131, 164, 205], "yy": [67, 131, 164], "yyyi": [67, 81, 95, 131, 164, 205], "setobfuscated": [67, 68, 131, 164], "setdatetag": [67, 68, 131, 164], "setdai": [67, 131, 164], "setobfuscaterefsourc": [67, 68, 70, 131, 164], "7194334": [67, 71, 131, 164], "93": [67, 71, 131, 164], "oliveira": [67, 71, 131, 164], "record": [67, 71, 131, 164, 205], "2079": [67, 71, 131, 164], "09": [67, 71, 131, 164], "01010101": [67, 71, 131, 164], "dr": [67, 70, 71, 72, 131, 164], "gregori": [67, 71, 131, 164], "hous": [67, 71, 131, 164], "fixedmasklength": [67, 131, 164], "zipcodetag": 67, "useshifdai": 67, "region": [67, 127], "unnormalizeddatemod": 67, "agerang": 67, "outputasdocu": 67, "getblacklist": 67, "setlanguag": [67, 68, 70], "wher": 67, "m": [67, 145, 159, 179, 205], "setmaskingpolici": 67, "f": [67, 70, 81, 126, 159], "setzipcodetag": 67, "zipcod": 67, "auxiliari": [67, 109, 138, 171], "resolv": [67, 108, 109, 138, 171], "setdatetoyear": 67, "setminyear": 67, "setconsistentobfusc": 67, "setsameentitythreshold": 67, "setregexoverrid": 67, "setignoreregex": 67, "setse": [67, 68, 70], "setisrandomdatedisplac": 67, "setmappingscolumn": [67, 71], "setreturnentitymap": 67, "setuseshifdai": [67, 68], "shift": [67, 68, 213], "setregion": 67, "countri": [67, 205], "ountri": 67, "coud": 67, "setunnormalizeddatemod": 67, "setagerang": 67, "preserv": [67, 92], "setoutputasdocu": 67, "join": [67, 119, 197, 201], "setsamelengthformattedent": 67, "getsamelengthformattedent": 67, "setselectiveobfuscationmod": 67, "setentitycasingmod": 67, "setgenderawar": [67, 70], "regexent": [67, 131, 164], "keep": [67, 83, 90, 109, 113, 131, 138, 156, 164, 171, 190, 197, 202], "regexpatterndictionari": [67, 131, 164], "deidentify_larg": [67, 131, 164], "getregexent": 67, "teh": [67, 156, 190], "deidentify_enriched_clin": 67, "documenthashcod": 68, "deidentif": [68, 69, 71, 85, 127, 133, 134, 166, 167, 205, 213], "purpos": [68, 83, 201], "hash": 68, "accordingli": 68, "patientidcolumn": 68, "dateshiftcolumn": 68, "newdateshift": 68, "rangedai": 68, "rang": [68, 90, 156, 190], "patientid": 68, "a001": 68, "a003": 68, "chri": 68, "brown": [68, 219, 220], "discharg": 68, "02": [68, 95], "2022": [68, 159, 207], "04": [68, 95], "03": [68, 95, 105, 207], "moor": 68, "dateshift": [68, 127], "my_input_df": 68, "documenthash": [68, 127], "setdateshiftcolumn": 68, "clinical_n": [68, 72], "ner_deid_subentity_aug": 68, "de_identif": 68, "deid_text": 68, "pipeline_col": 68, "pipeline_col_model": 68, "ellend": 68, "manual": [68, 193], "errol": 68, "bang": 68, "ariel": 68, "null": [68, 207], "jean": 68, "cotton": 68, "2023": [68, 95], "setpatientidcolumn": 68, "predefin": [68, 78], "setnewdateshift": 68, "setrangedai": 68, "doccument_hashcod": [69, 85], "name_obfusc": [69, 85], "reidentif": [69, 85], "namechunkobfuscatorapproach": [70, 72], "namechunkobfusc": [70, 72], "doctor": [70, 205], "seper": [70, 201, 213], "samelength": 70, "nameent": 70, "obfuscator_nam": 70, "replacer_nam": [70, 72], "obfuscated_nam": 70, "setusereplac": [70, 72], "davi": [70, 72], "admit": [70, 72, 101], "seen": [70, 72], "attend": [70, 72], "physician": [70, 72], "lorand": [70, 72], "schedul": [70, 72], "emerg": [70, 72], "assess": [70, 72], "charlestin": 70, "loweri": 70, "setsamelength": 70, "mike": 70, "setnameent": 70, "pretraind": 70, "remain": 70, "reidentifi": 71, "py": [71, 72, 93, 113, 114, 119, 121, 122, 148, 150, 182, 184], "frame": [71, 90, 156, 190, 207], "reideintif": 71, "protectedent": 71, "reid": 71, "redeideintif": 71, "datenorm": [72, 95], "usereplac": 72, "disabl": [72, 100, 149, 159, 183, 207], "ner_deid_generic_aug": 72, "ner_converter_nam": 72, "names_test": 72, "obfuscated_document_nam": 72, "nlppipelin": [72, 74], "model_chunck_obfusc": 72, "sample_text": 72, "mr": 72, "lmodel": 72, "re": [72, 85, 113, 160, 207], "print": [72, 125, 201, 204, 208, 218, 221], "fitzpatrick": 72, "bowman": 72, "acosta": 72, "getusereplac": 72, "ner_disambigu": [73, 85], "nerdisambigu": 74, "interest": 74, "compani": [74, 205], "kb": 74, "ne": [74, 159], "mention": [74, 96], "surfac": 74, "instanti": [74, 90, 145, 156, 179, 190, 207], "embeddingtypeparam": 74, "numfirstchar": 74, "tokensearch": 74, "narrowwithapproximatematch": 74, "narrow": 74, "levenstein": 74, "levenshteindistancethresholdparam": 74, "nearmatchinggapparam": 74, "trim": 74, "candid": 74, "len": 74, "nearmatchinggap": 74, "predictionslimit": 74, "s3knowledgebasenam": 74, "contest": 74, "donald": 74, "trump": 74, "who": [74, 101], "later": 74, "defeat": 74, "christina": 74, "aguilera": 74, "sentenceembed": [74, 145, 179], "nerdlmodel": [74, 77, 90, 156, 190], "sets3knowledgebasenam": 74, "setnumfirstchar": 74, "wikipedia": 74, "curid": 74, "4848272": 74, "31698421": 74, "55907961": 74, "144171": 74, "6636454": 74, "setembeddingtyp": 74, "settokensearch": 74, "setnarrowwithapproximatematch": 74, "setlevenshteindistancethresholdparam": 74, "setnearmatchinggapparam": 74, "setpredictionlimit": 74, "nerdisambiguatormodel": 74, "disambiguator_p": 74, "doc2chunkintern": 75, "chunkcol": [75, 110, 132, 165], "stringtyp": [75, 95, 110, 132, 165], "arraytyp": [75, 110, 132, 165], "setisarrai": [75, 110, 132, 165], "startcolbytokenindex": [75, 110, 132, 165], "prepend": [75, 110, 132, 165], "whitespac": [75, 110, 113, 132, 165, 197, 201], "isarrai": [75, 110, 132, 165], "failonmiss": [75, 110, 132, 165], "job": [75, 110, 132, 165], "chunk2doc": [75, 110, 111, 132, 165], "advanc": [75, 110, 132, 165], "natur": [75, 106, 110, 132, 142, 165, 175], "annotatortyp": [75, 110, 132, 165], "miss": 75, "averageembed": [76, 77], "embded": 76, "bertsentencechunkembed": [77, 79], "account": [77, 159], "numer": [77, 81, 117, 202], "chunkweight": 77, "prerequisit": [77, 90, 156, 190], "medicalnerdlmodel": [77, 90, 156, 190], "sbluebert_base_uncased_mli": 77, "sentence_chunk_embed": 77, "31995273": 77, "04710883": 77, "28973156": 77, "1294758": 77, "12481072": 77, "027161136": 77, "24613449": 77, "0949309": 77, "1825444": 77, "2252143": 77, "45139068": 77, "12400375": 77, "0075617577": 77, "90806055": 77, "12871636": 77, "setchunkweight": 77, "sbiobert_base_cased_mli": [77, 78], "entitychunkembed": 78, "One": [78, 201, 210], "look": 78, "tri": [78, 81], "criterion": [78, 90, 156, 190], "anoth": 78, "syntact": [78, 103, 104, 105, 197], "relationship": [78, 106, 142, 175], "125": 78, "paracetamol": [78, 106], "metformin": 78, "target_ent": 78, "related_ent": 78, "notat": 78, "targetent": [78, 161], "insensit": 78, "entityweight": [78, 161], "3f": 78, "maxsyntacticdist": [78, 103, 105], "pos_clin": [78, 103, 104, 105, 106, 141, 174], "dependency_pars": [78, 105, 106], "dependencyparsermodel": [78, 103, 104, 105, 106, 141, 174], "dependency_conllu": [78, 103, 104, 105, 106, 141, 174], "setmaxsyntacticdist": [78, 103, 104, 105, 106, 141, 174], "settargetent": 78, "setentityweight": 78, "parient": 78, "coumadin": 78, "pill": 78, "sparkcontextfortest": 78, "267413": 78, "07614058": 78, "5620966": 78, "83838946": 78, "8911504": 78, "22319649": 78, "07094894": 78, "6885556": 78, "79176235": 78, "82672405": 78, "10939768": 78, "29242": 78, "3574444": 78, "3981813": 78, "79609615": 78, "weigh": 78, "related1": 78, "related2": 78, "extractivesummar": 79, "summarizaiton": 79, "lexrank": 79, "similaritythreshold": 79, "summarys": 79, "returnsingledocu": 79, "setsimilaritythreshold": 79, "setsummarys": 79, "summar": [79, 113], "setreturnsingledocu": 79, "compil": 79, "average_embed": [80, 85], "bert_sentence_embed": [80, 85], "entity_chunk_embed": [80, 85], "extractive_summar": [80, 85], "featuresassembl": [81, 83], "anyth": [81, 117], "cast": 81, "feature_vector": [81, 83, 216], "timestampformat": 81, "hh": 81, "ss": 81, "zz": 81, "test_jsl": 81, "relfeatur": 81, "withcolumn": 81, "array_column": 81, "words_in_ent1": [81, 207], "words_in_ent2": [81, 207], "features_asm1": 81, "words_between": [81, 207], "features_t": 81, "__data": 81, "filteringparam": 82, "iob": [82, 89, 90, 92, 156, 190, 193, 201, 202, 207, 221], "setdenylist": [82, 92], "setallowlist": [82, 92], "setfiltervalu": 82, "labelcolumn": [83, 90, 117, 145, 156, 179, 190], "epochsn": 83, "proce": [83, 201], "dropou": 83, "lay": 83, "validaiton": 83, "fiximbal": 83, "whenther": 83, "balanc": 83, "trainig": 83, "featuresc": 83, "minmax": 83, "feature_1": 83, "feature_2": 83, "feature_n": 83, "graph_fil": [83, 103], "setmulticlass": 83, "label_column": 83, "drouptup": 83, "validation_split": 83, "mode_fil": 83, "fix_imbal": 83, "feature_sc": 83, "output_logs_path": 83, "genericclassifier_sdoh_housing_insecurity_sbiobert_cased_mli": 83, "deid": [85, 134, 143, 160, 167, 176], "disambigu": [85, 160, 216], "chunk_merg": [85, 87], "iob_tagg": [85, 88], "medical_n": [85, 88], "ner_converter_intern": [85, 88], "ner_template_rend": [85, 88], "zero_shot_n": [85, 88, 154, 157, 187, 188], "date_norm": [85, 97], "drug_norm": [85, 97], "qa": [85, 115, 149, 151, 160, 183, 185], "beam_search_param": [85, 99], "medical_qa": [85, 99], "qa_ner_gener": [85, 99, 143, 152, 176, 181], "relation_extraction_dl": [85, 102, 139, 140, 172, 173], "relation_ner_chunk_filt": [85, 102], "zero_shot_relation_extract": [85, 102, 139, 140, 172, 173], "resolut": [85, 110, 134, 143, 160, 167, 176, 219], "resolver_merg": [85, 107], "sentence_entity_resolv": [85, 107, 134, 137, 167, 170], "seq2seq": [85, 160], "medical_encoder_decod": [85, 112], "medical_summar": [85, 112], "medical_text_gener": [85, 112], "windowed_sent": [85, 118], "annotation_merg": [85, 160], "chunk2_token": [85, 160], "doc2_chunk_intern": [85, 160], "feature_assembl": [85, 160], "filtering_param": [85, 160], "resolution2_chunk": [85, 160], "router": [85, 160], "source_tracking_metadata_param": [85, 160], "tf_graph_build": [85, 160], "mergecommonparam": 86, "mergeoverlap": 86, "setmergeoverlap": 86, "overlap": 86, "mergeprioritizationparam": 86, "orderingfeatur": 86, "selectionstrategi": 86, "defaultconfid": 86, "chunkpreced": 86, "chunkprecedencevaluepriorit": 86, "setorderingfeatur": 86, "chunkbegin": 86, "chunklength": 86, "chunkconfid": 86, "setselectionstrategi": 86, "diverselong": 86, "setdefaultconfid": 86, "setchunkpreced": 86, "comma": [86, 90, 92, 156, 190], "drive": 86, "togeth": [86, 119], "setchunkprecedencevaluepriorit": 86, "mergeresourceparam": 86, "falsepositivesresourc": 86, "replacedictresourc": [86, 92], "setfalsepositivesresourc": 86, "posit": [86, 90, 92, 103, 105, 115, 151, 185, 190, 207], "setreplacedictresourc": [86, 92], "chunkmergeapproach": 86, "merger": 86, "certain": [86, 91], "decis": 86, "kept": 86, "preced": 86, "proccess": [86, 92, 101], "emb": [86, 89], "ner_jsl": [86, 89, 90, 92], "jsl_ner": [86, 92], "jsl_ner_chunk": 86, "ner_bionlp": 86, "bionlp_ner": 86, "bionlp_ner_chunk": 86, "merged_chunk": 86, "19": [86, 89, 115, 151, 185, 207], "72": [86, 89], "98": [86, 89], "107": [86, 89], "cellul": [86, 89], "diagnosi": [86, 89], "119": [86, 89], "pneumonia": [86, 89], "chunkmergemodel": 86, "chunkmergeraproach": 86, "iobtagg": 89, "bioe": 89, "iobtaggermodel": 89, "setschem": 89, "bilstm": [90, 156, 190], "art": [90, 145, 156, 179, 190], "2003": [90, 156, 190], "chosen": [90, 156, 190, 202], "bertembed": [90, 109, 138, 156, 171, 190], "minepoch": [90, 156, 190], "maxepoch": [90, 145, 156, 179, 190], "randomse": [90, 93, 113, 115, 145, 151, 156, 179, 185, 190], "reproduc": [90, 115, 151, 185, 190], "decai": [90, 117, 156, 190], "coeffici": [90, 145, 156, 179, 190], "005": [90, 145, 156, 179, 190], "adequ": [90, 156, 190], "blstn_": [90, 156, 190], "embedding_dim": [90, 156, 190], "exactli": [90, 156, 190, 201], "greater": [90, 109, 156, 190], "satisfi": [90, 156, 190], "ill": [90, 156, 190], "occur": [90, 98, 113, 156, 190, 205], "usecontrib": [90, 156, 190], "Not": [90, 156, 190], "slightli": [90, 156, 190], "choos": [90, 129, 145, 156, 162, 179, 190], "hold": [90, 103, 156, 190], "evaluationlogextend": [90, 129, 156, 162, 190], "parquet": [90, 156, 190], "includeallconfidencescor": [90, 156, 190], "slow": [90, 117, 156, 190], "down": [90, 117, 156, 190], "speed": 90, "stdout": [90, 145, 156, 179, 190], "enablememoryoptim": [90, 156, 190], "practic": [90, 156, 190], "slower": [90, 156, 190], "evei": [90, 156, 190], "bach": [90, 156, 190], "tagsmap": [90, 156, 190], "oldtag": [90, 156, 190], "newtag": [90, 156, 190], "vip": [90, 156, 190], "overrideexistingtag": 90, "earlystoppingpati": [90, 156, 190], "wait": [90, 156, 190], "earli": [90, 156, 190], "earlystoppingcriterion": [90, 156, 190], "soon": [90, 156, 190], "met": [90, 156, 190], "patienc": [90, 156, 190], "f1": [90, 156, 190, 203, 208, 218, 221], "socr": [90, 156, 190], "prioriti": [90, 116, 156, 190], "infin": [90, 156, 190], "pretrainedmodelpath": [90, 103, 109, 138, 156, 171, 190], "point": [90, 103, 109, 138, 156, 171, 190], "logprefix": [90, 156, 190], "append": [90, 106, 142, 156, 175, 190], "usebestmodel": [90, 156, 190], "overrid": [90, 93, 103, 109, 138, 171], "sentencetokenindex": 90, "thu": [90, 156, 190, 193], "trainingdata": [90, 156, 190], "readdataset": [90, 156, 190, 207], "conll2003": [90, 156, 190], "eng": [90, 156, 190, 207], "randomvalidationsplitperepoch": 90, "setusecontrib": 90, "setlr": [90, 145, 179], "setpo": 90, "rage": [90, 156], "setincludeallconfidencescor": 90, "setusebestmodel": 90, "across": 90, "setlogprefix": 90, "setpretrainedmodelpath": [90, 103, 109], "setoverrideexistingtag": [90, 156, 190], "settagsmap": 90, "setearlystoppingcriterion": 90, "setearlystoppingpati": 90, "termin": [90, 100], "setrandomvalidationsplitperepoch": 90, "setsentencetokenindex": 90, "nerdlapproach": [90, 117, 156, 190, 198], "wordembed": [90, 156, 190], "glove_100d": [90, 156, 190], "inferencebatchs": [90, 156, 190], "labelcas": [90, 156, 190], "offici": [90, 156, 190], "ekeu": [90, 156, 190], "baghdad": [90, 156, 190], "trainingclassdistribut": 90, "setinferencebatchs": 90, "setlabelcas": 90, "gettrainingclassdistribut": 90, "nerchunk": [91, 103, 104, 141, 174], "neighbor": [91, 119], "dt": 91, "jj": 91, "ner_radiologi": 91, "imagingfind": 91, "bodypart": 91, "regexpars": 91, "commonnerconverterinternalparam": 92, "preserveposit": 92, "greedymod": 92, "contigu": 92, "ignorestopword": 92, "larger": 92, "loc": [92, 221], "setpreserveposit": 92, "preserve_posit": 92, "setgreedymod": 92, "greedy_mod": 92, "setthreshold": [92, 109, 138, 171], "setignorestopword": 92, "stopword": 92, "iob2": [92, 201, 202], "friendli": 92, "annotatorapproach": 92, "nerconverterinternalmodel": 92, "associ": [92, 105, 109], "outsid": 92, "replacelabel": 92, "substitut": 92, "replaced_ner_chunk": 92, "setreplacelabel": 92, "drug_brandnam": 92, "drug_frequ": 92, "drug_dosag": 92, "drug_strength": 92, "nertemplaterendermodel": 93, "scala": [93, 101, 113, 114, 119, 121, 122, 148, 150, 182, 184], "inherit": [93, 113, 114, 119, 122, 148, 150, 182, 184], "mix": [93, 113, 114, 119, 122, 148, 150, 182, 184], "ins": [93, 113, 114, 119, 122, 148, 150, 182, 184], "uid": [93, 113, 114, 119, 122, 148, 150, 182, 184, 192], "templat": [93, 100, 106, 115, 142, 149, 151, 175, 183, 185], "entityscop": 93, "resampleent": 93, "combineent": 93, "permuteent": 93, "settempl": 93, "liststr": 93, "setentityscop": 93, "render": 93, "setresampleent": 93, "resampl": 93, "enough": 93, "setcombineent": 93, "setpermuteent": 93, "permut": 93, "even": 93, "zeroshotnermodel": [94, 158, 191], "shot": [94, 106, 142, 158, 175, 191], "robertaforquestionansw": [94, 158, 191], "entitydefinit": [94, 158, 191], "question": [94, 100, 101, 149, 158, 183, 191], "citi": [94, 111, 158, 191, 205], "town": [94, 158, 191], "predictionthreshold": [94, 103, 104, 106, 141, 142, 158, 174, 175, 191], "01f": [94, 158, 191], "ignoreent": [94, 158, 191], "setentitydefinit": [94, 158, 191], "clara": [94, 158, 191], "live": [94, 158, 191, 205], "york": [94, 158, 191], "hellen": [94, 158, 191], "pari": [94, 158, 191], "5328949": [94, 158, 191], "9360068": [94, 158, 191], "83294415": [94, 158, 191], "45366877": [94, 158, 191], "setpredictionthreshold": [94, 103, 104, 141, 174], "zero_shot_ner_roberta": 94, "els": 95, "anchordateyear": 95, "anchor": 95, "tomorrow": 95, "2021": [95, 105, 159], "anchordatemonth": 95, "month": 95, "januari": 95, "anchordatedai": 95, "08": 95, "12mar2021": 95, "jan": 95, "3april": 95, "2020": [95, 159], "mondai": [95, 145, 179], "todai": 95, "week": 95, "original_d": 95, "date_chunk": 95, "setanchordateyear": 95, "2000": 95, "setanchordatemonth": 95, "setanchordatedai": 95, "normalized_d": 95, "outputdateformat": 95, "defaultreplacementdai": 95, "defaultreplacementmonth": 95, "defaultreplacementyear": 95, "setoutputdateformat": 95, "setdefaultreplacementdai": 95, "setdefaultreplacementmonth": 95, "06": 95, "setdefaultreplacementyear": 95, "drugnorm": 96, "apac": 96, "discuss": 96, "blog": 96, "post": 96, "abbrevi": 96, "oral": 96, "sol": 96, "solut": 96, "million": [96, 115, 151, 185], "10000000": 96, "unt": 96, "sodium": 96, "chlorid": 96, "potassium": 96, "13bag": 96, "interferon": 96, "alfa": 96, "2b": 96, "injec": 96, "meq": 96, "document_norm": 96, "trainingpipelin": 96, "normalized_text": [96, 109, 138, 171], "bag": 96, "inject": 96, "setpolici": 96, "beamsearchparam": 98, "maxcontextlength": [98, 100, 115, 149, 151, 183, 185], "dosampl": [98, 100, 113, 115, 149, 151, 183, 185], "topk": [98, 100, 113, 115, 149, 151, 183, 185], "ignoretokenid": [98, 100, 113, 115, 149, 151, 183, 185], "maxnewtoken": [98, 100, 113, 115, 149, 151, 183, 185], "norepeatngrams": [98, 100, 113, 115, 149, 151, 183, 185], "setignoretokenid": [98, 113], "decod": [98, 100, 113, 115, 149, 151, 183, 185], "setmaxcontextlength": 98, "setdosampl": [98, 113], "greedi": [98, 100, 113, 115, 149, 151, 183, 185], "settopk": [98, 113], "vocabulari": [98, 100, 113, 115, 149, 151, 183, 185], "setmaxnewtoken": [98, 100, 113, 115, 149, 151, 183, 185], "setnorepeatngrams": [98, 113], "medicalquestionansw": [100, 149, 183], "gpt": [100, 115, 149, 151, 183, 185], "answer": [100, 101, 115, 149, 151, 183, 185], "span": [100, 149, 183], "capabl": [100, 149, 183], "ye": [100, 149, 183], "questiontyp": [100, 149, 183], "card": [100, 149, 183], "repeat": [100, 115, 149, 151, 183, 185, 199], "prevent": [100, 115, 117, 149, 151, 183, 185], "customprompt": [100, 115, 149, 151, 183, 185], "prompt": [100, 115, 149, 151, 183, 185], "usecach": [100, 113, 115, 149, 183], "spare": [100, 149, 183], "studi": [100, 149, 183], "failur": [100, 109, 149, 183], "breast": [100, 149, 183], "cancer": [100, 106, 149, 183], "chest": [100, 149, 183], "wall": [100, 149, 183], "irradi": [100, 149, 183], "mastectomi": [100, 149, 183], "multidocumentassembl": [100, 149, 183], "document_quest": [100, 149, 183], "document_context": [100, 149, 183], "med_qa": [100, 149, 183], "medical_qa_biogpt": [100, 149, 183], "setquestiontyp": [100, 149, 183], "setusecach": [100, 115], "setcustomprompt": [100, 115], "setquestionanswertermin": 100, "questiontermin": 100, "symbol": [100, 219], "setquestionprompt": 100, "questionprompt": 100, "setquestionskiplasttoken": 100, "questionskiplasttoken": 100, "getquestiontyp": 100, "loadmedicaltextgener": 100, "med_text_generator_path": 100, "medicaltextgener": [100, 115, 151, 185], "flan_t5_base_jsl_qa": 100, "nerquestiongener": 101, "pronoun": 101, "questionpronoun": 101, "questionmark": 101, "questionanswer": 101, "why": 101, "strategytyp": 101, "entities1": 101, "entities2": 101, "qagener": 101, "setquestionmark": 101, "setquestionpronoun": 101, "setstrategytyp": 101, "setentities1": 101, "setentities2": 101, "admiss": 101, "zeroshotn": 101, "align": [101, 199, 201], "third": 101, "relationextractionmodel": [103, 104, 141, 174], "tensorflow_graph": 103, "relationdirectioncol": 103, "decript": 103, "fromentitybegincol": 103, "fromentityendcol": 103, "fromentitylabelcol": 103, "toentitybegincol": 103, "toentityendcol": 103, "toentitylabelcol": 103, "leftward": 103, "rightward": 103, "symmetr": 103, "embedd": [103, 104, 141, 174], "postag": [103, 104, 141, 174], "ner_events_clin": [103, 104, 141, 174], "depencypars": [103, 104, 141, 174], "relations_t": 103, "target_rel": 103, "05": 103, "from_begin": 103, "from_end": 103, "from_label": 103, "to_begin": 103, "to_end": 103, "to_label": 103, "traindata": [103, 104, 141, 174], "customlabel": [103, 104, 161], "overrideexistinglabel": 103, "begin_col": 103, "label_col": [103, 128], "setcustomlabel": [103, 104], "setrelationdirectioncol": 103, "set\u043everrideexistinglabel": 103, "annotatormodel": 103, "relationpair": [103, 104, 105, 141, 174], "biomark": 103, "relativedai": 103, "relationpairscasesensit": [103, 105], "relationtypeperpair": 103, "caus": 103, "problem": [103, 105, 106, 117, 142, 175, 207], "symtom": 103, "external_body_part_or_region": [103, 104, 105, 141, 174], "internal_organ_or_compon": [103, 104, 105, 141, 174], "re_model": [103, 104, 106, 141, 174], "re_bodypart_direct": 103, "setrelationpair": [103, 104, 105, 106, 141, 174], "mri": [103, 104, 105, 106, 141, 174], "demonstr": [103, 104, 105, 141, 174], "infarct": [103, 104, 105, 141, 174], "brain": [103, 104, 105, 141, 174], "cerebellum": [103, 104, 105, 141, 174], "basil": [103, 104, 105, 141, 174], "ganglia": [103, 104, 105, 141, 174], "chunk1": [103, 104, 141, 174, 207], "chunk2": [103, 104, 141, 174, 207], "far": [103, 105], "increas": [103, 105, 113, 117], "recal": [103, 208, 218, 221], "setrelationpairscasesensit": [103, 105], "setrelationtypeperpair": 103, "relationtypepair": 103, "getrelationtypeperpair": 103, "posology_r": 103, "posologyremodel": 103, "posologi": 103, "genericremodel": 103, "relationextractiondlmodel": [104, 105, 141, 174], "contrast": [104, 141, 174], "re_ner_chunk_filt": [104, 105, 106, 141, 174], "renerchunksfilt": [104, 105, 106, 141, 142, 174, 175], "re_ner_chunk": [104, 105, 106, 141, 174], "redl_bodypart_direction_biobert": [104, 141, 174], "redl_ade_biobert": 104, "realtionpair": 105, "advers": 105, "reaction": 105, "realat": 105, "further": 105, "ner_clinical_en": 105, "html": 105, "analyz": 105, "awai": 105, "doclevelrel": 105, "words_embedd": [105, 106], "pos_tagg": [105, 106], "clinical_ner_tagg": 105, "jsl_ner_wip_greedy_clin": 105, "trained_pipelin": 105, "cre": 105, "re_chunk": 105, "paired_to": 105, "59": 105, "setdoclevelrel": [105, 106], "zeroshotrelationextractionmodel": [106, 142, 175], "util": [106, 142, 160, 175, 195, 196, 200, 205], "nli": [106, 142, 175], "statement": [106, 142, 175], "regard": [106, 142, 175], "relationalcategori": [106, 142, 161, 175], "hypothesi": [106, 142, 175], "cure": [106, 142, 175], "5f": [106, 142, 175], "multilabel": [106, 142, 175], "categor": [106, 142, 175], "spark_sbert_zero_shot": 106, "setrelationalcategori": 106, "reveal": [106, 142, 175], "setmultilabel": 106, "allevi": 106, "headach": 106, "sick": 106, "9760039": [106, 142, 175], "98819494": [106, 142, 175], "9929625": [106, 142, 175], "negativerelationship": 106, "setnegativerelationship": 106, "serv": 106, "zero_shot_r": 106, "resolvermerg": 108, "enit": 108, "sentenceresolverparam": 109, "famili": 109, "distancefunct": 109, "mover": 109, "wmd": 109, "euclidean": 109, "neighbour": 109, "knn": 109, "algorithmm": 109, "queri": 109, "tree": [109, 138, 171], "nearest": 109, "confidencefunct": 109, "invers": 109, "missasempti": 109, "unmatch": 109, "setdistancefunct": [109, 138, 171], "setneighbour": [109, 138, 171], "algorithmn": 109, "thre": 109, "setconfidencefunct": 109, "conf_funct": 109, "setmissasempti": 109, "sentenceentityresolverapproach": [109, 138, 171], "sentenceentityresolvermodel": [109, 138, 171], "standart": 109, "aux_label": 109, "better": [109, 117], "overrideexistingcod": [109, 138, 171], "unwant": 109, "dropcodeslist": [109, 138, 171], "flavour": 109, "normalizedcol": [109, 138, 171], "returncosinedist": [109, 138, 171], "aux_label_col": [109, 138, 171], "useauxlabel": [109, 138, 171], "omit": [109, 138, 171], "conceptid": 109, "concept": 109, "snome": [109, 138, 171], "concept_nam": 109, "108367008": 109, "disloc": 109, "joint": 109, "3384011000036100": 109, "arthrotec": 109, "166717003": 109, "serum": 109, "creatinin": 109, "3877011000036101": 109, "lipitor": 109, "402234004": 109, "foot": 109, "eczema": 109, "36031001": 109, "burn": 109, "feet": 109, "76948002": 109, "42399005": 109, "renal": [109, 159], "sent_biobert_pubmed_base_cas": [109, 138, 171], "data_pipelin": 109, "data_processing_model": 109, "prepared_data": 109, "bertextractor": [109, 138, 171], "bert_embed": [109, 138, 171], "setnormalizedcol": [109, 138, 171], "snomed_cod": [109, 138, 171], "euclidian": [109, 138, 171], "setuseauxlabel": 109, "setauxlabelcol": 109, "snomedmodel": [109, 138, 171], "auxlabel": [109, 138, 171], "setextractcosinedist": 109, "setoverrideexistingcod": 109, "setdropcodeslist": 109, "leav": 109, "ontologi": [109, 138, 171], "curat": [109, 138, 171], "rxnorm": [109, 138, 171], "searchtre": [109, 138, 171], "structfeature_hadoopfix": 109, "encapsul": 109, "serializablekdtre": 109, "multidimension": 109, "approch": 109, "jon": 109, "loui": 109, "bentlei": 109, "1975": 109, "commun": [109, 159], "acm": 109, "sept": 109, "509": 109, "517": 109, "doi": 109, "1145": 109, "361002": 109, "361007": 109, "sbertresolve_icd10cm_slim_billable_hcc_m": 109, "icd10_cod": 109, "icd10extractorpipelin": 109, "icd10model": 109, "setsearchtre": 109, "search_tre": 109, "usuali": 109, "kdtree": 109, "sbiobertresolve_icd10cm_augmented_billable_hcc": 109, "resolution2chunk": 110, "filterfieldsel": 111, "metadatafield": 111, "rules2": 111, "setstrategi": 111, "match_al": 111, "doc_chunk": 111, "sent_small_bert_l2_128": 111, "router_name_embed": 111, "setmetadatafield": 111, "setfilterfieldsel": 111, "names_embed": 111, "router_city_embed": 111, "cities_embed": 111, "router_nam": 111, "names_chunk": 111, "medicalencoderdecod": 113, "stopateo": [113, 115], "maxtextlength": [113, 115], "refinesummari": 113, "refinesummarytargetlength": 113, "refinechunks": 113, "refinemaxattempt": 113, "setrefinesummari": 113, "refin": 113, "cost": 113, "summari": 113, "setrefinesummarytargetlength": 113, "setrefinechunks": 113, "Be": 113, "llm": 113, "setrefinemaxattempt": 113, "summarytargetlength": 113, "setstopateo": [113, 115], "encount": [113, 115], "setmaxtextlength": [113, 115], "medicalsummar": 114, "use_cach": [114, 150, 184], "facilit": [114, 150, 184], "summarizer_clinical_jsl_aug": 114, "popul": [115, 151, 185], "covid": [115, 151, 185], "document_prompt": [115, 151, 185], "med_text_gener": [115, 151, 185], "convid": [115, 151, 185], "pandem": [115, 151, 185], "peopl": [115, 151, 185], "worldwid": [115, 151, 185], "modeltyp": 115, "model_typ": [115, 151, 185], "text_generator_biomedical_biogpt_bas": 115, "sourcetrackingmetadataparam": 116, "includeoutputcolumn": 116, "outputcolumnkei": 116, "includestandardfield": 116, "standardfieldkei": 116, "allpossiblefieldstostandard": 116, "setincludeoutputcolumn": 116, "setoutputcolumnkei": 116, "setincludestandardfield": 116, "setstandardfieldkei": 116, "setallpossiblefieldstostandard": 116, "tfgraphbuildermodel": 117, "sinc": [117, 209], "seri": [117, 198, 201, 202], "edg": 117, "biggest": 117, "about": [117, 201], "backbon": 117, "program": 117, "graph_fold": 117, "re_graph_fold": 117, "setmodelnam": 117, "re_graph": 117, "sethiddenlay": 117, "sethiddenact": 117, "sethiddenactl2": 117, "sethiddenweightsl2": 117, "setbatchnorm": 117, "modelnam": 117, "hiddenunitsnumb": 117, "hiddenlay": 117, "maxsequencelength": 117, "hiddenact": 117, "hiddenactl2": 117, "hiddenweightsl2": 117, "batchnorm": 117, "islicens": 117, "userelationdirect": 117, "outputact": 117, "gethiddenact": 117, "l2": 117, "aka": 117, "techniqu": 117, "overfit": 117, "involv": 117, "encourag": 117, "gethiddenactl2": 117, "gethiddenweightsl2": 117, "stabil": 117, "getbatchnorm": 117, "setislicens": 117, "medicalneraprroach": 117, "getislicens": 117, "neuron": 117, "gethiddenlay": 117, "hiudden": 117, "setmaxsequencelength": 117, "handl": 117, "low": 117, "potenti": 117, "lose": 117, "valuabl": 117, "On": 117, "hand": 117, "consum": 117, "excess": 117, "getmaxsequencelength": 117, "sethiddenunitsnumb": 117, "solv": 117, "gethiddenunitsnumb": 117, "setuserelationdirect": 117, "getuserelationdirect": 117, "settoutputact": 117, "getoutputact": 117, "getmodelnam": 117, "getlabelcolumn": 117, "getinputcol": 117, "getgraphfold": 117, "greaph": 117, "getgraphfil": 117, "windowedparam": 119, "windows": 119, "gluestr": 119, "setwindows": 119, "slide": 119, "setgluestr": 119, "windowedsentencemodel": 119, "annotatorapproachintern": 121, "estim": 121, "annotatormodelintern": 122, "annotatorpropertiesintern": 123, "compon": 123, "attach": 123, "setforceinputtypevalid": 123, "inputcolsvalid": 123, "annotator_approach_intern": [124, 160], "annotator_model_intern": [124, 160], "annotator_properties_intern": [124, 160], "verifi": 125, "findvers": 125, "privat": [125, 204], "showvers": 125, "customtransform": 126, "custom_pipelin": 127, "masking_polici": 127, "fixed_mask_length": 127, "obfuscate_d": 127, "obfuscate_ref_sourc": 127, "obfuscate_ref_file_path": 127, "age_group_obfusc": 127, "age_rang": 127, "shift_dai": [127, 213], "number_of_dai": 127, "documenthashcoder_col_nam": 127, "date_tag": 127, "unnormalized_d": 127, "unnormalized_mod": 127, "id_column_nam": 127, "date_shift_column_nam": 127, "multi_mode_file_path": 127, "domain": 127, "input_file_path": [127, 213], "output_file_path": [127, 213], "deid_with_custom_pipelin": 127, "pretrained_pipelin": 127, "deid_with_pretrained_pipelin": 127, "norvigspellevalu": 128, "test_fil": 128, "ground_truth_fil": 128, "computeaccuracyannot": 128, "train_fil": 128, "computeaccuracymodel": 128, "symspellevalu": 128, "nerdlevalu": 128, "tag_level": 128, "full_chunk": 128, "computemetricsfromdf": 128, "prediction_col": 128, "drop_o": 128, "case_sensit": [128, 207], "nercrfevalu": 128, "posevalu": 128, "olumn": [129, 162], "eval": [129, 160, 162], "finassertiondl_time_md": 129, "finner_deid": 131, "financedocumenthashcod": 132, "setidcolumn": [132, 165], "document_hashcod": [133, 134, 166, 167], "finmapper_edgar_companynam": 135, "snomedtrainingpipelin": [138, 171], "snomedtrainingmodel": [138, 171], "snomeddata": [138, 171], "thiu": 138, "finel_edgar_company_nam": 138, "finre_financial_smal": 141, "finre_zero_shot": 142, "chunk_classif": [143, 160, 176], "sequence_classif": [143, 160, 176], "finance_bert_for_sequence_classif": [143, 147], "finance_classifier_dl": [143, 147], "finance_document_ml_classifi": [143, 147], "sequence_gener": [143, 160, 176], "finance_encoder_decod": [143, 152], "finance_qa": [143, 152], "finance_summar": [143, 152], "finance_text_gener": [143, 152], "token_classif": [143, 160, 176], "financebertforsequenceclassif": 144, "financebertfortokenclassif": [144, 155], "finclf_bert_banking77": 144, "financeclassifierdlapproach": 145, "classifierdl": [145, 179], "univers": [145, 179], "dnn": [145, 179], "classifierdlmodel": [145, 179], "multiclassifierdlapproach": [145, 179], "sentimentdlapproach": [145, 179], "item": [145, 179, 199, 211], "doubl": [145, 179], "universalsentenceencod": [145, 179], "movi": [145, 179], "wach": [145, 179], "ever": [145, 179], "opinion": [145, 179], "win": [145, 179], "award": [145, 179], "terribl": [145, 179], "bad": [145, 179], "realli": [145, 179], "trane": [145, 179], "smallcorpu": [145, 179], "useembed": [145, 179], "docclassifi": [145, 179], "classifierdlapproach": [145, 179], "5e": [145, 179], "financeclassifierdlmodel": [145, 146], "financeclassifierdl": 145, "classifierdl_use_trec6": [145, 179], "trec": [145, 179], "multiclassifierdlmodel": [145, 179], "sentimentdlmodel": [145, 179], "sarcasmdl": [145, 179], "classifierdl_use_sarcasm": [145, 179], "sarcasm": [145, 179], "readi": [145, 179], "love": [145, 179], "wake": [145, 179], "am": [145, 179], "arrays_zip": [145, 179], "finclf_sec_fil": 145, "financedocumentmlclassifierapproach": 146, "financedocumentmlclassifiermodel": [146, 180], "financeencoderdecod": 148, "financequestionansw": 149, "biogpt_pubmed_qa": [149, 183], "financesummar": 150, "finsum_flant5_finetuned_sec10k": 150, "financetextgener": 151, "fingen_flant5_finetuned_sec10k": 151, "financenerquestiongener": 153, "finance_bert_for_token_classifi": [154, 157], "finance_n": [154, 157], "financebertfortokenclassifi": 155, "finner_responsibility_report": 155, "financenerapproach": 156, "usa": [156, 190], "verif": [156, 190], "greather": [156, 190], "financenermodel": [156, 190], "finner_sec_10k_summari": 156, "finner_roberta_zeroshot": 158, "profil": 159, "code_arrai": 159, "sex": 159, "elig": 159, "cna": 159, "orec": 159, "medicaid": 159, "cm": 159, "hcc": 159, "intens": 159, "adjust": 159, "icd10": 159, "segment": 159, "cfa": 159, "benefit": 159, "dual": 159, "cfd": 159, "nondual": 159, "cnd": 159, "cpa": 159, "cpd": 159, "INS": 159, "institut": 159, "enrolle": 159, "snpne": 159, "snp": 159, "reason": 159, "entitl": 159, "survivor": 159, "insur": 159, "diseas": 159, "dib": 159, "esrd": 159, "profileesrdv21y19": 159, "di": 159, "21": [159, 207], "2019": 159, "gc": 159, "gi": 159, "dne": 159, "gne": 159, "profilev28": 159, "profilev28y24": 159, "2024": 159, "profilev24y17": 159, "24": 159, "profilev24y18": 159, "profilev24y19": 159, "profilev24y20": 159, "profilev24y21": 159, "profilev24y22": 159, "profilev24": 159, "profilev23y18": 159, "profilev23y19": 159, "profilev23": 159, "profilev22y17": 159, "profilev22y18": 159, "profilev22y19": 159, "profilev22y20": 159, "profilev22y21": 159, "profilev22y22": 159, "profilev22": 159, "nlp_test": 160, "noisy_label": [160, 195], "alab_util": [160, 215], "conll_pars": [160, 215], "deidentification_util": [160, 215], "licensed_annotator_typ": [160, 215], "log_pars": [160, 215], "ner_util": [160, 215], "ocr_nlp_processor": [160, 215], "ocr_util": [160, 215], "training_log_parser_util": [160, 215], "alab": [160, 211], "custom_transform": 160, "deidentification_modul": 160, "modeltrac": 160, "structured_deidentif": 160, "text_to_documents_column": 160, "training_log_pars": 160, "updatemodel": 160, "transformer_seq_classif": 160, "version_regex": 160, "size_regex": 160, "apple_silicon": 160, "aarch64": 160, "public": 160, "m1": 160, "get_credenti": 160, "secretkei": 160, "keyid": 160, "pub_vers": 160, "library_set": 160, "legassertion_time_md": 162, "legner_deid": 164, "legaldocumenthashcod": 165, "legmapper_edgar_companynam": 168, "legel_edgar_company_nam": 171, "legre_contract_doc_parti": 174, "legre_zero_shot": 175, "legal_bert_for_sequence_classif": [176, 177], "legal_classifier_dl": [176, 177], "legal_document_ml_classifi": [176, 177], "legal_encoder_decod": [176, 181], "legal_qa": [176, 181], "legal_summar": [176, 181], "legal_text_gener": [176, 181], "legalbertforsequenceclassif": 178, "legalbertfortokenclassif": [178, 189], "legclf_reddit_advic": 178, "legalclassifierdlapproach": 179, "legalclassifierdlmodel": [179, 180], "legalclassifierdl": 179, "legclf_argument_min": 179, "legaldocumentmlclassifierapproach": 180, "legaldocumentmlclassifiermodel": 180, "legalencoderdecod": 182, "legalquestionansw": 183, "legalsummar": 184, "legsum_flant5_legal_aug": 184, "legaltextgener": 185, "leggen_flant5_finetun": 185, "legalnerquestiongener": 186, "legal_bert_for_token_classifi": [187, 188], "legal_n": [187, 188], "legalbertfortokenclassifi": 189, "legner_bert_gr": 189, "legalnerapproach": 190, "legalnermodel": 190, "legner_contract_doc_parties_lg": 190, "legner_roberta_zeroshot": 191, "adduidcol": 192, "timestamp": 192, "init_medical_gender_classifi": 193, "rulebasedclassifi": 193, "test_gender_bia": 193, "ner_pipelin": [193, 207, 219], "test_conl": 193, "classifier_pipelin": 193, "training_conl": 193, "log_path": [193, 198, 201, 202, 208, 218], "gender_bias_result": 193, "explode_sent": 193, "pass": [193, 197, 201], "doc_amount": 193, "training_set_gender_distribut": 193, "test_set_gender_distribut": 193, "test_set_metr": 193, "bias_test": [194, 195], "noisy_label_fix": [195, 196], "noisy_label_test": [195, 196], "robustness_fix": [195, 200], "robustness_test": [195, 200], "conll_read": [197, 201], "conll_writ": 197, "chunk_tag": [197, 221], "save_path": 197, "docs_indx": 197, "sentences_list": 197, "tags_list": 197, "labels_list": 197, "track": 197, "written": 197, "update_with_model_predict": 197, "fix_df": 197, "test_label_error": [197, 198], "sent_indx": 197, "token_indx": 197, "apply_label_fix": 197, "label_fix": 197, "sent_index": 197, "add_flag_to_conl": 197, "flag_index": 197, "speech": 197, "interactivefix": 197, "result_df": 197, "default_strategi": 197, "page_s": 197, "ui": 197, "jupyt": 197, "notebook": 197, "find_label_error": 197, "displai": [197, 199], "create_grid": 197, "fill_grid": 197, "ipywidget": 197, "gridspeclayout": 197, "get_head": 197, "get_central_grid": 197, "get_foot": 197, "get_page_control_button": 197, "next_pag": 197, "prev_pag": 197, "adjust_page_s": 197, "num_sample_drop_down": 197, "get_page_numb": 197, "empty_grid": 197, "get_class": 197, "fix_label": 197, "apply_fix": 197, "fix_al": 197, "get_drop_down_titl": 197, "get_cell_el": 197, "css_class": 197, "get_sent": 197, "get_default_indx": 197, "indx": 197, "get_drop_down": 197, "get_title_html": 197, "calculate_label_error_scor": 198, "numpi": 198, "pred_prob": 198, "get_label_quality_scor": 198, "np": 198, "class": [198, 222], "get_unique_ent": 198, "training_pipelin": 198, "noisy_label_test_result": 198, "cross": 198, "fold": 198, "setincludeconfidencescor": 198, "noisi": [198, 201, 202], "stylesheet": 199, "multilin": 199, "background": 199, "color": [199, 219, 220], "0098da": 199, "center": 199, "footer": 199, "ffffff": 199, "ignore_margin": 199, "row_odd": 199, "262626": 199, "row_even": 199, "eaeaeb": 199, "page_button": 199, "border": [199, 211], "cursor": 199, "pointer": 199, "overflow": 199, "outlin": 199, "table_titl": 199, "font": 199, "2em": 199, "500": 199, "title_text": 199, "70px": 199, "inlin": 199, "flex": [199, 201, 202], "dropdown": 199, "1px": 199, "solid": 199, "radiu": 199, "4px": 199, "aeaeae": 199, "kind": [201, 202], "perturb": [201, 202], "create_datafram": 201, "pos_sync_tag": 201, "synthet": 201, "filter_by_entity_typ": 201, "ent_typ": 201, "get_sampl": 201, "sample_data": 201, "create_terminologi": [201, 202], "terminologi": [201, 202], "modify_capitalization_upp": [201, 202], "augment": [201, 203, 207], "modify_capitalization_low": [201, 202], "modify_capitalization_titl": [201, 202], "add_punctuation_to_data": 201, "strip_punctuation_from_data": 201, "strip": [201, 202], "senctenc": 201, "add_typo_to_sent": [201, 202], "introduce_typo": [201, 202], "introduc": [201, 202], "typo": [201, 202], "swap_entities_with_terminologi": 201, "get_cohyponyms_wordnet": [201, 202], "co": [201, 202], "hyponym": [201, 202], "wordnet": [201, 202], "swap_with_cohyponym": [201, 202], "databas": [201, 202], "convert_acc": 201, "lang_dict": [201, 202], "convers": [201, 202], "add_context_to_data": 201, "starting_context": [201, 202], "ending_context": [201, 202], "add_contract": [201, 202], "augment_robust": 201, "add_punctu": [201, 202], "strip_punctu": [201, 202], "make_typo": 201, "american_to_british": [201, 202], "british_to_american": [201, 202], "add_context": [201, 202], "swap_ent": [201, 202], "swap_cohyponym": [201, 202], "optimized_inplac": 201, "random_st": 201, "return_spark": 201, "conll_save_path": 201, "print_info": 201, "ignore_warn": 201, "nois": [201, 202], "british": [201, 202], "american": [201, 202], "inplac": 201, "distinctli": 201, "warn": 201, "test_and_augment_robust": 201, "pipeline_model": [201, 202, 207], "test_file_path": [201, 202], "conll_path_to_aug": 201, "metric_typ": [201, 202], "metrics_output_format": [201, 202], "robustness_test_result": [201, 202], "noise_prob": [201, 202, 203], "liner": 201, "assembl": [201, 202, 211], "applic": [201, 202], "strict": [201, 202], "special": [201, 202, 210], "test_set_languag": [201, 202], "list_of_str": 202, "keep_numeric_punctu": 202, "ie": 202, "40": 202, "000": 202, "modify_capit": 202, "got": 202, "swap_named_entities_from_terminologi": 202, "remove_punctuation_token": 202, "remove_context_token": 202, "starting_context_token": 202, "ending_context_token": 202, "remove_contraction_token": 202, "list_with_contract": 202, "list_without_contract": 202, "calculate_metr": 202, "filtered_df": 202, "noise_typ": 202, "noise_descript": 202, "test_set": 202, "total_amount": 202, "original_annotations_df": 202, "noisy_test_set": 202, "token_filter_funct": 202, "starting_context_token_list": 202, "ending_context_token_list": 202, "disrupt": 202, "conll_sentence_read": 202, "test_robust": 202, "sample_sentence_count": 202, "calculate_proport": 203, "f1_score": 203, "suggest_perturb": 203, "test_result": 203, "suggest": 203, "get_augmentation_proport": 203, "pull": 203, "printprogress": 204, "progress": 204, "bar": 204, "consol": 204, "internalresourcedownload": 204, "downlod": 204, "downloadmodel": 204, "reader": [204, 207], "j_dwn": 204, "internalspythonresourcedownload": 204, "showprivatemodel": 204, "showprivatepipelin": 204, "showuncategorizedresourc": 204, "uncategor": 204, "showavailableannot": 204, "returnprivatemodel": 204, "returnprivatepipelin": 204, "tabular": 205, "structureddeidentif": 205, "columnsse": 205, "userandomdatedisplac": 205, "street": 205, "internet": 205, "profess": 205, "opf": 205, "screen": 205, "protein": 205, "someth": 205, "someon": 205, "healthplan": 205, "obfuscatecolumn": 205, "texttodocumentscolumn": 206, "todocumentscolumn": 206, "annotationtooljsonread": 207, "cleanup_mod": 207, "split_char": 207, "context_char": 207, "min_chars_tol": 207, "align_chars_tol": 207, "merge_overlap": 207, "sddlpath": 207, "generateassertiontrainset": 207, "generateconl": 207, "creation": 207, "229937784": 207, "fih": 207, "18001": 207, "04t13": 207, "aleksei": 207, "136": 207, "142": 207, "37": 207, "79": 207, "305038693": 207, "65001": 207, "03t08": 207, "844970557": 207, "rwh": 207, "21001": 207, "84": 207, "97": 207, "914783811": 207, "97001": 207, "02t12": 207, "07": 207, "91": 207, "90": 207, "733882247": 207, "84001": 207, "02t15": 207, "73": 207, "77": 207, "assertion_df": 207, "rdr": 207, "sentencecol": 207, "assertioncol": 207, "generateplainassertiontrainset": 207, "taskcolumn": 207, "tokencol": 207, "nerlabel": 207, "codiespread": 207, "codiesp": 207, "readdatasettaskx": 207, "textfold": 207, "cantemistread": 207, "cantemist": 207, "readdatasettaskn": 207, "synonymaugmentationuml": 207, "umls_path": 207, "code_col": 207, "description_col": 207, "synonym": 207, "uml": 207, "augmentcsv": 207, "corpus_csv_path": 207, "do_product": 207, "augmentation_mod": 207, "plain_text": 207, "synonym_sourc": 207, "regex_pars": 207, "euclidean_distance_threshold": 207, "cosine_distance_threshold": 207, "synonym_limit": 207, "casing_funct": 207, "augmentdatafram": 207, "corpus_df": 207, "redatasethelp": 207, "spark_df": 207, "preprocess": 207, "i2b2_clinical_rel_dataset": 207, "column_map": 207, "begin1": 207, "firstcharent1": 207, "end1": 207, "lastcharent1": 207, "begin2": 207, "firstcharent2": 207, "end2": 207, "lastcharent2": 207, "create_annotation_column": 207, "txt_file": 207, "sent_id": 207, "beth": 207, "partner": 207, "i2b2": 207, "2010": 207, "va": 207, "tem": 207, "44": 207, "respiratori": 207, "satur": 207, "75": 207, "No": 207, "lotion": 207, "crea": 207, "146": 207, "trnap": 207, "incis": 207, "conc": 207, "43": [207, 220], "ter": 207, "picc": 207, "54": 207, "68": 207, "58": 207, "light": 207, "headed": 207, "diaphoresi": 207, "92": 207, "82": 207, "electroca": 207, "61": 207, "inferior": 207, "38": 207, "st": 207, "depressio": 207, "239": 207, "196": 207, "176": 207, "145": 207, "train_data": 207, "ner_column_nam": 207, "schema": 207, "printschema": 207, "root": 207, "nullabl": 207, "ner_log_pars": 208, "parse_logfil": 208, "avg": 208, "get_chart": [208, 218], "log_fil": [208, 218], "plot": [208, 218], "figur": [208, 218], "precis": [208, 218, 221], "loss_plot": [208, 218], "get_best_f1_scor": 208, "micro": 208, "macro": 208, "true_seq": [208, 218, 221], "pred_seq": [208, 218, 221], "overal": [208, 218, 221], "simpli": [208, 218, 221], "evaluate_conll_fil": [208, 218], "fileiter": [208, 218], "assertion_log_pars": 208, "updatecachemodel": 209, "cache_fold": 209, "refresh": 209, "overwrit": 209, "date_cutoff": 209, "get_mt_sampl": 210, "medical_speci": 210, "transcrib": 210, "transcript": 210, "mtsampl": 210, "allergy_immunologi": 210, "autopsi": 210, "bariatr": 210, "cardiovascular_pulmonari": 210, "chiropract": 210, "consult_history_and_phi": 210, "cosmetic_plastic_surgeri": 210, "dentistri": 210, "dermatologi": 210, "diets_and_nutrit": 210, "discharge_summari": 210, "emergency_room_report": 210, "endocrinologi": 210, "ent_otolaryngologi": 210, "gastroenterologi": 210, "general_medicin": 210, "hematology_oncologi": 210, "hospice_palliative_car": 210, "im": 210, "lab_medicine_pathologi": 210, "letter": 210, "nephrologi": 210, "neurologi": 210, "neurosurgeri": 210, "obstetrics_gynecologi": 210, "office_not": 210, "ophthalmologi": 210, "orthoped": 210, "pain_manag": 210, "pediatrics_neonat": 210, "physical_medicine_rehab": 210, "podiatri": 210, "psychiatry_psychologi": 210, "radiologi": 210, "rheumatologi": 210, "sleep_medicin": 210, "soap_chart_progress_not": 210, "speech_languag": 210, "surgeri": 210, "urologi": 210, "scrap": 210, "nlp_token_pipelin": 211, "nlp_pos_pipelin": 211, "token_pipeline_initi": 211, "pos_pipeline_initi": 211, "sentencedetectordlmodel": 211, "regular_token": 211, "regextoken": 211, "empty_df": 211, "get_doc_assembl": 211, "get_sent_detector": 211, "get_regular_token": 211, "get_regex_token": 211, "get_po": 211, "get_empty_df": 211, "get_nlp_token_pipelin": 211, "get_sentence_pipelin": 211, "get_rel_df": 211, "get_ner_df": 211, "get_ner_sentence_bord": 211, "get_nlp_pos_pipelin": 211, "tagger": 211, "get_single_task_conl": 211, "pos_pipelin": 211, "token_pipelin": 211, "style": [211, 214, 219], "get_token_df": 211, "_type_": 211, "read_conl": 211, "filepath": 211, "structured_deidentifi": 213, "columns_dict": 213, "ref_sourc": 213, "columns_se": 213, "date_format": 213, "is_module_import": 214, "lib": 214, "raise_except": 214, "pip_nam": 214, "message_typ": 214, "messag": 214, "instruct": 214, "internalannotatortyp": 216, "selector": 216, "aqua": [219, 220], "aquamarin": [219, 220], "blanchedalmond": [219, 220], "blue": [219, 220], "blueviolet": [219, 220], "burlywood": [219, 220], "ocr_entity_processor": 219, "file_path": 219, "bounding_box": 219, "save_fold": 219, "label_color": 219, "red": 219, "color_chart_path": 219, "color_chart": 219, "png": 219, "chunk_col": 219, "black_list": 219, "display_result": 219, "pageiteratorlevel": 219, "pagesegmod": 219, "pagesegmentationmod": 219, "sparse_text_osd": 219, "ocr": 219, "paint": 219, "highlight": 219, "black_band": 219, "band": 219, "bound": 219, "box": 219, "around": 219, "chart": 219, "label2color": 220, "label2rgb": 220, "colors_rgb": 220, "255": 220, "127": 220, "212": 220, "235": 220, "205": 220, "138": 220, "226": 220, "165": 220, "aggregate_ent": 221, "split_tag": 221, "chunk_typ": 221, "is_chunk_end": 221, "prev_tag": 221, "contradict": 221, "is_chunk_start": 221, "calc_metr": 221, "tp": 221, "percent": 221, "fb1": 221, "decim": 221, "count_chunk": 221, "correct_chunk": 221, "counter": 221, "correctli": 221, "true_chunk": 221, "pred_chunk": 221, "correct_count": 221, "true_count": 221, "pred_count": 221, "get_result": 221, "prec": 221, "rec": 221, "overview": 222}, "objects": {"": [[160, 0, 0, "-", "sparknlp_jsl"]], "sparknlp_jsl": [[11, 0, 0, "-", "_tf_graph_builders"], [34, 0, 0, "-", "_tf_graph_builders_1x"], [41, 0, 0, "-", "alab"], [85, 0, 0, "-", "annotator"], [160, 3, 1, "", "annotators"], [120, 0, 0, "-", "base"], [124, 0, 0, "-", "common"], [125, 0, 0, "-", "compatibility"], [126, 0, 0, "-", "custom_transformer"], [127, 0, 0, "-", "deidentification_module"], [128, 0, 0, "-", "eval"], [143, 0, 0, "-", "finance"], [159, 0, 0, "-", "functions"], [160, 6, 1, "", "get_credentials"], [161, 0, 0, "-", "internal"], [176, 0, 0, "-", "legal"], [160, 6, 1, "", "library_settings"], [192, 0, 0, "-", "modelTracer"], [195, 0, 0, "-", "nlp_test"], [204, 0, 0, "-", "pretrained"], [160, 6, 1, "", "pub_version"], [160, 3, 1, "", "size_regex"], [160, 6, 1, "", "start"], [205, 0, 0, "-", "structured_deidentification"], [206, 0, 0, "-", "text_to_documents_columns"], [207, 0, 0, "-", "training"], [208, 0, 0, "-", "training_log_parser"], [160, 3, 1, "", "transformer_seq_classification"], [209, 0, 0, "-", "updateModels"], [210, 0, 0, "-", "util"], [215, 0, 0, "-", "utils"], [160, 6, 1, "", "version"], [160, 3, 1, "", "version_regex"]], "sparknlp_jsl._tf_graph_builders": [[3, 0, 0, "-", "assertion_dl"], [7, 0, 0, "-", "generic_classifier"], [10, 0, 0, "-", "graph_builders"], [14, 0, 0, "-", "ner_dl"], [21, 0, 0, "-", "tf2contrib"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[2, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel": [[2, 2, 1, "", "add_bidirectional_lstm"], [2, 2, 1, "", "add_optimizer"], [2, 2, 1, "", "calc_accuracy"], [2, 2, 1, "", "confusion_matrix"], [2, 2, 1, "", "fully_connected_layer"], [2, 2, 1, "", "persist_graph"], [2, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[4, 0, 0, "-", "basetfmodel"], [5, 0, 0, "-", "build_model"], [6, 0, 0, "-", "generic_classifier_model"], [8, 0, 0, "-", "progresstracker"], [9, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel": [[4, 2, 1, "", "build"], [4, 2, 1, "", "export_graph"], [4, 2, 1, "", "fit_dataset"], [4, 2, 1, "", "generate_batch"], [4, 2, 1, "", "get_graph"], [4, 2, 1, "", "is_built"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, 3, 1, "", "build_params"], [5, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel": [[6, 2, 1, "", "build"], [6, 2, 1, "", "export_graph"], [6, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker": [[8, 2, 1, "", "get_report_interval"], [8, 2, 1, "", "on_batch"], [8, 2, 1, "", "on_epoch"], [8, 2, 1, "", "on_training_end"], [8, 2, 1, "", "on_training_start"], [8, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, 1, 1, "", "MODEL_OPS"], [9, 1, 1, "", "MODEL_TENSORS"], [9, 1, 1, "", "RUN_TYPES"], [9, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS": [[9, 4, 1, "", "INIT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS": [[9, 4, 1, "", "ACC"], [9, 4, 1, "", "INPUTS"], [9, 4, 1, "", "LEARNING_RATE"], [9, 4, 1, "", "LOSS"], [9, 4, 1, "", "OUTPUTS"], [9, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES": [[9, 4, 1, "", "EVALUATE"], [9, 4, 1, "", "PREDICT"], [9, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings": [[9, 4, 1, "", "DATASETS_DIR"], [9, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [9, 4, 1, "", "LOGS_DIR"], [9, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, 1, 1, "", "AssertionTFGraphBuilder"], [10, 1, 1, "", "GenericClassifierTFGraphBuilder"], [10, 1, 1, "", "LogRegClassifierTFGraphBuilder"], [10, 1, 1, "", "NerTFGraphBuilder"], [10, 1, 1, "", "RelationExtractionTFGraphBuilder"], [10, 1, 1, "", "SVMClassifierTFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilder"], [10, 1, 1, "", "TFGraphBuilderFactory"], [10, 5, 1, "", "TensorflowAddonsNeeded"], [10, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder": [[10, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder": [[10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder": [[10, 2, 1, "", "check_build_params"], [10, 2, 1, "", "get_build_param"], [10, 2, 1, "", "get_build_params"], [10, 2, 1, "", "get_build_params_with_defaults"], [10, 2, 1, "", "get_model_build_param_explanations"], [10, 2, 1, "", "get_model_build_params"], [10, 2, 1, "", "get_model_filename"], [10, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory": [[10, 2, 1, "", "build"], [10, 2, 1, "", "get_models"], [10, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[12, 0, 0, "-", "create_graph"], [13, 0, 0, "-", "dataset_encoder"], [15, 0, 0, "-", "ner_model"], [16, 0, 0, "-", "ner_model_saver"], [17, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder": [[13, 2, 1, "", "encode"], [13, 2, 1, "", "get_char_indexes"], [13, 2, 1, "", "normalize"], [13, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel": [[15, 2, 1, "", "add_bilstm_char_repr"], [15, 2, 1, "", "add_cnn_char_repr"], [15, 2, 1, "", "add_context_repr"], [15, 2, 1, "", "add_inference_layer"], [15, 2, 1, "", "add_pretrained_word_embeddings"], [15, 2, 1, "", "add_training_op"], [15, 2, 1, "", "close"], [15, 2, 1, "", "fill"], [15, 2, 1, "", "get_char_ids"], [15, 2, 1, "", "get_from_batch"], [15, 2, 1, "", "get_sentence_lengths"], [15, 2, 1, "", "get_sentence_token_lengths"], [15, 2, 1, "", "get_softmax"], [15, 2, 1, "", "get_tag_ids"], [15, 2, 1, "", "get_word_embeddings"], [15, 2, 1, "", "get_word_lengths"], [15, 2, 1, "", "init_variables"], [15, 2, 1, "", "measure"], [15, 2, 1, "", "num_trues"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "slice"], [15, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver": [[16, 2, 1, "", "restore_tensorflow_state"], [16, 2, 1, "", "save"], [16, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper": [[17, 2, 1, "", "get_bucket_id"], [17, 2, 1, "", "slice"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[18, 0, 0, "-", "core_rnn_cell"], [19, 0, 0, "-", "fused_rnn_cell"], [20, 0, 0, "-", "gru_ops"], [22, 0, 0, "-", "lstm_ops"], [23, 0, 0, "-", "rnn"], [24, 0, 0, "-", "rnn_cell"], [21, 3, 1, "", "tf"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, 1, 1, "", "EmbeddingWrapper"], [18, 1, 1, "", "InputProjectionWrapper"], [18, 1, 1, "", "OutputProjectionWrapper"], [18, 3, 1, "", "RNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper": [[18, 2, 1, "", "call"], [18, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, 1, 1, "", "FusedRNNCell"], [19, 1, 1, "", "FusedRNNCellAdaptor"], [19, 1, 1, "", "TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, 1, 1, "", "GRUBlockCell"], [20, 1, 1, "", "GRUBlockCellV2"], [20, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell": [[20, 2, 1, "", "build"], [20, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2": [[20, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, 1, 1, "", "LSTMBlockCell"], [22, 1, 1, "", "LSTMBlockFusedCell"], [22, 1, 1, "", "LSTMBlockWrapper"], [22, 3, 1, "", "LayerRNNCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell": [[22, 2, 1, "", "build"], [22, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell": [[22, 2, 1, "", "build"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper": [[22, 2, 1, "", "call"], [22, 2, 1, "", "num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, 6, 1, "", "stack_bidirectional_dynamic_rnn"], [23, 6, 1, "", "stack_bidirectional_rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, 1, 1, "", "AttentionCellWrapper"], [24, 1, 1, "", "BidirectionalGridLSTMCell"], [24, 1, 1, "", "CFNCell"], [24, 1, 1, "", "CompiledWrapper"], [24, 1, 1, "", "Conv1DLSTMCell"], [24, 1, 1, "", "Conv2DLSTMCell"], [24, 1, 1, "", "Conv3DLSTMCell"], [24, 1, 1, "", "ConvLSTMCell"], [24, 1, 1, "", "CoupledInputForgetGateLSTMCell"], [24, 1, 1, "", "GLSTMCell"], [24, 1, 1, "", "GridLSTMCell"], [24, 1, 1, "", "HighwayWrapper"], [24, 1, 1, "", "IndRNNCell"], [24, 1, 1, "", "IndyGRUCell"], [24, 1, 1, "", "IndyLSTMCell"], [24, 1, 1, "", "IntersectionRNNCell"], [24, 1, 1, "", "LayerNormBasicLSTMCell"], [24, 1, 1, "", "LayerNormLSTMCell"], [24, 1, 1, "", "MinimalRNNCell"], [24, 1, 1, "", "NASCell"], [24, 1, 1, "", "NTMCell"], [24, 3, 1, "", "NTMControllerState"], [24, 1, 1, "", "PhasedLSTMCell"], [24, 1, 1, "", "SRUCell"], [24, 1, 1, "", "TimeFreqLSTMCell"], [24, 1, 1, "", "UGRNNCell"], [24, 1, 1, "", "WeightNormLSTMCell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper": [[24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"], [24, 2, 1, "", "zero_state"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell": [[24, 2, 1, "", "build"], [24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell": [[24, 2, 1, "", "call"]], "sparknlp_jsl._tf_graph_builders_1x": [[26, 0, 0, "-", "assertion_dl"], [30, 0, 0, "-", "generic_classifier"], [33, 0, 0, "-", "graph_builders"], [37, 0, 0, "-", "ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[25, 0, 0, "-", "assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, 1, 1, "", "AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel": [[25, 2, 1, "", "add_bidirectional_lstm"], [25, 2, 1, "", "add_optimizer"], [25, 2, 1, "", "calc_accuracy"], [25, 2, 1, "", "confusion_matrix"], [25, 2, 1, "", "fully_connected_layer"], [25, 2, 1, "", "persist_graph"], [25, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[27, 0, 0, "-", "basetfmodel"], [28, 0, 0, "-", "build_model"], [29, 0, 0, "-", "generic_classifier_model"], [31, 0, 0, "-", "progresstracker"], [32, 0, 0, "-", "settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, 1, 1, "", "BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel": [[27, 2, 1, "", "build"], [27, 2, 1, "", "export_graph"], [27, 2, 1, "", "fit_dataset"], [27, 2, 1, "", "generate_batch"], [27, 2, 1, "", "get_graph"], [27, 2, 1, "", "is_built"], [27, 2, 1, "", "load_graph"], [27, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, 3, 1, "", "build_params"], [28, 3, 1, "", "model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel": [[29, 2, 1, "", "build"], [29, 2, 1, "", "export_graph"], [29, 2, 1, "", "run_tests"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, 1, 1, "", "ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker": [[31, 2, 1, "", "get_report_interval"], [31, 2, 1, "", "on_batch"], [31, 2, 1, "", "on_epoch"], [31, 2, 1, "", "on_training_end"], [31, 2, 1, "", "on_training_start"], [31, 2, 1, "", "print_progress"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, 1, 1, "", "MODEL_OPS"], [32, 1, 1, "", "MODEL_TENSORS"], [32, 1, 1, "", "RUN_TYPES"], [32, 1, 1, "", "Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS": [[32, 4, 1, "", "INIT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS": [[32, 4, 1, "", "ACC"], [32, 4, 1, "", "INPUTS"], [32, 4, 1, "", "LEARNING_RATE"], [32, 4, 1, "", "LOSS"], [32, 4, 1, "", "OUTPUTS"], [32, 4, 1, "", "TARGETS"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES": [[32, 4, 1, "", "EVALUATE"], [32, 4, 1, "", "PREDICT"], [32, 4, 1, "", "TRAIN"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings": [[32, 4, 1, "", "DATASETS_DIR"], [32, 4, 1, "", "DEFAULT_MODEL_NODE_NAMES"], [32, 4, 1, "", "LOGS_DIR"], [32, 4, 1, "", "MODELS_DIR"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, 1, 1, "", "AssertionTFGraphBuilder"], [33, 1, 1, "", "GenericClassifierTFGraphBuilder"], [33, 1, 1, "", "NerTFGraphBuilder"], [33, 1, 1, "", "RelationExtractionTFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilder"], [33, 1, 1, "", "TFGraphBuilderFactory"], [33, 5, 1, "", "WrongTFVersion"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder": [[33, 2, 1, "", "get_model_filename"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder": [[33, 2, 1, "", "check_build_params"], [33, 2, 1, "", "get_build_param"], [33, 2, 1, "", "get_build_params"], [33, 2, 1, "", "get_build_params_with_defaults"], [33, 2, 1, "", "get_model_build_param_explanations"], [33, 2, 1, "", "get_model_build_params"], [33, 2, 1, "", "get_model_filename"], [33, 2, 1, "", "supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory": [[33, 2, 1, "", "build"], [33, 2, 1, "", "get_models"], [33, 2, 1, "", "print_model_params"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[35, 0, 0, "-", "create_graph"], [36, 0, 0, "-", "dataset_encoder"], [38, 0, 0, "-", "ner_model"], [39, 0, 0, "-", "ner_model_saver"], [40, 0, 0, "-", "sentence_grouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, 6, 1, "", "create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, 1, 1, "", "DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "get_char_indexes"], [36, 2, 1, "", "normalize"], [36, 2, 1, "", "shuffle"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, 1, 1, "", "NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel": [[38, 2, 1, "", "add_bilstm_char_repr"], [38, 2, 1, "", "add_cnn_char_repr"], [38, 2, 1, "", "add_context_repr"], [38, 2, 1, "", "add_inference_layer"], [38, 2, 1, "", "add_pretrained_word_embeddings"], [38, 2, 1, "", "add_training_op"], [38, 2, 1, "", "close"], [38, 2, 1, "", "fill"], [38, 2, 1, "", "get_char_ids"], [38, 2, 1, "", "get_from_batch"], [38, 2, 1, "", "get_sentence_lengths"], [38, 2, 1, "", "get_sentence_token_lengths"], [38, 2, 1, "", "get_softmax"], [38, 2, 1, "", "get_tag_ids"], [38, 2, 1, "", "get_word_embeddings"], [38, 2, 1, "", "get_word_lengths"], [38, 2, 1, "", "init_variables"], [38, 2, 1, "", "measure"], [38, 2, 1, "", "num_trues"], [38, 2, 1, "", "predict"], [38, 2, 1, "", "slice"], [38, 2, 1, "", "train"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, 1, 1, "", "NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver": [[39, 2, 1, "", "restore_tensorflow_state"], [39, 2, 1, "", "save"], [39, 2, 1, "", "save_models"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, 1, 1, "", "SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper": [[40, 2, 1, "", "get_bucket_id"], [40, 2, 1, "", "slice"]], "sparknlp_jsl.alab": [[41, 1, 1, "", "AnnotationLab"]], "sparknlp_jsl.alab.AnnotationLab": [[41, 2, 1, "", "create_project"], [41, 2, 1, "", "delete_project"], [41, 2, 1, "", "delete_tasks"], [41, 2, 1, "", "generate_preannotations"], [41, 2, 1, "", "get_IAA_metrics"], [41, 2, 1, "", "get_all_projects"], [41, 2, 1, "", "get_annotations"], [41, 2, 1, "", "get_assertion_data"], [41, 2, 1, "", "get_classification_data"], [41, 2, 1, "", "get_conll_data"], [41, 2, 1, "", "get_project_config"], [41, 2, 1, "", "get_relation_extraction_data"], [41, 2, 1, "", "review_annotations"], [41, 2, 1, "", "set_credentials"], [41, 2, 1, "", "set_project_config"], [41, 2, 1, "", "upload_preannotations"], [41, 2, 1, "", "upload_tasks"]], "sparknlp_jsl.annotator": [[42, 0, 0, "-", "annotation_merger"], [85, 3, 1, "", "assertion"], [46, 0, 0, "-", "assertion"], [47, 0, 0, "-", "chunk2_token"], [85, 3, 1, "", "chunker"], [56, 0, 0, "-", "chunker"], [85, 3, 1, "", "classification"], [61, 0, 0, "-", "classification"], [85, 3, 1, "", "context"], [66, 0, 0, "-", "context"], [85, 3, 1, "", "deid"], [69, 0, 0, "-", "deid"], [85, 3, 1, "", "disambiguation"], [73, 0, 0, "-", "disambiguation"], [75, 0, 0, "-", "doc2_chunk_internal"], [80, 0, 0, "-", "embeddings"], [81, 0, 0, "-", "feature_assembler"], [82, 0, 0, "-", "filtering_params"], [85, 3, 1, "", "generic_classifier"], [84, 0, 0, "-", "generic_classifier"], [85, 3, 1, "", "keyword"], [87, 0, 0, "-", "merge"], [88, 0, 0, "-", "ner"], [97, 0, 0, "-", "normalizer"], [99, 0, 0, "-", "qa"], [102, 0, 0, "-", "re"], [107, 0, 0, "-", "resolution"], [110, 0, 0, "-", "resolution2_chunk"], [111, 0, 0, "-", "router"], [112, 0, 0, "-", "seq2seq"], [116, 0, 0, "-", "source_tracking_metadata_params"], [117, 0, 0, "-", "tf_graph_builder"], [118, 0, 0, "-", "windowed"]], "sparknlp_jsl.annotator.annotation_merger": [[42, 1, 1, "", "AnnotationMerger"]], "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger": [[42, 4, 1, "", "inputAnnotatorTypes"], [42, 4, 1, "", "inputType"], [42, 4, 1, "", "name"], [42, 4, 1, "", "outputAnnotatorType"], [42, 2, 1, "", "setInputCols"], [42, 2, 1, "", "setInputType"], [42, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.assertion": [[43, 0, 0, "-", "assertionDL"], [44, 0, 0, "-", "assertion_chunk_converter"], [45, 0, 0, "-", "assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, 1, 1, "", "AssertionDLApproach"], [43, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach": [[43, 4, 1, "", "batchSize"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "dropout"], [43, 4, 1, "", "enableOutputLogs"], [43, 4, 1, "", "endCol"], [43, 4, 1, "", "epochs"], [43, 4, 1, "", "graphFile"], [43, 4, 1, "", "graphFolder"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "label"], [43, 4, 1, "", "learningRate"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "outputAnnotatorType"], [43, 4, 1, "", "outputLogsPath"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setBatchSize"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setDropout"], [43, 2, 1, "", "setEnableOutputLogs"], [43, 2, 1, "", "setEndCol"], [43, 2, 1, "", "setEpochs"], [43, 2, 1, "", "setGraphFile"], [43, 2, 1, "", "setGraphFolder"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setLabelCol"], [43, 2, 1, "", "setLearningRate"], [43, 2, 1, "", "setMaxSentLen"], [43, 2, 1, "", "setOutputLogsPath"], [43, 2, 1, "", "setScopeWindow"], [43, 2, 1, "", "setStartCol"], [43, 2, 1, "", "setTestDataset"], [43, 2, 1, "", "setValidationSplit"], [43, 2, 1, "", "setVerbose"], [43, 4, 1, "", "startCol"], [43, 4, 1, "", "testDataset"], [43, 4, 1, "", "validationSplit"], [43, 4, 1, "", "verbose"]], "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel": [[43, 4, 1, "", "classes"], [43, 4, 1, "", "configProtoBytes"], [43, 4, 1, "", "includeConfidence"], [43, 4, 1, "", "inputAnnotatorTypes"], [43, 4, 1, "", "maxSentLen"], [43, 4, 1, "", "name"], [43, 4, 1, "", "outputAnnotatorType"], [43, 2, 1, "", "pretrained"], [43, 4, 1, "", "scopeWindow"], [43, 2, 1, "", "setConfigProtoBytes"], [43, 2, 1, "", "setIncludeConfidence"], [43, 2, 1, "", "setScopeWindow"], [43, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, 1, 1, "", "AssertionChunkConverter"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter": [[44, 4, 1, "", "chunkBeginCol"], [44, 4, 1, "", "chunkEndCol"], [44, 4, 1, "", "chunkTextCol"], [44, 4, 1, "", "inputAnnotatorTypes"], [44, 4, 1, "", "inputCols"], [44, 4, 1, "", "name"], [44, 4, 1, "", "outputAnnotatorType"], [44, 4, 1, "", "outputCol"], [44, 4, 1, "", "outputTokenBeginCol"], [44, 4, 1, "", "outputTokenEndCol"], [44, 2, 1, "", "setChunkBeginCol"], [44, 2, 1, "", "setChunkEndCol"], [44, 2, 1, "", "setChunkTextCol"], [44, 2, 1, "", "setInputCols"], [44, 2, 1, "", "setOutputCol"], [44, 2, 1, "", "setOutputTokenBeginCol"], [44, 2, 1, "", "setOutputTokenEndCol"], [44, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, 1, 1, "", "AssertionLogRegApproach"], [45, 1, 1, "", "AssertionLogRegModel"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "eNetParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "label"], [45, 4, 1, "", "maxIter"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 4, 1, "", "regParam"], [45, 2, 1, "", "setAfter"], [45, 2, 1, "", "setBefore"], [45, 2, 1, "", "setEndCol"], [45, 2, 1, "", "setEnet"], [45, 2, 1, "", "setLabelCol"], [45, 2, 1, "", "setMaxIter"], [45, 2, 1, "", "setNerCol"], [45, 2, 1, "", "setReg"], [45, 2, 1, "", "setStartCol"], [45, 2, 1, "", "setTargetNerLabels"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel": [[45, 4, 1, "", "afterParam"], [45, 4, 1, "", "beforeParam"], [45, 4, 1, "", "endCol"], [45, 4, 1, "", "inputAnnotatorTypes"], [45, 4, 1, "", "name"], [45, 4, 1, "", "nerCol"], [45, 4, 1, "", "outputAnnotatorType"], [45, 2, 1, "", "pretrained"], [45, 4, 1, "", "startCol"], [45, 4, 1, "", "targetNerLabels"]], "sparknlp_jsl.annotator.chunk2_token": [[47, 1, 1, "", "Chunk2Token"]], "sparknlp_jsl.annotator.chunk2_token.Chunk2Token": [[47, 4, 1, "", "inputAnnotatorTypes"], [47, 4, 1, "", "name"], [47, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker": [[48, 0, 0, "-", "assertion_filterer"], [49, 0, 0, "-", "chunk_converter"], [50, 0, 0, "-", "chunk_key_phrase_extraction"], [51, 0, 0, "-", "chunk_sentence_splitter"], [52, 0, 0, "-", "chunker_filterer"], [53, 0, 0, "-", "chunkmapper"], [54, 0, 0, "-", "chunkmapper_filterer"], [55, 0, 0, "-", "docmapper"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, 1, 1, "", "AssertionFilterer"]], "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer": [[48, 4, 1, "", "caseSensitive"], [48, 4, 1, "", "criteria"], [48, 4, 1, "", "entitiesConfidence"], [48, 4, 1, "", "inputAnnotatorTypes"], [48, 4, 1, "", "name"], [48, 4, 1, "", "outputAnnotatorType"], [48, 4, 1, "", "regex"], [48, 2, 1, "", "setCaseSensitive"], [48, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, 1, 1, "", "ChunkConverter"]], "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter": [[49, 4, 1, "", "inputAnnotatorTypes"], [49, 4, 1, "", "name"], [49, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, 1, 1, "", "ChunkKeyPhraseExtraction"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction": [[50, 4, 1, "", "concatenateSentences"], [50, 4, 1, "", "divergence"], [50, 4, 1, "", "documentLevelProcessing"], [50, 4, 1, "", "dropPunctuation"], [50, 4, 1, "", "inputAnnotatorTypes"], [50, 4, 1, "", "name"], [50, 4, 1, "", "outputAnnotatorType"], [50, 2, 1, "", "pretrained"], [50, 4, 1, "", "selectMostDifferent"], [50, 2, 1, "", "setConcatenateSentences"], [50, 2, 1, "", "setDivergence"], [50, 2, 1, "", "setDocumentLevelProcessing"], [50, 2, 1, "", "setDropPunctuation"], [50, 2, 1, "", "setSelectMostDifferent"], [50, 2, 1, "", "setTopN"], [50, 4, 1, "", "topN"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, 1, 1, "", "ChunkSentenceSplitter"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter": [[51, 4, 1, "", "defaultEntity"], [51, 4, 1, "", "groupBySentences"], [51, 4, 1, "", "inputAnnotatorTypes"], [51, 4, 1, "", "insertChunk"], [51, 4, 1, "", "name"], [51, 4, 1, "", "outputAnnotatorType"], [51, 2, 1, "", "setDefaultEntity"], [51, 2, 1, "", "setGroupBySentences"], [51, 2, 1, "", "setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, 1, 1, "", "ChunkFilterer"], [52, 1, 1, "", "ChunkFiltererApproach"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer": [[52, 4, 1, "", "blackList"], [52, 4, 1, "", "criteria"], [52, 4, 1, "", "entitiesConfidence"], [52, 4, 1, "", "filterValue"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 4, 1, "", "regex"], [52, 2, 1, "", "setBlackList"], [52, 2, 1, "", "setCriteria"], [52, 2, 1, "", "setEntitiesConfidence"], [52, 2, 1, "", "setFilterEntity"], [52, 2, 1, "", "setRegex"], [52, 2, 1, "", "setWhiteList"], [52, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach": [[52, 4, 1, "", "blackList"], [52, 4, 1, "", "criteria"], [52, 4, 1, "", "entitiesConfidenceResource"], [52, 4, 1, "", "filterValue"], [52, 4, 1, "", "inputAnnotatorTypes"], [52, 4, 1, "", "name"], [52, 4, 1, "", "outputAnnotatorType"], [52, 4, 1, "", "regex"], [52, 2, 1, "", "setBlackList"], [52, 2, 1, "", "setCriteria"], [52, 2, 1, "", "setEntitiesConfidenceResource"], [52, 2, 1, "", "setFilterEntity"], [52, 2, 1, "", "setRegex"], [52, 2, 1, "", "setWhiteList"], [52, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, 1, 1, "", "ChunkMapperApproach"], [53, 1, 1, "", "ChunkMapperFuzzyMatchingParams"], [53, 1, 1, "", "ChunkMapperModel"], [53, 1, 1, "", "CommonChunkMapperParams"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach": [[53, 4, 1, "", "dictionary"], [53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "setDictionary"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams": [[53, 4, 1, "", "enableCharFingerprintMatching"], [53, 4, 1, "", "enableFuzzyMatching"], [53, 4, 1, "", "enableTokenFingerprintMatching"], [53, 4, 1, "", "fuzzyDistanceScalingMode"], [53, 4, 1, "", "fuzzyMatchingDistanceThresholds"], [53, 4, 1, "", "fuzzyMatchingDistances"], [53, 4, 1, "", "maxCharNgramFingerprint"], [53, 4, 1, "", "maxTokenNgramDroppingCharsRatio"], [53, 4, 1, "", "maxTokenNgramDroppingOperator"], [53, 4, 1, "", "maxTokenNgramDroppingTokens"], [53, 4, 1, "", "maxTokenNgramFingerprint"], [53, 4, 1, "", "minCharNgramFingerprint"], [53, 4, 1, "", "minTokenNgramFingerprint"], [53, 2, 1, "", "setEnableCharFingerprintMatching"], [53, 2, 1, "", "setEnableFuzzyMatching"], [53, 2, 1, "", "setEnableTokenFingerprintMatching"], [53, 2, 1, "", "setFuzzyDistanceScalingMode"], [53, 2, 1, "", "setFuzzyMatchingDistanceThresholds"], [53, 2, 1, "", "setFuzzyMatchingDistances"], [53, 2, 1, "", "setMaxCharNgramFingerprint"], [53, 2, 1, "", "setMaxTokenNgramDroppingCharsRatio"], [53, 2, 1, "", "setMaxTokenNgramDroppingOperator"], [53, 2, 1, "", "setMaxTokenNgramDroppingTokens"], [53, 2, 1, "", "setMaxTokenNgramFingerprint"], [53, 2, 1, "", "setMinCharNgramFingerprint"], [53, 2, 1, "", "setMinTokenNgramFingerprint"]], "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel": [[53, 4, 1, "", "inputAnnotatorTypes"], [53, 4, 1, "", "name"], [53, 4, 1, "", "outputAnnotatorType"], [53, 2, 1, "", "pretrained"], [53, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams": [[53, 4, 1, "", "allowMultiTokenChunk"], [53, 4, 1, "", "lowerCase"], [53, 4, 1, "", "multivaluesRelations"], [53, 4, 1, "", "rel"], [53, 4, 1, "", "rels"], [53, 2, 1, "", "setAllowMultiTokenChunk"], [53, 2, 1, "", "setLowerCase"], [53, 2, 1, "", "setMultivaluesRelations"], [53, 2, 1, "", "setRel"], [53, 2, 1, "", "setRels"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, 1, 1, "", "ChunkMapperFilterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer": [[54, 4, 1, "", "inputAnnotatorTypes"], [54, 4, 1, "", "name"], [54, 4, 1, "", "outputAnnotatorType"], [54, 4, 1, "", "returnCriteria"], [54, 2, 1, "", "setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, 1, 1, "", "DocMapperApproach"], [55, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach": [[55, 4, 1, "", "dictionary"], [55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel": [[55, 4, 1, "", "inputAnnotatorTypes"], [55, 4, 1, "", "name"], [55, 4, 1, "", "outputAnnotatorType"], [55, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification": [[57, 0, 0, "-", "document_log_classifier"], [58, 0, 0, "-", "document_ml_classifier"], [59, 0, 0, "-", "generic_log_reg_classifier"], [60, 0, 0, "-", "generic_svm_classifier"], [62, 0, 0, "-", "medical_bert_for_sequence_classification"], [63, 0, 0, "-", "medical_bert_for_token_classifier"], [64, 0, 0, "-", "medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, 1, 1, "", "DocumentLogRegClassifierApproach"], [57, 1, 1, "", "DocumentLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach": [[57, 4, 1, "", "classificationModelPath"], [57, 4, 1, "", "fitIntercept"], [57, 4, 1, "", "inputAnnotatorTypes"], [57, 4, 1, "", "labelCol"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "maxIter"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "setClassificationModelPath"], [57, 2, 1, "", "setFitIntercept"], [57, 2, 1, "", "setLabelColumn"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMaxIter"], [57, 2, 1, "", "setTol"], [57, 2, 1, "", "setVectorizationModelPath"], [57, 4, 1, "", "tol"], [57, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel": [[57, 4, 1, "", "classificationModel"], [57, 4, 1, "", "labels"], [57, 4, 1, "", "mergeChunks"], [57, 4, 1, "", "name"], [57, 4, 1, "", "outputAnnotatorType"], [57, 2, 1, "", "pretrained"], [57, 2, 1, "", "setClassificationModel"], [57, 2, 1, "", "setLabels"], [57, 2, 1, "", "setMergeChunks"], [57, 2, 1, "", "setVectorizationModel"], [57, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, 1, 1, "", "DocumentMLClassifierApproach"], [58, 1, 1, "", "DocumentMLClassifierModel"], [58, 1, 1, "", "DocumentMLClassifierParams"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach": [[58, 4, 1, "", "classificationModelClass"], [58, 4, 1, "", "classificationModelPath"], [58, 4, 1, "", "fitIntercept"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labelCol"], [58, 4, 1, "", "maxIter"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "setClassificationModelClass"], [58, 2, 1, "", "setClassificationModelPath"], [58, 2, 1, "", "setFitIntercept"], [58, 2, 1, "", "setLabelCol"], [58, 2, 1, "", "setMaxIter"], [58, 2, 1, "", "setMaxTokenNgram"], [58, 2, 1, "", "setMinTokenNgram"], [58, 2, 1, "", "setTol"], [58, 2, 1, "", "setVectorizationModelPath"], [58, 4, 1, "", "tol"], [58, 4, 1, "", "vectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel": [[58, 4, 1, "", "classificationModel"], [58, 4, 1, "", "inputAnnotatorTypes"], [58, 4, 1, "", "labels"], [58, 4, 1, "", "name"], [58, 4, 1, "", "outputAnnotatorType"], [58, 2, 1, "", "pretrained"], [58, 2, 1, "", "setClassificationModel"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setVectorizationModel"], [58, 4, 1, "", "vectorizationModel"]], "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams": [[58, 4, 1, "", "labels"], [58, 4, 1, "", "maxTokenNgram"], [58, 4, 1, "", "mergeChunks"], [58, 4, 1, "", "minTokenNgram"], [58, 2, 1, "", "setLabels"], [58, 2, 1, "", "setMergeChunks"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, 1, 1, "", "GenericLogRegClassifierApproach"], [59, 1, 1, "", "GenericLogRegClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel": [[59, 4, 1, "", "inputAnnotatorTypes"], [59, 4, 1, "", "name"], [59, 4, 1, "", "outputAnnotatorType"], [59, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, 1, 1, "", "GenericSVMClassifierApproach"], [60, 1, 1, "", "GenericSVMClassifierModel"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel": [[60, 4, 1, "", "inputAnnotatorTypes"], [60, 4, 1, "", "name"], [60, 4, 1, "", "outputAnnotatorType"], [60, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, 1, 1, "", "MedicalBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification": [[62, 4, 1, "", "coalesceSentences"], [62, 4, 1, "", "configProtoBytes"], [62, 2, 1, "", "getClasses"], [62, 4, 1, "", "inputAnnotatorTypes"], [62, 2, 1, "", "loadSavedModel"], [62, 2, 1, "", "loadSavedModelOpenSource"], [62, 4, 1, "", "maxSentenceLength"], [62, 4, 1, "", "name"], [62, 4, 1, "", "outputAnnotatorType"], [62, 2, 1, "", "pretrained"], [62, 2, 1, "", "setCoalesceSentences"], [62, 2, 1, "", "setConfigProtoBytes"], [62, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, 1, 1, "", "MedicalBertForTokenClassifier"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier": [[63, 4, 1, "", "configProtoBytes"], [63, 2, 1, "", "getClasses"], [63, 4, 1, "", "inputAnnotatorTypes"], [63, 2, 1, "", "loadSavedModel"], [63, 2, 1, "", "loadSavedModelOpenSource"], [63, 4, 1, "", "maxSentenceLength"], [63, 4, 1, "", "name"], [63, 4, 1, "", "outputAnnotatorType"], [63, 2, 1, "", "pretrained"], [63, 2, 1, "", "setConfigProtoBytes"], [63, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, 1, 1, "", "MedicalDistilBertForSequenceClassification"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification": [[64, 4, 1, "", "coalesceSentences"], [64, 4, 1, "", "configProtoBytes"], [64, 2, 1, "", "getClasses"], [64, 4, 1, "", "inputAnnotatorTypes"], [64, 2, 1, "", "loadSavedModel"], [64, 2, 1, "", "loadSavedModelOpenSource"], [64, 4, 1, "", "maxSentenceLength"], [64, 4, 1, "", "name"], [64, 4, 1, "", "outputAnnotatorType"], [64, 2, 1, "", "pretrained"], [64, 2, 1, "", "setCoalesceSentences"], [64, 2, 1, "", "setConfigProtoBytes"], [64, 2, 1, "", "setMaxSentenceLength"]], "sparknlp_jsl.annotator.context": [[65, 0, 0, "-", "contextual_parser"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, 1, 1, "", "ContextualParserApproach"], [65, 1, 1, "", "ContextualParserModel"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach": [[65, 4, 1, "", "caseSensitive"], [65, 4, 1, "", "completeContextMatch"], [65, 4, 1, "", "dictionary"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 4, 1, "", "jsonPath"], [65, 4, 1, "", "optionalContextRules"], [65, 4, 1, "", "outputAnnotatorType"], [65, 4, 1, "", "prefixAndSuffixMatch"], [65, 2, 1, "", "setCaseSensitive"], [65, 2, 1, "", "setCompleteContextMatch"], [65, 2, 1, "", "setDictionary"], [65, 2, 1, "", "setJsonPath"], [65, 2, 1, "", "setOptionalContextRules"], [65, 2, 1, "", "setPrefixAndSuffixMatch"], [65, 2, 1, "", "setShortestContextMatch"], [65, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel": [[65, 4, 1, "", "caseSensitive"], [65, 4, 1, "", "inputAnnotatorTypes"], [65, 4, 1, "", "optionalContextRules"], [65, 4, 1, "", "outputAnnotatorType"], [65, 4, 1, "", "prefixAndSuffixMatch"], [65, 2, 1, "", "setCaseSensitive"], [65, 2, 1, "", "setOptionalContextRules"], [65, 2, 1, "", "setPrefixAndSuffixMatch"], [65, 2, 1, "", "setShortestContextMatch"], [65, 4, 1, "", "shortestContextMatch"]], "sparknlp_jsl.annotator.deid": [[67, 0, 0, "-", "deIdentification"], [68, 0, 0, "-", "doccument_hashcoder"], [70, 0, 0, "-", "name_obfuscator"], [71, 0, 0, "-", "reIdentification"], [72, 0, 0, "-", "replacer"]], "sparknlp_jsl.annotator.deid.deIdentification": [[67, 1, 1, "", "DeIdentification"], [67, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification": [[67, 4, 1, "", "ageRanges"], [67, 4, 1, "", "blackList"], [67, 4, 1, "", "consistentObfuscation"], [67, 4, 1, "", "dateFormats"], [67, 4, 1, "", "dateTag"], [67, 4, 1, "", "dateToYear"], [67, 4, 1, "", "days"], [67, 4, 1, "", "entityCasingModesPath"], [67, 4, 1, "", "fixedMaskLength"], [67, 4, 1, "", "genderAwareness"], [67, 2, 1, "", "getBlackList"], [67, 2, 1, "", "getSameLengthFormattedEntities"], [67, 4, 1, "", "ignoreRegex"], [67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "isRandomDateDisplacement"], [67, 4, 1, "", "language"], [67, 4, 1, "", "mappingsColumn"], [67, 4, 1, "", "maskingPolicy"], [67, 4, 1, "", "minYear"], [67, 4, 1, "", "mode"], [67, 4, 1, "", "name"], [67, 4, 1, "", "obfuscateDate"], [67, 4, 1, "", "obfuscateRefFile"], [67, 4, 1, "", "obfuscateRefSource"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "outputAsDocument"], [67, 4, 1, "", "refFileFormat"], [67, 4, 1, "", "refSep"], [67, 4, 1, "", "regexOverride"], [67, 4, 1, "", "regexPatternsDictionary"], [67, 4, 1, "", "region"], [67, 4, 1, "", "returnEntityMappings"], [67, 4, 1, "", "sameEntityThreshold"], [67, 4, 1, "", "sameLengthFormattedEntities"], [67, 4, 1, "", "seed"], [67, 4, 1, "", "selectiveObfuscationModesPath"], [67, 2, 1, "", "setAgeRanges"], [67, 2, 1, "", "setBlackList"], [67, 2, 1, "", "setConsistentObfuscation"], [67, 2, 1, "", "setDateFormats"], [67, 2, 1, "", "setDateTag"], [67, 2, 1, "", "setDateToYear"], [67, 2, 1, "", "setDays"], [67, 2, 1, "", "setEntityCasingModes"], [67, 2, 1, "", "setFixedMaskLength"], [67, 2, 1, "", "setGenderAwareness"], [67, 2, 1, "", "setIgnoreRegex"], [67, 2, 1, "", "setIsRandomDateDisplacement"], [67, 2, 1, "", "setLanguage"], [67, 2, 1, "", "setMappingsColumn"], [67, 2, 1, "", "setMaskingPolicy"], [67, 2, 1, "", "setMinYear"], [67, 2, 1, "", "setMode"], [67, 2, 1, "", "setObfuscateDate"], [67, 2, 1, "", "setObfuscateRefFile"], [67, 2, 1, "", "setObfuscateRefSource"], [67, 2, 1, "", "setOutputAsDocument"], [67, 2, 1, "", "setRefFileFormat"], [67, 2, 1, "", "setRefSep"], [67, 2, 1, "", "setRegexOverride"], [67, 2, 1, "", "setRegexPatternsDictionary"], [67, 2, 1, "", "setRegion"], [67, 2, 1, "", "setReturnEntityMappings"], [67, 2, 1, "", "setSameEntityThreshold"], [67, 2, 1, "", "setSameLengthFormattedEntities"], [67, 2, 1, "", "setSeed"], [67, 2, 1, "", "setSelectiveObfuscationModes"], [67, 2, 1, "", "setUnnormalizedDateMode"], [67, 2, 1, "", "setUseShifDays"], [67, 2, 1, "", "setZipCodeTag"], [67, 4, 1, "", "unnormalizedDateMode"], [67, 4, 1, "", "useShifDays"], [67, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel": [[67, 4, 1, "", "ageRanges"], [67, 4, 1, "", "blackList"], [67, 4, 1, "", "consistentObfuscation"], [67, 4, 1, "", "dateFormats"], [67, 4, 1, "", "dateTag"], [67, 4, 1, "", "dateToYear"], [67, 4, 1, "", "days"], [67, 4, 1, "", "fixedMaskLength"], [67, 4, 1, "", "genderAwareness"], [67, 2, 1, "", "getBlackList"], [67, 2, 1, "", "getRegexEntities"], [67, 2, 1, "", "getSameLengthFormattedEntities"], [67, 4, 1, "", "ignoreRegex"], [67, 4, 1, "", "inputAnnotatorTypes"], [67, 4, 1, "", "isRandomDateDisplacement"], [67, 4, 1, "", "language"], [67, 4, 1, "", "mappingsColumn"], [67, 4, 1, "", "maskingPolicy"], [67, 4, 1, "", "minYear"], [67, 4, 1, "", "mode"], [67, 4, 1, "", "name"], [67, 4, 1, "", "obfuscateDate"], [67, 4, 1, "", "obfuscateRefSource"], [67, 4, 1, "", "outputAnnotatorType"], [67, 4, 1, "", "outputAsDocument"], [67, 2, 1, "", "pretrained"], [67, 4, 1, "", "regexEntities"], [67, 4, 1, "", "regexOverride"], [67, 4, 1, "", "region"], [67, 4, 1, "", "returnEntityMappings"], [67, 4, 1, "", "sameEntityThreshold"], [67, 4, 1, "", "sameLengthFormattedEntities"], [67, 4, 1, "", "seed"], [67, 2, 1, "", "setAgeRanges"], [67, 2, 1, "", "setBlackList"], [67, 2, 1, "", "setConsistentObfuscation"], [67, 2, 1, "", "setDateFormats"], [67, 2, 1, "", "setDateTag"], [67, 2, 1, "", "setDateToYear"], [67, 2, 1, "", "setDays"], [67, 2, 1, "", "setFixedMaskLength"], [67, 2, 1, "", "setGenderAwareness"], [67, 2, 1, "", "setIgnoreRegex"], [67, 2, 1, "", "setIsRandomDateDisplacement"], [67, 2, 1, "", "setLanguage"], [67, 2, 1, "", "setMappingsColumn"], [67, 2, 1, "", "setMaskingPolicy"], [67, 2, 1, "", "setMinYear"], [67, 2, 1, "", "setMode"], [67, 2, 1, "", "setObfuscateDate"], [67, 2, 1, "", "setObfuscateRefSource"], [67, 2, 1, "", "setOutputAsDocument"], [67, 2, 1, "", "setRegexOverride"], [67, 2, 1, "", "setRegion"], [67, 2, 1, "", "setReturnEntityMappings"], [67, 2, 1, "", "setSameEntityThreshold"], [67, 2, 1, "", "setSameLengthFormattedEntities"], [67, 2, 1, "", "setSeed"], [67, 2, 1, "", "setUnnormalizedDateMode"], [67, 2, 1, "", "setUseShifDays"], [67, 2, 1, "", "setZipCodeTag"], [67, 4, 1, "", "unnormalizedDateMode"], [67, 4, 1, "", "useShifDays"], [67, 4, 1, "", "zipCodeTag"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, 1, 1, "", "DocumentHashCoder"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder": [[68, 4, 1, "", "dateShiftColumn"], [68, 4, 1, "", "inputAnnotatorTypes"], [68, 4, 1, "", "name"], [68, 4, 1, "", "newDateShift"], [68, 4, 1, "", "outputAnnotatorType"], [68, 4, 1, "", "patientIdColumn"], [68, 4, 1, "", "rangeDays"], [68, 4, 1, "", "seed"], [68, 2, 1, "", "setDateShiftColumn"], [68, 2, 1, "", "setNewDateShift"], [68, 2, 1, "", "setParams"], [68, 2, 1, "", "setPatientIdColumn"], [68, 2, 1, "", "setRangeDays"], [68, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, 1, 1, "", "NameChunkObfuscator"], [70, 1, 1, "", "NameChunkObfuscatorApproach"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator": [[70, 4, 1, "", "genderAwareness"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "language"], [70, 4, 1, "", "nameEntities"], [70, 4, 1, "", "obfuscateRefSource"], [70, 4, 1, "", "outputAnnotatorType"], [70, 4, 1, "", "sameLength"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setGenderAwareness"], [70, 2, 1, "", "setLanguage"], [70, 2, 1, "", "setNameEntities"], [70, 2, 1, "", "setObfuscateRefSource"], [70, 2, 1, "", "setSameLength"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach": [[70, 4, 1, "", "genderAwareness"], [70, 4, 1, "", "inputAnnotatorTypes"], [70, 4, 1, "", "language"], [70, 4, 1, "", "nameEntities"], [70, 4, 1, "", "obfuscateRefFile"], [70, 4, 1, "", "obfuscateRefSource"], [70, 4, 1, "", "outputAnnotatorType"], [70, 4, 1, "", "refFileFormat"], [70, 4, 1, "", "refSep"], [70, 4, 1, "", "sameLength"], [70, 4, 1, "", "seed"], [70, 2, 1, "", "setGenderAwareness"], [70, 2, 1, "", "setLanguage"], [70, 2, 1, "", "setNameEntities"], [70, 2, 1, "", "setObfuscateRefFile"], [70, 2, 1, "", "setObfuscateRefSource"], [70, 2, 1, "", "setRefFileFormat"], [70, 2, 1, "", "setRefSep"], [70, 2, 1, "", "setSameLength"], [70, 2, 1, "", "setSeed"]], "sparknlp_jsl.annotator.deid.reIdentification": [[71, 1, 1, "", "ReIdentification"]], "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification": [[71, 4, 1, "", "inputAnnotatorTypes"], [71, 4, 1, "", "name"], [71, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.replacer": [[72, 1, 1, "", "Replacer"]], "sparknlp_jsl.annotator.deid.replacer.Replacer": [[72, 2, 1, "", "getUseReplacement"], [72, 4, 1, "", "inputAnnotatorTypes"], [72, 4, 1, "", "name"], [72, 4, 1, "", "outputAnnotatorType"], [72, 2, 1, "", "setUseReplacement"], [72, 4, 1, "", "useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[74, 0, 0, "-", "ner_disambiguator"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, 1, 1, "", "NerDisambiguator"], [74, 1, 1, "", "NerDisambiguatorModel"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator": [[74, 4, 1, "", "embeddingTypeParam"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "levenshteinDistanceThresholdParam"], [74, 4, 1, "", "narrowWithApproximateMatching"], [74, 4, 1, "", "nearMatchingGapParam"], [74, 4, 1, "", "numFirstChars"], [74, 4, 1, "", "outputAnnotatorType"], [74, 4, 1, "", "predictionsLimit"], [74, 4, 1, "", "s3KnowledgeBaseName"], [74, 2, 1, "", "setEmbeddingType"], [74, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [74, 2, 1, "", "setNarrowWithApproximateMatching"], [74, 2, 1, "", "setNearMatchingGapParam"], [74, 2, 1, "", "setNumFirstChars"], [74, 2, 1, "", "setPredictionLimit"], [74, 2, 1, "", "setS3KnowledgeBaseName"], [74, 2, 1, "", "setTokenSearch"], [74, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel": [[74, 4, 1, "", "embeddingTypeParam"], [74, 4, 1, "", "inputAnnotatorTypes"], [74, 4, 1, "", "levenshteinDistanceThresholdParam"], [74, 4, 1, "", "name"], [74, 4, 1, "", "narrowWithApproximateMatching"], [74, 4, 1, "", "nearMatchingGapParam"], [74, 4, 1, "", "numFirstChars"], [74, 4, 1, "", "outputAnnotatorType"], [74, 4, 1, "", "predictionsLimit"], [74, 2, 1, "", "pretrained"], [74, 2, 1, "", "setEmbeddingType"], [74, 2, 1, "", "setLevenshteinDistanceThresholdParam"], [74, 2, 1, "", "setNarrowWithApproximateMatching"], [74, 2, 1, "", "setNearMatchingGapParam"], [74, 2, 1, "", "setNumFirstChars"], [74, 2, 1, "", "setPredictionLimit"], [74, 2, 1, "", "setTokenSearch"], [74, 4, 1, "", "tokenSearch"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, 1, 1, "", "Doc2ChunkInternal"]], "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal": [[75, 4, 1, "", "chunkCol"], [75, 4, 1, "", "failOnMissing"], [75, 4, 1, "", "inputAnnotatorTypes"], [75, 4, 1, "", "isArray"], [75, 4, 1, "", "lowerCase"], [75, 4, 1, "", "name"], [75, 2, 1, "", "setChunkCol"], [75, 2, 1, "", "setFailOnMissing"], [75, 2, 1, "", "setIsArray"], [75, 2, 1, "", "setLowerCase"], [75, 2, 1, "", "setParams"], [75, 2, 1, "", "setStartCol"], [75, 2, 1, "", "setStartColByTokenIndex"], [75, 4, 1, "", "startCol"], [75, 4, 1, "", "startColByTokenIndex"]], "sparknlp_jsl.annotator.embeddings": [[76, 0, 0, "-", "average_embeddings"], [77, 0, 0, "-", "bert_sentence_embeddings"], [78, 0, 0, "-", "entity_chunk_embeddings"], [79, 0, 0, "-", "extractive_summarization"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, 1, 1, "", "AverageEmbeddings"]], "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings": [[76, 4, 1, "", "inputAnnotatorTypes"], [76, 4, 1, "", "name"], [76, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, 1, 1, "", "BertSentenceChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings": [[77, 4, 1, "", "chunkWeight"], [77, 4, 1, "", "inputAnnotatorTypes"], [77, 2, 1, "", "load"], [77, 4, 1, "", "name"], [77, 4, 1, "", "outputAnnotatorType"], [77, 2, 1, "", "pretrained"], [77, 2, 1, "", "setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, 1, 1, "", "EntityChunkEmbeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings": [[78, 4, 1, "", "entityWeights"], [78, 4, 1, "", "inputAnnotatorTypes"], [78, 4, 1, "", "maxSyntacticDistance"], [78, 4, 1, "", "name"], [78, 4, 1, "", "outputAnnotatorType"], [78, 2, 1, "", "pretrained"], [78, 2, 1, "", "setEntityWeights"], [78, 2, 1, "", "setMaxSyntacticDistance"], [78, 2, 1, "", "setTargetEntities"], [78, 4, 1, "", "targetEntities"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[79, 1, 1, "", "ExtractiveSummarization"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization": [[79, 4, 1, "", "inputAnnotatorTypes"], [79, 4, 1, "", "name"], [79, 4, 1, "", "outputAnnotatorType"], [79, 4, 1, "", "returnSingleDocument"], [79, 2, 1, "", "setReturnSingleDocument"], [79, 2, 1, "", "setSimilarityThreshold"], [79, 2, 1, "", "setSummarySize"], [79, 4, 1, "", "similarityThreshold"], [79, 4, 1, "", "summarySize"]], "sparknlp_jsl.annotator.feature_assembler": [[81, 1, 1, "", "FeaturesAssembler"]], "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler": [[81, 4, 1, "", "inputAnnotatorTypes"], [81, 4, 1, "", "inputCols"], [81, 4, 1, "", "name"], [81, 4, 1, "", "outputAnnotatorType"], [81, 4, 1, "", "outputCol"], [81, 2, 1, "", "setInputCols"], [81, 2, 1, "", "setOutputCol"], [81, 2, 1, "", "setParams"], [81, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.filtering_params": [[82, 1, 1, "", "FilteringParams"]], "sparknlp_jsl.annotator.filtering_params.FilteringParams": [[82, 4, 1, "", "blackList"], [82, 4, 1, "", "criteria"], [82, 4, 1, "", "entitiesConfidence"], [82, 4, 1, "", "filterValue"], [82, 4, 1, "", "regex"], [82, 2, 1, "", "setAllowList"], [82, 2, 1, "", "setBlackList"], [82, 2, 1, "", "setCriteria"], [82, 2, 1, "", "setDenyList"], [82, 2, 1, "", "setFilterValue"], [82, 2, 1, "", "setRegex"], [82, 2, 1, "", "setWhiteList"], [82, 4, 1, "", "whiteList"]], "sparknlp_jsl.annotator.generic_classifier": [[83, 0, 0, "-", "generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[83, 1, 1, "", "GenericClassifierApproach"], [83, 1, 1, "", "GenericClassifierModel"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach": [[83, 4, 1, "", "batchSize"], [83, 4, 1, "", "dropout"], [83, 4, 1, "", "epochsN"], [83, 4, 1, "", "featureScaling"], [83, 4, 1, "", "fixImbalance"], [83, 4, 1, "", "inputAnnotatorTypes"], [83, 4, 1, "", "labelColumn"], [83, 4, 1, "", "learningRate"], [83, 4, 1, "", "modelFile"], [83, 4, 1, "", "multiClass"], [83, 4, 1, "", "outputAnnotatorType"], [83, 4, 1, "", "outputLogsPath"], [83, 2, 1, "", "setBatchSize"], [83, 2, 1, "", "setDropout"], [83, 2, 1, "", "setEpochsNumber"], [83, 2, 1, "", "setFeatureScaling"], [83, 2, 1, "", "setFixImbalance"], [83, 2, 1, "", "setLabelCol"], [83, 2, 1, "", "setLearningRate"], [83, 2, 1, "", "setModelFile"], [83, 2, 1, "", "setMultiClass"], [83, 2, 1, "", "setOutputLogsPath"], [83, 2, 1, "", "setValidationSplit"], [83, 4, 1, "", "validationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel": [[83, 4, 1, "", "classes"], [83, 4, 1, "", "inputAnnotatorTypes"], [83, 4, 1, "", "multiClass"], [83, 4, 1, "", "name"], [83, 4, 1, "", "outputAnnotatorType"], [83, 2, 1, "", "pretrained"], [83, 2, 1, "", "setMultiClass"]], "sparknlp_jsl.annotator.merge": [[86, 0, 0, "-", "chunk_merge"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[86, 1, 1, "", "ChunkMergeApproach"], [86, 1, 1, "", "ChunkMergeModel"], [86, 1, 1, "", "MergeCommonParams"], [86, 1, 1, "", "MergePrioritizationParams"], [86, 1, 1, "", "MergeResourceParams"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel": [[86, 4, 1, "", "inputAnnotatorTypes"], [86, 4, 1, "", "name"], [86, 4, 1, "", "outputAnnotatorType"], [86, 2, 1, "", "pretrained"], [86, 2, 1, "", "setInputCols"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams": [[86, 4, 1, "", "mergeOverlapping"], [86, 2, 1, "", "setMergeOverlapping"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams": [[86, 4, 1, "", "chunkPrecedence"], [86, 4, 1, "", "chunkPrecedenceValuePrioritization"], [86, 4, 1, "", "defaultConfidence"], [86, 4, 1, "", "orderingFeatures"], [86, 4, 1, "", "selectionStrategy"], [86, 2, 1, "", "setChunkPrecedence"], [86, 2, 1, "", "setChunkPrecedenceValuePrioritization"], [86, 2, 1, "", "setDefaultConfidence"], [86, 2, 1, "", "setOrderingFeatures"], [86, 2, 1, "", "setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams": [[86, 4, 1, "", "entitiesConfidenceResource"], [86, 4, 1, "", "falsePositivesResource"], [86, 4, 1, "", "replaceDictResource"], [86, 2, 1, "", "setEntitiesConfidenceResource"], [86, 2, 1, "", "setFalsePositivesResource"], [86, 2, 1, "", "setReplaceDictResource"]], "sparknlp_jsl.annotator.ner": [[89, 0, 0, "-", "iob_tagger"], [90, 0, 0, "-", "medical_ner"], [91, 0, 0, "-", "ner_chunker"], [92, 0, 0, "-", "ner_converter_internal"], [93, 0, 0, "-", "ner_template_render"], [94, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[89, 1, 1, "", "IOBTagger"]], "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger": [[89, 4, 1, "", "inputAnnotatorTypes"], [89, 4, 1, "", "name"], [89, 4, 1, "", "outputAnnotatorType"], [89, 4, 1, "", "scheme"], [89, 2, 1, "", "setScheme"]], "sparknlp_jsl.annotator.ner.medical_ner": [[90, 1, 1, "", "MedicalNerApproach"], [90, 1, 1, "", "MedicalNerModel"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach": [[90, 4, 1, "", "batchSize"], [90, 4, 1, "", "configProtoBytes"], [90, 4, 1, "", "dropout"], [90, 4, 1, "", "earlyStoppingCriterion"], [90, 4, 1, "", "earlyStoppingPatience"], [90, 4, 1, "", "enableMemoryOptimizer"], [90, 4, 1, "", "graphFile"], [90, 4, 1, "", "graphFolder"], [90, 4, 1, "", "includeAllConfidenceScores"], [90, 4, 1, "", "includeConfidence"], [90, 4, 1, "", "inputAnnotatorTypes"], [90, 4, 1, "", "logPrefix"], [90, 4, 1, "", "lr"], [90, 4, 1, "", "outputAnnotatorType"], [90, 4, 1, "", "overrideExistingTags"], [90, 4, 1, "", "po"], [90, 4, 1, "", "pretrainedModelPath"], [90, 4, 1, "", "randomValidationSplitPerEpoch"], [90, 4, 1, "", "sentenceTokenIndex"], [90, 2, 1, "", "setBatchSize"], [90, 2, 1, "", "setConfigProtoBytes"], [90, 2, 1, "", "setDropout"], [90, 2, 1, "", "setEarlyStoppingCriterion"], [90, 2, 1, "", "setEarlyStoppingPatience"], [90, 2, 1, "", "setEnableMemoryOptimizer"], [90, 2, 1, "", "setGraphFile"], [90, 2, 1, "", "setGraphFolder"], [90, 2, 1, "", "setIncludeAllConfidenceScores"], [90, 2, 1, "", "setIncludeConfidence"], [90, 2, 1, "", "setLogPrefix"], [90, 2, 1, "", "setLr"], [90, 2, 1, "", "setOverrideExistingTags"], [90, 2, 1, "", "setPo"], [90, 2, 1, "", "setPretrainedModelPath"], [90, 2, 1, "", "setRandomValidationSplitPerEpoch"], [90, 2, 1, "", "setSentenceTokenIndex"], [90, 2, 1, "", "setTagsMapping"], [90, 2, 1, "", "setUseBestModel"], [90, 2, 1, "", "setUseContrib"], [90, 2, 1, "", "setValidationSplit"], [90, 4, 1, "", "useBestModel"], [90, 4, 1, "", "useContrib"]], "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel": [[90, 4, 1, "", "classes"], [90, 4, 1, "", "configProtoBytes"], [90, 2, 1, "", "getClasses"], [90, 2, 1, "", "getTrainingClassDistribution"], [90, 4, 1, "", "includeAllConfidenceScores"], [90, 4, 1, "", "includeConfidence"], [90, 4, 1, "", "inferenceBatchSize"], [90, 4, 1, "", "inputAnnotatorTypes"], [90, 4, 1, "", "labelCasing"], [90, 2, 1, "", "loadSavedModel"], [90, 4, 1, "", "name"], [90, 4, 1, "", "outputAnnotatorType"], [90, 2, 1, "", "pretrained"], [90, 4, 1, "", "sentenceTokenIndex"], [90, 2, 1, "", "setConfigProtoBytes"], [90, 2, 1, "", "setIncludeConfidence"], [90, 2, 1, "", "setInferenceBatchSize"], [90, 2, 1, "", "setLabelCasing"], [90, 2, 1, "", "setSentenceTokenIndex"], [90, 4, 1, "", "trainingClassDistribution"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[91, 1, 1, "", "NerChunker"]], "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker": [[91, 4, 1, "", "inputAnnotatorTypes"], [91, 4, 1, "", "name"], [91, 4, 1, "", "outputAnnotatorType"], [91, 4, 1, "", "regexParsers"], [91, 2, 1, "", "setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[92, 1, 1, "", "CommonNerConverterInternalParams"], [92, 1, 1, "", "NerConverterInternal"], [92, 1, 1, "", "NerConverterInternalModel"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams": [[92, 4, 1, "", "greedyMode"], [92, 4, 1, "", "ignoreStopWords"], [92, 4, 1, "", "preservePosition"], [92, 2, 1, "", "setAllowList"], [92, 2, 1, "", "setDenyList"], [92, 2, 1, "", "setGreedyMode"], [92, 2, 1, "", "setIgnoreStopWords"], [92, 2, 1, "", "setPreservePosition"], [92, 2, 1, "", "setThreshold"], [92, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal": [[92, 4, 1, "", "inputAnnotatorTypes"], [92, 4, 1, "", "name"], [92, 4, 1, "", "outputAnnotatorType"], [92, 4, 1, "", "replaceDictResource"], [92, 4, 1, "", "replaceLabels"], [92, 2, 1, "", "setReplaceDictResource"], [92, 2, 1, "", "setReplaceLabels"]], "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel": [[92, 4, 1, "", "inputAnnotatorTypes"], [92, 4, 1, "", "name"], [92, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[93, 1, 1, "", "NerTemplateRenderModel"]], "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel": [[93, 4, 1, "", "combineEntities"], [93, 4, 1, "", "entityScopes"], [93, 4, 1, "", "inputAnnotatorTypes"], [93, 4, 1, "", "outputAnnotatorType"], [93, 4, 1, "", "permuteEntities"], [93, 2, 1, "", "pretrained"], [93, 4, 1, "", "randomSeed"], [93, 4, 1, "", "resampleEntities"], [93, 2, 1, "", "setCombineEntities"], [93, 2, 1, "", "setEntityScopes"], [93, 2, 1, "", "setPermuteEntities"], [93, 2, 1, "", "setRandomSeed"], [93, 2, 1, "", "setResampleEntities"], [93, 2, 1, "", "setTemplates"], [93, 4, 1, "", "templates"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[94, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel": [[94, 2, 1, "", "getClasses"], [94, 4, 1, "", "ignoreEntities"], [94, 4, 1, "", "inputAnnotatorTypes"], [94, 2, 1, "", "load"], [94, 4, 1, "", "name"], [94, 4, 1, "", "outputAnnotatorType"], [94, 4, 1, "", "predictionThreshold"], [94, 2, 1, "", "pretrained"], [94, 2, 1, "", "setEntityDefinitions"], [94, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.normalizer": [[95, 0, 0, "-", "date_normalizer"], [96, 0, 0, "-", "drug_normalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[95, 1, 1, "", "DateNormalizer"]], "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer": [[95, 4, 1, "", "anchorDateDay"], [95, 4, 1, "", "anchorDateMonth"], [95, 4, 1, "", "anchorDateYear"], [95, 4, 1, "", "defaultReplacementDay"], [95, 4, 1, "", "defaultReplacementMonth"], [95, 4, 1, "", "defaultReplacementYear"], [95, 4, 1, "", "inputAnnotatorTypes"], [95, 4, 1, "", "name"], [95, 4, 1, "", "outputAnnotatorType"], [95, 4, 1, "", "outputDateFormat"], [95, 2, 1, "", "setAnchorDateDay"], [95, 2, 1, "", "setAnchorDateMonth"], [95, 2, 1, "", "setAnchorDateYear"], [95, 2, 1, "", "setDefaultReplacementDay"], [95, 2, 1, "", "setDefaultReplacementMonth"], [95, 2, 1, "", "setDefaultReplacementYear"], [95, 2, 1, "", "setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[96, 1, 1, "", "DrugNormalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer": [[96, 4, 1, "", "inputAnnotatorTypes"], [96, 4, 1, "", "lowercase"], [96, 4, 1, "", "outputAnnotatorType"], [96, 4, 1, "", "policy"], [96, 2, 1, "", "setLowercase"], [96, 2, 1, "", "setPolicy"]], "sparknlp_jsl.annotator.qa": [[98, 0, 0, "-", "beam_search_params"], [100, 0, 0, "-", "medical_qa"], [101, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[98, 1, 1, "", "BeamSearchParams"]], "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams": [[98, 4, 1, "", "doSample"], [98, 4, 1, "", "ignoreTokenIds"], [98, 4, 1, "", "maxContextLength"], [98, 4, 1, "", "maxNewTokens"], [98, 4, 1, "", "noRepeatNgramSize"], [98, 2, 1, "", "setDoSample"], [98, 2, 1, "", "setIgnoreTokenIds"], [98, 2, 1, "", "setMaxContextLength"], [98, 2, 1, "", "setMaxNewTokens"], [98, 2, 1, "", "setNoRepeatNgramSize"], [98, 2, 1, "", "setRandomSeed"], [98, 2, 1, "", "setTopK"], [98, 4, 1, "", "topK"]], "sparknlp_jsl.annotator.qa.medical_qa": [[100, 1, 1, "", "MedicalQuestionAnswering"]], "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering": [[100, 4, 1, "", "configProtoBytes"], [100, 4, 1, "", "customPrompt"], [100, 2, 1, "", "getQuestionTypes"], [100, 4, 1, "", "inputAnnotatorTypes"], [100, 2, 1, "", "loadMedicalTextGenerator"], [100, 2, 1, "", "loadSavedModel"], [100, 4, 1, "", "name"], [100, 4, 1, "", "outputAnnotatorType"], [100, 2, 1, "", "pretrained"], [100, 4, 1, "", "questionType"], [100, 2, 1, "", "setConfigProtoBytes"], [100, 2, 1, "", "setCustomPrompt"], [100, 2, 1, "", "setQuestionAnswerTerminals"], [100, 2, 1, "", "setQuestionPrompts"], [100, 2, 1, "", "setQuestionSkipLastToken"], [100, 2, 1, "", "setQuestionType"], [100, 2, 1, "", "setUseCache"], [100, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[101, 1, 1, "", "NerQuestionGenerator"]], "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator": [[101, 4, 1, "", "entities1"], [101, 4, 1, "", "entities2"], [101, 4, 1, "", "inputAnnotatorTypes"], [101, 4, 1, "", "name"], [101, 4, 1, "", "outputAnnotatorType"], [101, 4, 1, "", "questionMark"], [101, 4, 1, "", "questionPronoun"], [101, 2, 1, "", "setEntities1"], [101, 2, 1, "", "setEntities2"], [101, 2, 1, "", "setQuestionMark"], [101, 2, 1, "", "setQuestionPronoun"], [101, 2, 1, "", "setStrategyType"], [101, 4, 1, "", "strategyType"]], "sparknlp_jsl.annotator.re": [[103, 0, 0, "-", "relation_extraction"], [104, 0, 0, "-", "relation_extraction_dl"], [105, 0, 0, "-", "relation_ner_chunk_filter"], [106, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction": [[103, 1, 1, "", "GenericREModel"], [103, 1, 1, "", "PosologyREModel"], [103, 1, 1, "", "RelationExtractionApproach"], [103, 1, 1, "", "RelationExtractionModel"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach": [[103, 4, 1, "", "customLabels"], [103, 4, 1, "", "fromEntityBeginCol"], [103, 4, 1, "", "fromEntityEndCol"], [103, 4, 1, "", "fromEntityLabelCol"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 4, 1, "", "maxSyntacticDistance"], [103, 4, 1, "", "name"], [103, 4, 1, "", "outputAnnotatorType"], [103, 4, 1, "", "overrideExistingLabels"], [103, 4, 1, "", "pretrainedModelPath"], [103, 4, 1, "", "relationDirectionCol"], [103, 2, 1, "", "setCustomLabels"], [103, 2, 1, "", "setFromEntity"], [103, 2, 1, "", "setMaxSyntacticDistance"], [103, 2, 1, "", "setPretrainedModelPath"], [103, 2, 1, "", "setRelationDirectionCol"], [103, 2, 1, "", "setToEntity"], [103, 2, 1, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels", "set\u041everrideExistingLabels"], [103, 4, 1, "", "toEntityBeginCol"], [103, 4, 1, "", "toEntityEndCol"], [103, 4, 1, "", "toEntityLabelCol"]], "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel": [[103, 4, 1, "", "classes"], [103, 4, 1, "", "customLabels"], [103, 2, 1, "", "getClasses"], [103, 2, 1, "", "getRelationTypePerPair"], [103, 4, 1, "", "inputAnnotatorTypes"], [103, 4, 1, "", "maxSyntacticDistance"], [103, 4, 1, "", "name"], [103, 4, 1, "", "outputAnnotatorType"], [103, 4, 1, "", "predictionThreshold"], [103, 2, 1, "", "pretrained"], [103, 4, 1, "", "relationPairs"], [103, 4, 1, "", "relationPairsCaseSensitive"], [103, 2, 1, "", "setCustomLabels"], [103, 2, 1, "", "setMaxSyntacticDistance"], [103, 2, 1, "", "setPredictionThreshold"], [103, 2, 1, "", "setRelationPairs"], [103, 2, 1, "", "setRelationPairsCaseSensitive"], [103, 2, 1, "", "setRelationTypePerPair"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[104, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel": [[104, 4, 1, "", "batchSize"], [104, 4, 1, "", "classes"], [104, 4, 1, "", "customLabels"], [104, 2, 1, "", "getClasses"], [104, 4, 1, "", "inputAnnotatorTypes"], [104, 2, 1, "", "loadSavedModel"], [104, 4, 1, "", "name"], [104, 4, 1, "", "outputAnnotatorType"], [104, 4, 1, "", "predictionThreshold"], [104, 2, 1, "", "pretrained"], [104, 2, 1, "", "setBatchSize"], [104, 2, 1, "", "setCaseSensitive"], [104, 2, 1, "", "setCustomLabels"], [104, 2, 1, "", "setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[105, 1, 1, "", "RENerChunksFilter"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter": [[105, 4, 1, "", "docLevelRelations"], [105, 4, 1, "", "inputAnnotatorTypes"], [105, 4, 1, "", "maxSyntacticDistance"], [105, 4, 1, "", "name"], [105, 4, 1, "", "outputAnnotatorType"], [105, 4, 1, "", "relationPairs"], [105, 4, 1, "", "relationPairsCaseSensitive"], [105, 2, 1, "", "setDocLevelRelations"], [105, 2, 1, "", "setMaxSyntacticDistance"], [105, 2, 1, "", "setRelationPairs"], [105, 2, 1, "", "setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[106, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[106, 2, 1, "", "getClasses"], [106, 4, 1, "", "inputAnnotatorTypes"], [106, 2, 1, "", "loadSavedModel"], [106, 4, 1, "", "multiLabel"], [106, 4, 1, "", "negativeRelationships"], [106, 4, 1, "", "outputAnnotatorType"], [106, 4, 1, "", "predictionThreshold"], [106, 2, 1, "", "pretrained"], [106, 2, 1, "", "setNegativeRelationships"], [106, 2, 1, "", "setRelationalCategories"]], "sparknlp_jsl.annotator.resolution": [[108, 0, 0, "-", "resolver_merger"], [109, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[108, 1, 1, "", "ResolverMerger"]], "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger": [[108, 4, 1, "", "inputAnnotatorTypes"], [108, 4, 1, "", "name"], [108, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[109, 1, 1, "", "SentenceEntityResolverApproach"], [109, 1, 1, "", "SentenceEntityResolverModel"], [109, 1, 1, "", "SentenceResolverParams"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach": [[109, 4, 1, "", "aux_label_col"], [109, 4, 1, "", "dropCodesList"], [109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "labelCol"], [109, 4, 1, "", "normalizedCol"], [109, 4, 1, "", "outputAnnotatorType"], [109, 4, 1, "", "overrideExistingCodes"], [109, 4, 1, "", "pretrainedModelPath"], [109, 4, 1, "", "returnCosineDistances"], [109, 2, 1, "", "setAuxLabelCol"], [109, 2, 1, "", "setDropCodesList"], [109, 2, 1, "", "setExtractCosineDistances"], [109, 2, 1, "", "setLabelCol"], [109, 2, 1, "", "setNormalizedCol"], [109, 2, 1, "", "setOverrideExistingCodes"], [109, 2, 1, "", "setPretrainedModelPath"], [109, 2, 1, "", "setUseAuxLabel"], [109, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[109, 4, 1, "", "aux_label_col"], [109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "name"], [109, 4, 1, "", "outputAnnotatorType"], [109, 2, 1, "", "pretrained"], [109, 4, 1, "", "returnCosineDistances"], [109, 4, 1, "", "searchTree"], [109, 2, 1, "", "setAuxLabelCol"], [109, 2, 1, "", "setSearchTree"], [109, 2, 1, "", "setUseAuxLabel"], [109, 4, 1, "", "useAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams": [[109, 4, 1, "", "confidenceFunction"], [109, 4, 1, "", "distanceFunction"], [109, 4, 1, "", "inputAnnotatorTypes"], [109, 4, 1, "", "missAsEmpty"], [109, 4, 1, "", "neighbours"], [109, 2, 1, "", "setConfidenceFunction"], [109, 2, 1, "", "setDistanceFunction"], [109, 2, 1, "", "setMissAsEmpty"], [109, 2, 1, "", "setNeighbours"], [109, 2, 1, "", "setThreshold"], [109, 4, 1, "", "threshold"]], "sparknlp_jsl.annotator.resolution2_chunk": [[110, 1, 1, "", "Resolution2Chunk"]], "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk": [[110, 4, 1, "", "inputAnnotatorTypes"], [110, 4, 1, "", "name"], [110, 4, 1, "", "outputAnnotatorType"], [110, 2, 1, "", "setParams"]], "sparknlp_jsl.annotator.router": [[111, 1, 1, "", "Router"]], "sparknlp_jsl.annotator.router.Router": [[111, 4, 1, "", "filterFieldsElements"], [111, 4, 1, "", "inputAnnotatorTypes"], [111, 4, 1, "", "inputType"], [111, 4, 1, "", "metadataField"], [111, 4, 1, "", "name"], [111, 4, 1, "", "outputAnnotatorType"], [111, 2, 1, "", "setFilterFieldsElements"], [111, 2, 1, "", "setInputCols"], [111, 2, 1, "", "setInputType"], [111, 2, 1, "", "setMetadataField"], [111, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.annotator.seq2seq": [[113, 0, 0, "-", "medical_encoder_decoder"], [114, 0, 0, "-", "medical_summarizer"], [115, 0, 0, "-", "medical_text_generator"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[113, 1, 1, "", "MedicalEncoderDecoder"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder": [[113, 4, 1, "", "configProtoBytes"], [113, 4, 1, "", "doSample"], [113, 4, 1, "", "ignoreTokenIds"], [113, 4, 1, "", "inputAnnotatorTypes"], [113, 4, 1, "", "maxNewTokens"], [113, 4, 1, "", "maxTextLength"], [113, 4, 1, "", "name"], [113, 4, 1, "", "noRepeatNgramSize"], [113, 4, 1, "", "outputAnnotatorType"], [113, 4, 1, "", "randomSeed"], [113, 4, 1, "", "refineChunkSize"], [113, 4, 1, "", "refineMaxAttempts"], [113, 4, 1, "", "refineSummary"], [113, 4, 1, "", "refineSummaryTargetLength"], [113, 2, 1, "", "setConfigProtoBytes"], [113, 2, 1, "", "setDoSample"], [113, 2, 1, "", "setIgnoreTokenIds"], [113, 2, 1, "", "setMaxNewTokens"], [113, 2, 1, "", "setMaxTextLength"], [113, 2, 1, "", "setNoRepeatNgramSize"], [113, 2, 1, "", "setRandomSeed"], [113, 2, 1, "", "setRefineChunkSize"], [113, 2, 1, "", "setRefineMaxAttempts"], [113, 2, 1, "", "setRefineSummary"], [113, 2, 1, "", "setRefineSummaryTargetLength"], [113, 2, 1, "", "setStopAtEos"], [113, 2, 1, "", "setTopK"], [113, 4, 1, "", "stopAtEos"], [113, 4, 1, "", "task"], [113, 4, 1, "", "topK"], [113, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[114, 1, 1, "", "MedicalSummarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer": [[114, 2, 1, "", "loadSavedModel"], [114, 4, 1, "", "name"], [114, 2, 1, "", "pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[115, 1, 1, "", "MedicalTextGenerator"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator": [[115, 4, 1, "", "configProtoBytes"], [115, 4, 1, "", "customPrompt"], [115, 4, 1, "", "inputAnnotatorTypes"], [115, 2, 1, "", "loadSavedModel"], [115, 4, 1, "", "maxTextLength"], [115, 4, 1, "", "modelType"], [115, 4, 1, "", "name"], [115, 4, 1, "", "outputAnnotatorType"], [115, 2, 1, "", "pretrained"], [115, 2, 1, "", "setConfigProtoBytes"], [115, 2, 1, "", "setCustomPrompt"], [115, 2, 1, "", "setMaxTextLength"], [115, 2, 1, "", "setStopAtEos"], [115, 2, 1, "", "setUseCache"], [115, 4, 1, "", "stopAtEos"], [115, 4, 1, "", "useCache"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[116, 1, 1, "", "SourceTrackingMetadataParams"]], "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams": [[116, 4, 1, "", "allPossibleFieldsToStandardize"], [116, 4, 1, "", "includeOutputColumn"], [116, 4, 1, "", "includeStandardField"], [116, 4, 1, "", "outputColumnKey"], [116, 2, 1, "", "setAllPossibleFieldsToStandardize"], [116, 2, 1, "", "setIncludeOutputColumn"], [116, 2, 1, "", "setIncludeStandardField"], [116, 2, 1, "", "setOutputColumnKey"], [116, 2, 1, "", "setStandardFieldKey"], [116, 4, 1, "", "standardFieldKey"]], "sparknlp_jsl.annotator.tf_graph_builder": [[117, 1, 1, "", "TFGraphBuilder"], [117, 1, 1, "", "TFGraphBuilderModel"]], "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder": [[117, 4, 1, "", "batchNorm"], [117, 2, 1, "", "getBatchNorm"], [117, 2, 1, "", "getGraphFile"], [117, 2, 1, "", "getGraphFolder"], [117, 2, 1, "", "getHiddenAct"], [117, 2, 1, "", "getHiddenActL2"], [117, 2, 1, "", "getHiddenLayers"], [117, 2, 1, "", "getHiddenUnitsNumber"], [117, 2, 1, "", "getHiddenWeightsL2"], [117, 2, 1, "", "getInputCols"], [117, 2, 1, "", "getIsLicensed"], [117, 2, 1, "", "getLabelColumn"], [117, 2, 1, "", "getMaxSequenceLength"], [117, 2, 1, "", "getModelName"], [117, 2, 1, "", "getOutputAct"], [117, 2, 1, "", "getUseRelationDirection"], [117, 4, 1, "", "graphFile"], [117, 4, 1, "", "graphFolder"], [117, 4, 1, "", "hiddenAct"], [117, 4, 1, "", "hiddenActL2"], [117, 4, 1, "", "hiddenLayers"], [117, 4, 1, "", "hiddenUnitsNumber"], [117, 4, 1, "", "hiddenWeightsL2"], [117, 4, 1, "", "inputCols"], [117, 4, 1, "", "isLicensed"], [117, 4, 1, "", "labelColumn"], [117, 4, 1, "", "maxSequenceLength"], [117, 4, 1, "", "modelName"], [117, 4, 1, "", "outputAct"], [117, 2, 1, "", "setBatchNorm"], [117, 2, 1, "", "setGraphFile"], [117, 2, 1, "", "setGraphFolder"], [117, 2, 1, "", "setHiddenAct"], [117, 2, 1, "", "setHiddenActL2"], [117, 2, 1, "", "setHiddenLayers"], [117, 2, 1, "", "setHiddenUnitsNumber"], [117, 2, 1, "", "setHiddenWeightsL2"], [117, 2, 1, "", "setInputCols"], [117, 2, 1, "", "setIsLicensed"], [117, 2, 1, "", "setLabelColumn"], [117, 2, 1, "", "setMaxSequenceLength"], [117, 2, 1, "", "setModelName"], [117, 2, 1, "", "setUseRelationDirection"], [117, 2, 1, "", "settOutputAct"], [117, 4, 1, "", "useRelationDirection"]], "sparknlp_jsl.annotator.windowed": [[119, 0, 0, "-", "windowed_sentence"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[119, 1, 1, "", "WindowedParams"], [119, 1, 1, "", "WindowedSentenceModel"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams": [[119, 4, 1, "", "glueString"], [119, 2, 1, "", "setGlueString"], [119, 2, 1, "", "setWindowSize"], [119, 4, 1, "", "windowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel": [[119, 4, 1, "", "inputAnnotatorTypes"], [119, 4, 1, "", "outputAnnotatorType"]], "sparknlp_jsl.common": [[121, 0, 0, "-", "annotator_approach_internal"], [122, 0, 0, "-", "annotator_model_internal"], [123, 0, 0, "-", "annotator_properties_internal"]], "sparknlp_jsl.common.annotator_approach_internal": [[121, 1, 1, "", "AnnotatorApproachInternal"]], "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal": [[121, 4, 1, "", "inputAnnotatorTypes"], [121, 4, 1, "", "outputAnnotatorType"], [121, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[122, 1, 1, "", "AnnotatorModelInternal"]], "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal": [[122, 4, 1, "", "inputAnnotatorTypes"], [122, 4, 1, "", "outputAnnotatorType"], [122, 2, 1, "", "setParams"], [122, 4, 1, "", "skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[123, 1, 1, "", "AnnotatorPropertiesInternal"]], "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal": [[123, 2, 1, "", "inputColsValidation"], [123, 2, 1, "", "setForceInputTypeValidation"]], "sparknlp_jsl.compatibility": [[125, 1, 1, "", "Compatibility"]], "sparknlp_jsl.compatibility.Compatibility": [[125, 2, 1, "", "findVersion"], [125, 2, 1, "", "showVersion"]], "sparknlp_jsl.custom_transformer": [[126, 1, 1, "", "CustomTransformer"]], "sparknlp_jsl.custom_transformer.CustomTransformer": [[126, 4, 1, "", "f"], [126, 2, 1, "", "setInputCol"], [126, 2, 1, "", "setOutputCol"]], "sparknlp_jsl.deidentification_module": [[127, 1, 1, "", "Deidentifier"]], "sparknlp_jsl.deidentification_module.Deidentifier": [[127, 2, 1, "", "deid_with_custom_pipeline"], [127, 2, 1, "", "deid_with_pretrained_pipeline"], [127, 2, 1, "", "deidentify"]], "sparknlp_jsl.eval": [[128, 1, 1, "", "NerCrfEvaluation"], [128, 1, 1, "", "NerDLEvaluation"], [128, 1, 1, "", "NerDLMetrics"], [128, 1, 1, "", "NorvigSpellEvaluation"], [128, 1, 1, "", "POSEvaluation"], [128, 1, 1, "", "SymSpellEvaluation"]], "sparknlp_jsl.eval.NerCrfEvaluation": [[128, 2, 1, "", "computeAccuracyAnnotator"], [128, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLEvaluation": [[128, 2, 1, "", "computeAccuracyAnnotator"], [128, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.NerDLMetrics": [[128, 2, 1, "", "computeMetricsFromDF"]], "sparknlp_jsl.eval.NorvigSpellEvaluation": [[128, 2, 1, "", "computeAccuracyAnnotator"], [128, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.POSEvaluation": [[128, 2, 1, "", "computeAccuracyAnnotator"], [128, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.eval.SymSpellEvaluation": [[128, 2, 1, "", "computeAccuracyAnnotator"], [128, 2, 1, "", "computeAccuracyModel"]], "sparknlp_jsl.finance": [[134, 0, 0, "-", "chunk_classification"], [139, 0, 0, "-", "graph"], [147, 0, 0, "-", "sequence_classification"], [152, 0, 0, "-", "sequence_generation"], [154, 0, 0, "-", "token_classification"]], "sparknlp_jsl.finance.chunk_classification": [[130, 0, 0, "-", "assertion"], [133, 0, 0, "-", "deid"], [137, 0, 0, "-", "resolution"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[129, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[129, 1, 1, "", "AssertionDLApproach"], [129, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel": [[129, 4, 1, "", "name"], [129, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid": [[131, 0, 0, "-", "deIdentification"], [132, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[131, 1, 1, "", "DeIdentification"], [131, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification": [[131, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel": [[131, 4, 1, "", "name"], [131, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[132, 1, 1, "", "FinanceDocumentHashCoder"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder": [[132, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[135, 0, 0, "-", "chunkmapper"], [136, 0, 0, "-", "docmapper"], [138, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[135, 1, 1, "", "ChunkMapperApproach"], [135, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[135, 4, 1, "", "name"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[135, 4, 1, "", "name"], [135, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[136, 1, 1, "", "DocMapperApproach"], [136, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach": [[136, 4, 1, "", "dictionary"], [136, 4, 1, "", "inputAnnotatorTypes"], [136, 4, 1, "", "name"], [136, 4, 1, "", "outputAnnotatorType"], [136, 2, 1, "", "setDictionary"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel": [[136, 4, 1, "", "inputAnnotatorTypes"], [136, 4, 1, "", "name"], [136, 4, 1, "", "outputAnnotatorType"], [136, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[138, 1, 1, "", "SentenceEntityResolverApproach"], [138, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[138, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph": [[140, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction": [[141, 0, 0, "-", "relation_extraction_dl"], [142, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[141, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[141, 2, 1, "", "loadSavedModel"], [141, 4, 1, "", "name"], [141, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[142, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[142, 2, 1, "", "loadSavedModel"], [142, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification": [[144, 0, 0, "-", "finance_bert_for_sequence_classification"], [145, 0, 0, "-", "finance_classifier_dl"], [146, 0, 0, "-", "finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[144, 1, 1, "", "FinanceBertForSequenceClassification"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification": [[144, 2, 1, "", "loadSavedModel"], [144, 2, 1, "", "loadSavedModelOpenSource"], [144, 4, 1, "", "name"], [144, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[145, 1, 1, "", "FinanceClassifierDLApproach"], [145, 1, 1, "", "FinanceClassifierDLModel"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel": [[145, 4, 1, "", "name"], [145, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[146, 1, 1, "", "FinanceDocumentMLClassifierApproach"], [146, 1, 1, "", "FinanceDocumentMLClassifierModel"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel": [[146, 4, 1, "", "name"], [146, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation": [[148, 0, 0, "-", "finance_encoder_decoder"], [149, 0, 0, "-", "finance_qa"], [150, 0, 0, "-", "finance_summarizer"], [151, 0, 0, "-", "finance_text_generator"], [153, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[148, 1, 1, "", "FinanceEncoderDecoder"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder": [[148, 4, 1, "", "name"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[149, 1, 1, "", "FinanceQuestionAnswering"]], "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering": [[149, 2, 1, "", "loadSavedModel"], [149, 4, 1, "", "name"], [149, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[150, 1, 1, "", "FinanceSummarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer": [[150, 2, 1, "", "loadSavedModel"], [150, 4, 1, "", "name"], [150, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[151, 1, 1, "", "FinanceTextGenerator"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator": [[151, 2, 1, "", "loadSavedModel"], [151, 4, 1, "", "name"], [151, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[153, 1, 1, "", "FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.token_classification": [[157, 0, 0, "-", "ner"]], "sparknlp_jsl.finance.token_classification.ner": [[155, 0, 0, "-", "finance_bert_for_token_classifier"], [156, 0, 0, "-", "finance_ner"], [158, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[155, 1, 1, "", "FinanceBertForTokenClassification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification": [[155, 2, 1, "", "loadSavedModel"], [155, 2, 1, "", "loadSavedModelOpenSource"], [155, 4, 1, "", "name"], [155, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[156, 1, 1, "", "FinanceNerApproach"], [156, 1, 1, "", "FinanceNerModel"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel": [[156, 2, 1, "", "loadSavedModel"], [156, 4, 1, "", "name"], [156, 2, 1, "", "pretrained"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[158, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[158, 2, 1, "", "load"], [158, 4, 1, "", "name"], [158, 2, 1, "", "pretrained"]], "sparknlp_jsl.functions": [[159, 6, 1, "", "profile"], [159, 6, 1, "", "profileESRDV21Y19"], [159, 6, 1, "", "profileV22"], [159, 6, 1, "", "profileV22Y17"], [159, 6, 1, "", "profileV22Y18"], [159, 6, 1, "", "profileV22Y19"], [159, 6, 1, "", "profileV22Y20"], [159, 6, 1, "", "profileV22Y21"], [159, 6, 1, "", "profileV22Y22"], [159, 6, 1, "", "profileV23"], [159, 6, 1, "", "profileV23Y18"], [159, 6, 1, "", "profileV23Y19"], [159, 6, 1, "", "profileV24"], [159, 6, 1, "", "profileV24Y17"], [159, 6, 1, "", "profileV24Y18"], [159, 6, 1, "", "profileV24Y19"], [159, 6, 1, "", "profileV24Y20"], [159, 6, 1, "", "profileV24Y21"], [159, 6, 1, "", "profileV24Y22"], [159, 6, 1, "", "profileV28"], [159, 6, 1, "", "profileV28Y24"]], "sparknlp_jsl.internal": [[161, 6, 1, "", "CustomLabels"], [161, 6, 1, "", "EntityWeights"], [161, 6, 1, "", "RelationalCategories"], [161, 6, 1, "", "TargetEntities"]], "sparknlp_jsl.legal": [[167, 0, 0, "-", "chunk_classification"], [172, 0, 0, "-", "graph"], [177, 0, 0, "-", "sequence_classification"], [181, 0, 0, "-", "sequence_generation"], [187, 0, 0, "-", "token_classification"]], "sparknlp_jsl.legal.chunk_classification": [[163, 0, 0, "-", "assertion"], [166, 0, 0, "-", "deid"], [170, 0, 0, "-", "resolution"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[162, 0, 0, "-", "assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[162, 1, 1, "", "AssertionDLApproach"], [162, 1, 1, "", "AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel": [[162, 4, 1, "", "name"], [162, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid": [[164, 0, 0, "-", "deIdentification"], [165, 0, 0, "-", "document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[164, 1, 1, "", "DeIdentification"], [164, 1, 1, "", "DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification": [[164, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel": [[164, 4, 1, "", "name"], [164, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[165, 1, 1, "", "LegalDocumentHashCoder"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder": [[165, 2, 1, "", "setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[168, 0, 0, "-", "chunkmapper"], [169, 0, 0, "-", "docmapper"], [171, 0, 0, "-", "sentence_entity_resolver"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[168, 1, 1, "", "ChunkMapperApproach"], [168, 1, 1, "", "ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach": [[168, 4, 1, "", "name"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel": [[168, 4, 1, "", "name"], [168, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[169, 1, 1, "", "DocMapperApproach"], [169, 1, 1, "", "DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach": [[169, 4, 1, "", "dictionary"], [169, 4, 1, "", "inputAnnotatorTypes"], [169, 4, 1, "", "name"], [169, 4, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "setDictionary"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel": [[169, 4, 1, "", "inputAnnotatorTypes"], [169, 4, 1, "", "name"], [169, 4, 1, "", "outputAnnotatorType"], [169, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[171, 1, 1, "", "SentenceEntityResolverApproach"], [171, 1, 1, "", "SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel": [[171, 4, 1, "", "name"], [171, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph": [[173, 0, 0, "-", "relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction": [[174, 0, 0, "-", "relation_extraction_dl"], [175, 0, 0, "-", "zero_shot_relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[174, 1, 1, "", "RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel": [[174, 2, 1, "", "loadSavedModel"], [174, 4, 1, "", "name"], [174, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[175, 1, 1, "", "ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel": [[175, 2, 1, "", "loadSavedModel"], [175, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification": [[178, 0, 0, "-", "legal_bert_for_sequence_classification"], [179, 0, 0, "-", "legal_classifier_dl"], [180, 0, 0, "-", "legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[178, 1, 1, "", "LegalBertForSequenceClassification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification": [[178, 2, 1, "", "loadSavedModel"], [178, 2, 1, "", "loadSavedModelOpenSource"], [178, 4, 1, "", "name"], [178, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[179, 1, 1, "", "LegalClassifierDLApproach"], [179, 1, 1, "", "LegalClassifierDLModel"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel": [[179, 4, 1, "", "name"], [179, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[180, 1, 1, "", "LegalDocumentMLClassifierApproach"], [180, 1, 1, "", "LegalDocumentMLClassifierModel"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel": [[180, 4, 1, "", "name"], [180, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation": [[182, 0, 0, "-", "legal_encoder_decoder"], [183, 0, 0, "-", "legal_qa"], [184, 0, 0, "-", "legal_summarizer"], [185, 0, 0, "-", "legal_text_generator"], [186, 0, 0, "-", "qa_ner_generator"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[182, 1, 1, "", "LegalEncoderDecoder"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder": [[182, 4, 1, "", "name"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[183, 1, 1, "", "LegalQuestionAnswering"]], "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering": [[183, 2, 1, "", "loadSavedModel"], [183, 4, 1, "", "name"], [183, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[184, 1, 1, "", "LegalSummarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer": [[184, 2, 1, "", "loadSavedModel"], [184, 4, 1, "", "name"], [184, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[185, 1, 1, "", "LegalTextGenerator"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator": [[185, 2, 1, "", "loadSavedModel"], [185, 4, 1, "", "name"], [185, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[186, 1, 1, "", "LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.token_classification": [[188, 0, 0, "-", "ner"]], "sparknlp_jsl.legal.token_classification.ner": [[189, 0, 0, "-", "legal_bert_for_token_classifier"], [190, 0, 0, "-", "legal_ner"], [191, 0, 0, "-", "zero_shot_ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[189, 1, 1, "", "LegalBertForTokenClassification"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification": [[189, 2, 1, "", "loadSavedModel"], [189, 2, 1, "", "loadSavedModelOpenSource"], [189, 4, 1, "", "name"], [189, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[190, 1, 1, "", "LegalNerApproach"], [190, 1, 1, "", "LegalNerModel"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel": [[190, 2, 1, "", "loadSavedModel"], [190, 4, 1, "", "name"], [190, 2, 1, "", "pretrained"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[191, 1, 1, "", "ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel": [[191, 2, 1, "", "load"], [191, 4, 1, "", "name"], [191, 2, 1, "", "pretrained"]], "sparknlp_jsl.modelTracer": [[192, 1, 1, "", "ModelTracer"]], "sparknlp_jsl.modelTracer.ModelTracer": [[192, 2, 1, "", "addUidCols"]], "sparknlp_jsl.nlp_test": [[194, 0, 0, "-", "bias"], [196, 0, 0, "-", "noisy_labels"], [200, 0, 0, "-", "robustness"]], "sparknlp_jsl.nlp_test.bias": [[193, 0, 0, "-", "bias_testing"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[193, 1, 1, "", "RuleBasedClassifier"], [193, 6, 1, "", "init_medical_gender_classifier"], [193, 6, 1, "", "test_gender_bias"]], "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier": [[193, 2, 1, "", "transform"]], "sparknlp_jsl.nlp_test.noisy_labels": [[197, 0, 0, "-", "noisy_label_fixing"], [198, 0, 0, "-", "noisy_label_testing"], [199, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[197, 1, 1, "", "InteractiveFix"], [197, 6, 1, "", "add_flag_to_conll"], [197, 6, 1, "", "apply_label_fixes"], [197, 6, 1, "", "conll_reader"], [197, 6, 1, "", "conll_writer"], [197, 6, 1, "", "update_with_model_predictions"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix": [[197, 2, 1, "", "adjust_page_size"], [197, 2, 1, "", "apply_fixes"], [197, 2, 1, "", "create_grid"], [197, 2, 1, "", "display"], [197, 2, 1, "", "empty_grid"], [197, 2, 1, "", "fill_grid"], [197, 2, 1, "", "fix_all"], [197, 2, 1, "", "fix_label"], [197, 2, 1, "", "get_cell_element"], [197, 2, 1, "", "get_central_grid"], [197, 2, 1, "", "get_classes"], [197, 2, 1, "", "get_default_indx"], [197, 2, 1, "", "get_drop_down"], [197, 2, 1, "", "get_drop_down_title"], [197, 2, 1, "", "get_footer"], [197, 2, 1, "", "get_header"], [197, 2, 1, "", "get_page_control_buttons"], [197, 2, 1, "", "get_page_number"], [197, 2, 1, "", "get_sentence"], [197, 2, 1, "", "get_title_html"], [197, 2, 1, "", "next_page"], [197, 2, 1, "", "num_sample_drop_down"], [197, 2, 1, "", "prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[198, 6, 1, "", "calculate_label_error_score"], [198, 6, 1, "", "get_label_quality_scores"], [198, 6, 1, "", "get_unique_entities"], [198, 6, 1, "", "test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[199, 3, 1, "", "stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[201, 0, 0, "-", "robustness_fixing"], [202, 0, 0, "-", "robustness_testing"], [203, 0, 0, "-", "utils"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[201, 6, 1, "", "add_context_to_data"], [201, 6, 1, "", "add_contractions"], [201, 6, 1, "", "add_punctuation_to_data"], [201, 6, 1, "", "add_typo_to_sentence"], [201, 6, 1, "", "augment_robustness"], [201, 6, 1, "", "conll_reader"], [201, 6, 1, "", "convert_accent"], [201, 6, 1, "", "create_dataframe"], [201, 6, 1, "", "create_terminology"], [201, 6, 1, "", "filter_by_entity_type"], [201, 6, 1, "", "get_cohyponyms_wordnet"], [201, 6, 1, "", "get_sample"], [201, 6, 1, "", "introduce_typos"], [201, 6, 1, "", "modify_capitalization_lower"], [201, 6, 1, "", "modify_capitalization_title"], [201, 6, 1, "", "modify_capitalization_upper"], [201, 6, 1, "", "strip_punctuation_from_data"], [201, 6, 1, "", "swap_entities_with_terminology"], [201, 6, 1, "", "swap_with_cohyponym"], [201, 6, 1, "", "test_and_augment_robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[202, 6, 1, "", "add_context"], [202, 6, 1, "", "add_contractions"], [202, 6, 1, "", "add_punctuation"], [202, 6, 1, "", "add_typo_to_sentence"], [202, 6, 1, "", "american_to_british"], [202, 6, 1, "", "british_to_american"], [202, 6, 1, "", "calculate_metrics"], [202, 6, 1, "", "conll_sentence_reader"], [202, 6, 1, "", "create_terminology"], [202, 6, 1, "", "get_cohyponyms_wordnet"], [202, 6, 1, "", "introduce_typos"], [202, 6, 1, "", "modify_capitalization"], [202, 6, 1, "", "remove_context_tokens"], [202, 6, 1, "", "remove_contraction_tokens"], [202, 6, 1, "", "remove_punctuation_tokens"], [202, 6, 1, "", "run_test"], [202, 6, 1, "", "strip_punctuation"], [202, 6, 1, "", "swap_named_entities_from_terminology"], [202, 6, 1, "", "swap_with_cohyponym"], [202, 6, 1, "", "test_robustness"]], "sparknlp_jsl.nlp_test.robustness.utils": [[203, 6, 1, "", "calculate_proportion"], [203, 6, 1, "", "get_augmentation_proportions"], [203, 6, 1, "", "suggest_perturbations"]], "sparknlp_jsl.pretrained": [[204, 1, 1, "", "InternalResourceDownloader"], [204, 6, 1, "", "printProgress"]], "sparknlp_jsl.pretrained.InternalResourceDownloader": [[204, 2, 1, "", "downloadModel"], [204, 2, 1, "", "returnPrivateModels"], [204, 2, 1, "", "returnPrivatePipelines"], [204, 2, 1, "", "showAvailableAnnotators"], [204, 2, 1, "", "showPrivateModels"], [204, 2, 1, "", "showPrivatePipelines"], [204, 2, 1, "", "showUnCategorizedResources"]], "sparknlp_jsl.structured_deidentification": [[205, 1, 1, "", "StructuredDeidentification"]], "sparknlp_jsl.structured_deidentification.StructuredDeidentification": [[205, 2, 1, "", "obfuscateColumns"]], "sparknlp_jsl.text_to_documents_columns": [[206, 1, 1, "", "TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns": [[206, 2, 1, "", "toDocumentsColumns"]], "sparknlp_jsl.training": [[207, 1, 1, "", "AnnotationToolJsonReader"], [207, 1, 1, "", "CantemistReader"], [207, 1, 1, "", "CodiEspReader"], [207, 1, 1, "", "REDatasetHelper"], [207, 1, 1, "", "SynonymAugmentationUMLS"], [207, 3, 1, "", "tf_graph"], [207, 3, 1, "", "tf_graph_1x"]], "sparknlp_jsl.training.AnnotationToolJsonReader": [[207, 2, 1, "", "generateAssertionTrainSet"], [207, 2, 1, "", "generateConll"], [207, 2, 1, "", "generatePlainAssertionTrainSet"], [207, 2, 1, "", "readDataset"]], "sparknlp_jsl.training.CantemistReader": [[207, 2, 1, "", "readDatasetTaskNer"]], "sparknlp_jsl.training.CodiEspReader": [[207, 2, 1, "", "readDatasetTaskX"]], "sparknlp_jsl.training.REDatasetHelper": [[207, 2, 1, "", "create_annotation_column"]], "sparknlp_jsl.training.SynonymAugmentationUMLS": [[207, 2, 1, "", "augmentCsv"], [207, 2, 1, "", "augmentDataFrame"]], "sparknlp_jsl.training_log_parser": [[208, 1, 1, "", "assertion_log_parser"], [208, 1, 1, "", "ner_log_parser"]], "sparknlp_jsl.training_log_parser.assertion_log_parser": [[208, 2, 1, "", "get_best_f1_scores"], [208, 2, 1, "", "get_charts"], [208, 2, 1, "", "loss_plot"], [208, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.training_log_parser.ner_log_parser": [[208, 2, 1, "", "evaluate"], [208, 2, 1, "", "evaluate_conll_file"], [208, 2, 1, "", "get_best_f1_scores"], [208, 2, 1, "", "get_charts"], [208, 2, 1, "", "loss_plot"], [208, 2, 1, "", "parse_logfile"]], "sparknlp_jsl.updateModels": [[209, 1, 1, "", "UpdateModels"]], "sparknlp_jsl.updateModels.UpdateModels": [[209, 2, 1, "", "updateCacheModels"], [209, 2, 1, "", "updateModels"]], "sparknlp_jsl.util": [[210, 6, 1, "", "get_mt_samples"]], "sparknlp_jsl.utils": [[211, 0, 0, "-", "alab_utils"], [212, 0, 0, "-", "conll_parse"], [213, 0, 0, "-", "deidentification_utils"], [214, 0, 0, "-", "imports"], [216, 0, 0, "-", "licensed_annotator_type"], [217, 0, 0, "-", "log_parse"], [218, 0, 0, "-", "ner_utils"], [219, 0, 0, "-", "ocr_nlp_processor"], [220, 0, 0, "-", "ocr_utils"], [221, 0, 0, "-", "training_log_parser_utils"]], "sparknlp_jsl.utils.alab_utils": [[211, 3, 1, "", "document_assembler"], [211, 3, 1, "", "empty_df"], [211, 6, 1, "", "get_doc_assembler"], [211, 6, 1, "", "get_empty_df"], [211, 6, 1, "", "get_ner_df"], [211, 6, 1, "", "get_ner_sentence_borders"], [211, 6, 1, "", "get_nlp_pos_pipeline"], [211, 6, 1, "", "get_nlp_token_pipeline"], [211, 6, 1, "", "get_pos"], [211, 6, 1, "", "get_regex_tokenizer"], [211, 6, 1, "", "get_regular_tokenizer"], [211, 6, 1, "", "get_rel_df"], [211, 6, 1, "", "get_sent_detector"], [211, 6, 1, "", "get_sentence_pipeline"], [211, 6, 1, "", "get_single_task_conll"], [211, 6, 1, "", "get_token_df"], [211, 3, 1, "", "nlp_pos_pipeline"], [211, 3, 1, "", "nlp_token_pipeline"], [211, 3, 1, "", "pos"], [211, 3, 1, "", "pos_pipeline_initialized"], [211, 6, 1, "", "read_conll"], [211, 3, 1, "", "regex_tokenizer"], [211, 3, 1, "", "regular_tokenizer"], [211, 3, 1, "", "sentence_detector"], [211, 3, 1, "", "token_pipeline_initialized"]], "sparknlp_jsl.utils.deidentification_utils": [[213, 6, 1, "", "structured_deidentifier"]], "sparknlp_jsl.utils.imports": [[214, 6, 1, "", "is_module_importable"]], "sparknlp_jsl.utils.licensed_annotator_type": [[216, 1, 1, "", "InternalAnnotatorType"]], "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType": [[216, 4, 1, "", "ASSERTION"], [216, 4, 1, "", "DISAMBIGUATION"], [216, 4, 1, "", "FEATURE_VECTOR"], [216, 4, 1, "", "KEYWORD"], [216, 4, 1, "", "SELECTOR"], [216, 4, 1, "", "SQL"]], "sparknlp_jsl.utils.ner_utils": [[218, 6, 1, "", "evaluate"], [218, 6, 1, "", "evaluate_conll_file"], [218, 6, 1, "", "get_charts"], [218, 6, 1, "", "loss_plot"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[219, 3, 1, "", "colors"], [219, 6, 1, "", "ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_utils": [[220, 3, 1, "", "colors"], [220, 3, 1, "", "colors_rgb"], [220, 3, 1, "", "label2color"], [220, 3, 1, "", "label2rgb"]], "sparknlp_jsl.utils.training_log_parser_utils": [[221, 6, 1, "", "aggregate_entities"], [221, 6, 1, "", "calc_metrics"], [221, 6, 1, "", "count_chunks"], [221, 6, 1, "", "get_result"], [221, 6, 1, "", "is_chunk_end"], [221, 6, 1, "", "is_chunk_start"], [221, 6, 1, "", "split_tag"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:data", "4": "py:attribute", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"get": 0, "start": 0, "requir": 0, "instal": 0, "spark": [0, 1], "nlp": [0, 1], "session": 0, "from": 0, "python": 0, "document": 1, "content": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221], "sparknlp_jsl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "_tf_graph_build": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "assertion_dl": [2, 3, 25, 26], "assertion_model": [2, 25], "modul": [2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 159, 161, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221, 222], "class": [2, 4, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 158, 162, 164, 165, 168, 169, 171, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 197, 204, 205, 206, 207, 208, 209, 216], "submodul": [3, 7, 11, 14, 21, 26, 30, 34, 37, 46, 56, 61, 66, 69, 73, 80, 84, 85, 87, 88, 97, 99, 102, 107, 112, 118, 124, 130, 133, 137, 140, 147, 152, 157, 160, 163, 166, 170, 173, 177, 181, 188, 194, 196, 200, 215], "generic_classifi": [4, 5, 6, 7, 8, 9, 27, 28, 29, 30, 31, 32, 83, 84], "basetfmodel": [4, 27], "build_model": [5, 28], "generic_classifier_model": [6, 29], "progresstrack": [8, 31], "set": [9, 32], "graph_build": [10, 33], "subpackag": [11, 34, 85, 134, 139, 143, 154, 160, 167, 172, 176, 187, 195], "ner_dl": [12, 13, 14, 15, 16, 17, 35, 36, 37, 38, 39, 40], "create_graph": [12, 35], "function": [12, 23, 35, 159, 160, 161, 193, 197, 198, 201, 202, 203, 204, 210, 211, 213, 214, 218, 219, 221], "dataset_encod": [13, 36], "ner_model": [15, 38], "ner_model_sav": [16, 39], "sentence_group": [17, 40], "tf2contrib": [18, 19, 20, 21, 22, 23, 24], "core_rnn_cel": 18, "attribut": [18, 20, 22, 24, 160, 207, 211, 219], "fused_rnn_cel": 19, "gru_op": 20, "packag": [21, 85, 160], "lstm_op": 22, "rnn": 23, "rnn_cell": 24, "_tf_graph_builders_1x": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "alab": 41, "annot": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], "annotation_merg": 42, "assert": [43, 44, 45, 46, 129, 130, 162, 163], "assertiondl": [43, 129, 162], "assertion_chunk_convert": 44, "assertion_dl_reg": 45, "chunk2_token": 47, "chunker": [48, 49, 50, 51, 52, 53, 54, 55, 56], "assertion_filter": 48, "chunk_convert": 49, "chunk_key_phrase_extract": 50, "chunk_sentence_splitt": 51, "chunker_filter": 52, "chunkmapp": [53, 135, 168], "chunkmapper_filter": 54, "docmapp": [55, 136, 169], "classif": [57, 58, 59, 60, 61, 62, 63, 64], "document_log_classifi": 57, "document_ml_classifi": 58, "generic_log_reg_classifi": 59, "generic_svm_classifi": 60, "medical_bert_for_sequence_classif": 62, "medical_bert_for_token_classifi": 63, "medical_distilbert_for_sequence_classif": 64, "context": [65, 66], "contextual_pars": 65, "deid": [67, 68, 69, 70, 71, 72, 131, 132, 133, 164, 165, 166], "deidentif": [67, 131, 164], "paramet": [67, 117, 213], "doccument_hashcod": 68, "name_obfusc": 70, "reidentif": 71, "replac": 72, "disambigu": [73, 74], "ner_disambigu": 74, "doc2_chunk_intern": 75, "embed": [76, 77, 78, 79, 80], "average_embed": 76, "bert_sentence_embed": 77, "entity_chunk_embed": 78, "extractive_summar": 79, "feature_assembl": 81, "filtering_param": 82, "merg": [86, 87], "chunk_merg": 86, "ner": [88, 89, 90, 91, 92, 93, 94, 155, 156, 157, 158, 188, 189, 190, 191], "iob_tagg": 89, "medical_n": 90, "ner_chunk": 91, "ner_converter_intern": 92, "ner_template_rend": 93, "zero_shot_n": [94, 158, 191], "normal": [95, 96, 97], "date_norm": 95, "drug_norm": 96, "qa": [98, 99, 100, 101], "beam_search_param": 98, "medical_qa": 100, "qa_ner_gener": [101, 153, 186], "re": [102, 103, 104, 105, 106], "relation_extract": [103, 140, 141, 142, 173, 174, 175], "relation_extraction_dl": [104, 141, 174], "relation_ner_chunk_filt": 105, "zero_shot_relation_extract": [106, 142, 175], "resolut": [107, 108, 109, 135, 136, 137, 138, 168, 169, 170, 171], "resolver_merg": 108, "sentence_entity_resolv": [109, 138, 171], "resolution2_chunk": 110, "router": 111, "seq2seq": [112, 113, 114, 115], "medical_encoder_decod": 113, "medical_summar": 114, "medical_text_gener": 115, "source_tracking_metadata_param": 116, "tf_graph_build": 117, "window": [118, 119], "windowed_sent": 119, "base": 120, "common": [121, 122, 123, 124], "annotator_approach_intern": 121, "annotator_model_intern": 122, "annotator_properties_intern": 123, "compat": 125, "custom_transform": 126, "deidentification_modul": 127, "eval": 128, "financ": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "chunk_classif": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "document_hashcod": [132, 165], "graph": [139, 140, 141, 142, 172, 173, 174, 175], "sequence_classif": [144, 145, 146, 147, 177, 178, 179, 180], "finance_bert_for_sequence_classif": 144, "finance_classifier_dl": 145, "finance_document_ml_classifi": 146, "sequence_gener": [148, 149, 150, 151, 152, 153, 181, 182, 183, 184, 185, 186], "finance_encoder_decod": 148, "finance_qa": 149, "finance_summar": 150, "finance_text_gener": 151, "token_classif": [154, 155, 156, 157, 158, 187, 188, 189, 190, 191], "finance_bert_for_token_classifi": 155, "finance_n": 156, "intern": 161, "legal": [162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "legal_bert_for_sequence_classif": 178, "legal_classifier_dl": 179, "legal_document_ml_classifi": 180, "legal_encoder_decod": 182, "legal_qa": 183, "legal_summar": 184, "legal_text_gener": 185, "legal_bert_for_token_classifi": 189, "legal_n": 190, "modeltrac": 192, "nlp_test": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "bia": [193, 194], "bias_test": 193, "noisy_label": [196, 197, 198, 199], "noisy_label_fix": 197, "noisy_label_test": 198, "util": [199, 203, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "robust": [200, 201, 202, 203], "robustness_fix": 201, "robustness_test": 202, "pretrain": 204, "structured_deidentif": 205, "text_to_documents_column": 206, "train": 207, "training_log_pars": 208, "updatemodel": 209, "alab_util": 211, "conll_pars": 212, "deidentification_util": 213, "return": 213, "import": 214, "licensed_annotator_typ": 216, "log_pars": 217, "ner_util": 218, "ocr_nlp_processor": 219, "ocr_util": 220, "training_log_parser_util": 221, "api": 222, "refer": 222}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Getting Started": [[0, "getting-started"]], "Requirements": [[0, "requirements"]], "Installation": [[0, "installation"]], "Starting a Spark NLP Session from Python": [[0, "starting-a-spark-nlp-session-from-python"]], "Spark NLP Documentation": [[1, "spark-nlp-documentation"]], "Content": [[1, "content"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [86, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [86, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [155, "classes"], [156, "classes"], [158, "classes"], [162, "classes"], [164, "classes"], [165, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [174, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [197, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [216, "classes"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "Submodules": [[3, "submodules"], [7, "submodules"], [11, "submodules"], [14, "submodules"], [21, "submodules"], [26, "submodules"], [30, "submodules"], [34, "submodules"], [37, "submodules"], [46, "submodules"], [56, "submodules"], [61, "submodules"], [66, "submodules"], [69, "submodules"], [73, "submodules"], [80, "submodules"], [84, "submodules"], [85, "submodules"], [87, "submodules"], [88, "submodules"], [97, "submodules"], [99, "submodules"], [102, "submodules"], [107, "submodules"], [112, "submodules"], [118, "submodules"], [124, "submodules"], [130, "submodules"], [133, "submodules"], [137, "submodules"], [140, "submodules"], [147, "submodules"], [152, "submodules"], [157, "submodules"], [160, "submodules"], [163, "submodules"], [166, "submodules"], [170, "submodules"], [173, "submodules"], [177, "submodules"], [181, "submodules"], [188, "submodules"], [194, "submodules"], [196, "submodules"], [200, "submodules"], [215, "submodules"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "Subpackages": [[11, "subpackages"], [34, "subpackages"], [85, "subpackages"], [134, "subpackages"], [139, "subpackages"], [143, "subpackages"], [154, "subpackages"], [160, "subpackages"], [167, "subpackages"], [172, "subpackages"], [176, "subpackages"], [187, "subpackages"], [195, "subpackages"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "Functions": [[12, "functions"], [23, "functions"], [35, "functions"], [159, "functions"], [160, "functions"], [161, "functions"], [193, "functions"], [197, "functions"], [198, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [210, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [218, "functions"], [219, "functions"], [221, "functions"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "Attributes": [[18, "attributes"], [20, "attributes"], [22, "attributes"], [24, "attributes"], [160, "attributes"], [207, "attributes"], [211, "attributes"], [219, "attributes"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "Package Contents": [[21, "package-contents"], [85, "package-contents"], [160, "package-contents"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "sparknlp_jsl.annotator.assertion.assertionDL": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[61, "module-sparknlp_jsl.annotator.classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[66, "module-sparknlp_jsl.annotator.context"]], "sparknlp_jsl.annotator.deid.deIdentification": [[67, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "Parameters": [[67, "parameters"], [117, "parameters"], [117, "id1"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[69, "module-sparknlp_jsl.annotator.deid"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "sparknlp_jsl.annotator.deid.reIdentification": [[71, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "sparknlp_jsl.annotator.deid.replacer": [[72, "module-sparknlp_jsl.annotator.deid.replacer"]], "sparknlp_jsl.annotator.disambiguation": [[73, "module-sparknlp_jsl.annotator.disambiguation"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[79, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "sparknlp_jsl.annotator.embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings"]], "sparknlp_jsl.annotator.feature_assembler": [[81, "module-sparknlp_jsl.annotator.feature_assembler"]], "sparknlp_jsl.annotator.filtering_params": [[82, "module-sparknlp_jsl.annotator.filtering_params"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[83, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "sparknlp_jsl.annotator.generic_classifier": [[84, "module-sparknlp_jsl.annotator.generic_classifier"]], "sparknlp_jsl.annotator": [[85, "module-sparknlp_jsl.annotator"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[86, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[87, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[88, "module-sparknlp_jsl.annotator.ner"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[89, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "sparknlp_jsl.annotator.ner.medical_ner": [[90, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[91, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[92, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[93, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[94, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[96, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[97, "module-sparknlp_jsl.annotator.normalizer"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[98, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "sparknlp_jsl.annotator.qa": [[99, "module-sparknlp_jsl.annotator.qa"]], "sparknlp_jsl.annotator.qa.medical_qa": [[100, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[101, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "sparknlp_jsl.annotator.re": [[102, "module-sparknlp_jsl.annotator.re"]], "sparknlp_jsl.annotator.re.relation_extraction": [[103, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[104, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[105, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[106, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[107, "module-sparknlp_jsl.annotator.resolution"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[108, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[109, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "sparknlp_jsl.annotator.resolution2_chunk": [[110, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "sparknlp_jsl.annotator.router": [[111, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[112, "module-sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[113, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[114, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[115, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[116, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "sparknlp_jsl.annotator.tf_graph_builder": [[117, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "sparknlp_jsl.annotator.windowed": [[118, "module-sparknlp_jsl.annotator.windowed"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[119, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "sparknlp_jsl.base": [[120, "module-sparknlp_jsl.base"]], "sparknlp_jsl.common.annotator_approach_internal": [[121, "module-sparknlp_jsl.common.annotator_approach_internal"]], "sparknlp_jsl.common.annotator_model_internal": [[122, "module-sparknlp_jsl.common.annotator_model_internal"]], "sparknlp_jsl.common.annotator_properties_internal": [[123, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[124, "module-sparknlp_jsl.common"]], "sparknlp_jsl.compatibility": [[125, "module-sparknlp_jsl.compatibility"]], "sparknlp_jsl.custom_transformer": [[126, "module-sparknlp_jsl.custom_transformer"]], "sparknlp_jsl.deidentification_module": [[127, "module-sparknlp_jsl.deidentification_module"]], "sparknlp_jsl.eval": [[128, "module-sparknlp_jsl.eval"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL": [[129, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[130, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "sparknlp_jsl.finance.chunk_classification.deid.deIdentification": [[131, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[132, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[133, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[134, "module-sparknlp_jsl.finance.chunk_classification"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[135, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[136, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[137, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[138, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[139, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[140, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[141, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[142, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[143, "module-sparknlp_jsl.finance"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[144, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[145, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[146, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[147, "module-sparknlp_jsl.finance.sequence_classification"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[148, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[149, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[150, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[151, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[152, "module-sparknlp_jsl.finance.sequence_generation"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[153, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[154, "module-sparknlp_jsl.finance.token_classification"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[155, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[156, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[157, "module-sparknlp_jsl.finance.token_classification.ner"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[158, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.functions": [[159, "module-sparknlp_jsl.functions"]], "sparknlp_jsl": [[160, "module-sparknlp_jsl"]], "sparknlp_jsl.internal": [[161, "module-sparknlp_jsl.internal"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL": [[162, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[163, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "sparknlp_jsl.legal.chunk_classification.deid.deIdentification": [[164, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[165, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[166, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[167, "module-sparknlp_jsl.legal.chunk_classification"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[168, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[169, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[170, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[171, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[172, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[173, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[174, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[175, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[176, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[177, "module-sparknlp_jsl.legal.sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[178, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[179, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[180, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[181, "module-sparknlp_jsl.legal.sequence_generation"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[182, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[183, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[184, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[185, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[186, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[187, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[188, "module-sparknlp_jsl.legal.token_classification.ner"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[189, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[190, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[191, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "sparknlp_jsl.modelTracer": [[192, "module-sparknlp_jsl.modelTracer"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[193, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "sparknlp_jsl.nlp_test.bias": [[194, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[195, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[196, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[198, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[199, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "sparknlp_jsl.nlp_test.robustness": [[200, "module-sparknlp_jsl.nlp_test.robustness"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[201, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[202, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "sparknlp_jsl.nlp_test.robustness.utils": [[203, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "sparknlp_jsl.pretrained": [[204, "module-sparknlp_jsl.pretrained"]], "sparknlp_jsl.structured_deidentification": [[205, "module-sparknlp_jsl.structured_deidentification"]], "sparknlp_jsl.text_to_documents_columns": [[206, "module-sparknlp_jsl.text_to_documents_columns"]], "sparknlp_jsl.training": [[207, "module-sparknlp_jsl.training"]], "sparknlp_jsl.training_log_parser": [[208, "module-sparknlp_jsl.training_log_parser"]], "sparknlp_jsl.updateModels": [[209, "module-sparknlp_jsl.updateModels"]], "sparknlp_jsl.util": [[210, "module-sparknlp_jsl.util"]], "sparknlp_jsl.utils.alab_utils": [[211, "module-sparknlp_jsl.utils.alab_utils"]], "sparknlp_jsl.utils.conll_parse": [[212, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[213, "module-sparknlp_jsl.utils.deidentification_utils"]], "Parameters:": [[213, "parameters"]], "Returns:": [[213, "returns"]], "sparknlp_jsl.utils.imports": [[214, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[215, "module-sparknlp_jsl.utils"]], "sparknlp_jsl.utils.licensed_annotator_type": [[216, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[217, "module-sparknlp_jsl.utils.log_parse"]], "sparknlp_jsl.utils.ner_utils": [[218, "module-sparknlp_jsl.utils.ner_utils"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[219, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "sparknlp_jsl.utils.ocr_utils": [[220, "module-sparknlp_jsl.utils.ocr_utils"]], "sparknlp_jsl.utils.training_log_parser_utils": [[221, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "API Reference": [[222, "api-reference"]], "Modules": [[222, "modules"]]}, "indexentries": {"assertionmodel (class in sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel"]], "add_bidirectional_lstm() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_bidirectional_lstm"]], "add_optimizer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.add_optimizer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.add_optimizer"]], "calc_accuracy() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.calc_accuracy"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.calc_accuracy"]], "confusion_matrix() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.confusion_matrix"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.confusion_matrix"]], "fully_connected_layer() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.fully_connected_layer"]], "module": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"], [3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"], [4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"], [5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"], [6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"], [7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"], [8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"], [9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"], [10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"], [11, "module-sparknlp_jsl._tf_graph_builders"], [12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"], [13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"], [14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"], [15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"], [16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"], [17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"], [18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"], [19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"], [20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"], [21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"], [22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"], [23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"], [24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"], [25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"], [26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"], [27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"], [28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"], [29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"], [30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"], [31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"], [32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"], [33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"], [34, "module-sparknlp_jsl._tf_graph_builders_1x"], [35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"], [36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"], [37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"], [38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"], [39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"], [40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"], [41, "module-sparknlp_jsl.alab"], [42, "module-sparknlp_jsl.annotator.annotation_merger"], [43, "module-sparknlp_jsl.annotator.assertion.assertionDL"], [44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"], [45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"], [46, "module-sparknlp_jsl.annotator.assertion"], [47, "module-sparknlp_jsl.annotator.chunk2_token"], [48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"], [49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"], [50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"], [51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"], [52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"], [53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"], [54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"], [55, "module-sparknlp_jsl.annotator.chunker.docmapper"], [56, "module-sparknlp_jsl.annotator.chunker"], [57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"], [58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"], [59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"], [60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"], [61, "module-sparknlp_jsl.annotator.classification"], [62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"], [63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"], [64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"], [65, "module-sparknlp_jsl.annotator.context.contextual_parser"], [66, "module-sparknlp_jsl.annotator.context"], [67, "module-sparknlp_jsl.annotator.deid.deIdentification"], [68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"], [69, "module-sparknlp_jsl.annotator.deid"], [70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"], [71, "module-sparknlp_jsl.annotator.deid.reIdentification"], [72, "module-sparknlp_jsl.annotator.deid.replacer"], [73, "module-sparknlp_jsl.annotator.disambiguation"], [74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"], [75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"], [76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"], [77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"], [78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"], [79, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"], [80, "module-sparknlp_jsl.annotator.embeddings"], [81, "module-sparknlp_jsl.annotator.feature_assembler"], [82, "module-sparknlp_jsl.annotator.filtering_params"], [83, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"], [84, "module-sparknlp_jsl.annotator.generic_classifier"], [85, "module-sparknlp_jsl.annotator"], [86, "module-sparknlp_jsl.annotator.merge.chunk_merge"], [87, "module-sparknlp_jsl.annotator.merge"], [88, "module-sparknlp_jsl.annotator.ner"], [89, "module-sparknlp_jsl.annotator.ner.iob_tagger"], [90, "module-sparknlp_jsl.annotator.ner.medical_ner"], [91, "module-sparknlp_jsl.annotator.ner.ner_chunker"], [92, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"], [93, "module-sparknlp_jsl.annotator.ner.ner_template_render"], [94, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"], [95, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"], [96, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"], [97, "module-sparknlp_jsl.annotator.normalizer"], [98, "module-sparknlp_jsl.annotator.qa.beam_search_params"], [99, "module-sparknlp_jsl.annotator.qa"], [100, "module-sparknlp_jsl.annotator.qa.medical_qa"], [101, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"], [102, "module-sparknlp_jsl.annotator.re"], [103, "module-sparknlp_jsl.annotator.re.relation_extraction"], [104, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"], [105, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"], [106, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"], [107, "module-sparknlp_jsl.annotator.resolution"], [108, "module-sparknlp_jsl.annotator.resolution.resolver_merger"], [109, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"], [110, "module-sparknlp_jsl.annotator.resolution2_chunk"], [111, "module-sparknlp_jsl.annotator.router"], [112, "module-sparknlp_jsl.annotator.seq2seq"], [113, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"], [114, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"], [115, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"], [116, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"], [117, "module-sparknlp_jsl.annotator.tf_graph_builder"], [118, "module-sparknlp_jsl.annotator.windowed"], [119, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"], [120, "module-sparknlp_jsl.base"], [121, "module-sparknlp_jsl.common.annotator_approach_internal"], [122, "module-sparknlp_jsl.common.annotator_model_internal"], [123, "module-sparknlp_jsl.common.annotator_properties_internal"], [124, "module-sparknlp_jsl.common"], [125, "module-sparknlp_jsl.compatibility"], [126, "module-sparknlp_jsl.custom_transformer"], [127, "module-sparknlp_jsl.deidentification_module"], [128, "module-sparknlp_jsl.eval"], [129, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"], [130, "module-sparknlp_jsl.finance.chunk_classification.assertion"], [131, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"], [132, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"], [133, "module-sparknlp_jsl.finance.chunk_classification.deid"], [134, "module-sparknlp_jsl.finance.chunk_classification"], [135, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"], [136, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"], [137, "module-sparknlp_jsl.finance.chunk_classification.resolution"], [138, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"], [139, "module-sparknlp_jsl.finance.graph"], [140, "module-sparknlp_jsl.finance.graph.relation_extraction"], [141, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"], [142, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"], [143, "module-sparknlp_jsl.finance"], [144, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"], [145, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"], [146, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"], [147, "module-sparknlp_jsl.finance.sequence_classification"], [148, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"], [149, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"], [150, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"], [151, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"], [152, "module-sparknlp_jsl.finance.sequence_generation"], [153, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"], [154, "module-sparknlp_jsl.finance.token_classification"], [155, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"], [156, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"], [157, "module-sparknlp_jsl.finance.token_classification.ner"], [158, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"], [159, "module-sparknlp_jsl.functions"], [160, "module-sparknlp_jsl"], [161, "module-sparknlp_jsl.internal"], [162, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"], [163, "module-sparknlp_jsl.legal.chunk_classification.assertion"], [164, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"], [165, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"], [166, "module-sparknlp_jsl.legal.chunk_classification.deid"], [167, "module-sparknlp_jsl.legal.chunk_classification"], [168, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"], [169, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"], [170, "module-sparknlp_jsl.legal.chunk_classification.resolution"], [171, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"], [172, "module-sparknlp_jsl.legal.graph"], [173, "module-sparknlp_jsl.legal.graph.relation_extraction"], [174, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"], [175, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"], [176, "module-sparknlp_jsl.legal"], [177, "module-sparknlp_jsl.legal.sequence_classification"], [178, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"], [179, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"], [180, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"], [181, "module-sparknlp_jsl.legal.sequence_generation"], [182, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"], [183, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"], [184, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"], [185, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"], [186, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"], [187, "module-sparknlp_jsl.legal.token_classification"], [188, "module-sparknlp_jsl.legal.token_classification.ner"], [189, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"], [190, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"], [191, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"], [192, "module-sparknlp_jsl.modelTracer"], [193, "module-sparknlp_jsl.nlp_test.bias.bias_testing"], [194, "module-sparknlp_jsl.nlp_test.bias"], [195, "module-sparknlp_jsl.nlp_test"], [196, "module-sparknlp_jsl.nlp_test.noisy_labels"], [197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"], [198, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"], [199, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"], [200, "module-sparknlp_jsl.nlp_test.robustness"], [201, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"], [202, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"], [203, "module-sparknlp_jsl.nlp_test.robustness.utils"], [204, "module-sparknlp_jsl.pretrained"], [205, "module-sparknlp_jsl.structured_deidentification"], [206, "module-sparknlp_jsl.text_to_documents_columns"], [207, "module-sparknlp_jsl.training"], [208, "module-sparknlp_jsl.training_log_parser"], [209, "module-sparknlp_jsl.updateModels"], [210, "module-sparknlp_jsl.util"], [211, "module-sparknlp_jsl.utils.alab_utils"], [212, "module-sparknlp_jsl.utils.conll_parse"], [213, "module-sparknlp_jsl.utils.deidentification_utils"], [214, "module-sparknlp_jsl.utils.imports"], [215, "module-sparknlp_jsl.utils"], [216, "module-sparknlp_jsl.utils.licensed_annotator_type"], [217, "module-sparknlp_jsl.utils.log_parse"], [218, "module-sparknlp_jsl.utils.ner_utils"], [219, "module-sparknlp_jsl.utils.ocr_nlp_processor"], [220, "module-sparknlp_jsl.utils.ocr_utils"], [221, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "persist_graph() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.persist_graph"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.persist_graph"]], "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model": [[2, "module-sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model"]], "train() (assertionmodel method)": [[2, "sparknlp_jsl._tf_graph_builders.assertion_dl.assertion_model.AssertionModel.train"], [25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel.train"]], "sparknlp_jsl._tf_graph_builders.assertion_dl": [[3, "module-sparknlp_jsl._tf_graph_builders.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel"]], "build() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.build"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.build"]], "export_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.export_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.export_graph"]], "fit_dataset() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.fit_dataset"]], "generate_batch() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.generate_batch"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.generate_batch"]], "get_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.get_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.get_graph"]], "is_built() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.is_built"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.is_built"]], "load_graph() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.load_graph"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.load_graph"]], "run_tests() (basetfmodel method)": [[4, "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel.BaseTFModel.run_tests"], [27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel": [[4, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders.generic_classifier.build_model)": [[5, "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.build_model": [[5, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "build() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.build"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.build"]], "export_graph() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.export_graph"]], "run_tests() (genericclassifiermodel method)": [[6, "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"], [29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel.run_tests"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model": [[6, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders.generic_classifier": [[7, "module-sparknlp_jsl._tf_graph_builders.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker"]], "get_report_interval() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.get_report_interval"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.get_report_interval"]], "on_batch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_batch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_batch"]], "on_epoch() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_epoch"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_epoch"]], "on_training_end() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_end"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_end"]], "on_training_start() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.on_training_start"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.on_training_start"]], "print_progress() (progresstracker method)": [[8, "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker.ProgressTracker.print_progress"], [31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker.print_progress"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker": [[8, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.progresstracker"]], "acc (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.ACC"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.ACC"]], "datasets_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DATASETS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DATASETS_DIR"]], "default_model_node_names (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.DEFAULT_MODEL_NODE_NAMES"]], "evaluate (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.EVALUATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.EVALUATE"]], "init (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.INIT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.INIT"]], "inputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.INPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.INPUTS"]], "learning_rate (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LEARNING_RATE"]], "logs_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.LOGS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.LOGS_DIR"]], "loss (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.LOSS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.LOSS"]], "models_dir (settings attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings.MODELS_DIR"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings.MODELS_DIR"]], "model_ops (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS"]], "outputs (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.OUTPUTS"]], "predict (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.PREDICT"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.PREDICT"]], "run_types (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders.generic_classifier.settings)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.Settings"]], "targets (model_tensors attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_TENSORS.TARGETS"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS.TARGETS"]], "train (model_ops attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.MODEL_OPS.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS.TRAIN"]], "train (run_types attribute)": [[9, "sparknlp_jsl._tf_graph_builders.generic_classifier.settings.RUN_TYPES.TRAIN"], [32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES.TRAIN"]], "sparknlp_jsl._tf_graph_builders.generic_classifier.settings": [[9, "module-sparknlp_jsl._tf_graph_builders.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder"]], "logregclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder"]], "svmclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders.graph_builders)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory"]], "tensorflowaddonsneeded": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TensorflowAddonsNeeded"]], "wrongtfversion": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.WrongTFVersion"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.WrongTFVersion"]], "build() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.build"]], "build() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.build"]], "build() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.build"]], "build() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.build"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.build"]], "check_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.check_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.check_build_params"]], "get_build_param() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_param"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_param"]], "get_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params"]], "get_build_params_with_defaults() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_build_params_with_defaults"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_build_params_with_defaults"]], "get_model_build_param_explanations() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_param_explanations() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_param_explanations"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_param_explanations"]], "get_model_build_params() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (logregclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.LogRegClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (svmclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.SVMClassifierTFGraphBuilder.get_model_build_params"]], "get_model_build_params() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_build_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_build_params"]], "get_model_filename() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.get_model_filename"]], "get_model_filename() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.get_model_filename"]], "get_model_filename() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.get_model_filename"]], "get_model_filename() (relationextractiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder.get_model_filename"]], "get_model_filename() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.get_model_filename"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.get_model_filename"]], "get_models() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.get_models"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.get_models"]], "print_model_params() (tfgraphbuilderfactory static method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilderFactory.print_model_params"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory.print_model_params"]], "sparknlp_jsl._tf_graph_builders.graph_builders": [[10, "module-sparknlp_jsl._tf_graph_builders.graph_builders"]], "supports_auto_file_name() (assertiontfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (genericclassifiertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (nertfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.NerTFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder.supports_auto_file_name"]], "supports_auto_file_name() (tfgraphbuilder method)": [[10, "sparknlp_jsl._tf_graph_builders.graph_builders.TFGraphBuilder.supports_auto_file_name"], [33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder.supports_auto_file_name"]], "sparknlp_jsl._tf_graph_builders": [[11, "module-sparknlp_jsl._tf_graph_builders"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders.ner_dl.create_graph)": [[12, "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders.ner_dl.create_graph": [[12, "module-sparknlp_jsl._tf_graph_builders.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder"]], "encode() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.encode"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.encode"]], "get_char_indexes() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.get_char_indexes"]], "normalize() (datasetencoder static method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.normalize"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.normalize"]], "shuffle() (datasetencoder method)": [[13, "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder.DatasetEncoder.shuffle"], [36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder.shuffle"]], "sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder": [[13, "module-sparknlp_jsl._tf_graph_builders.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders.ner_dl": [[14, "module-sparknlp_jsl._tf_graph_builders.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel"]], "add_bilstm_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_bilstm_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_bilstm_char_repr"]], "add_cnn_char_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_cnn_char_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_cnn_char_repr"]], "add_context_repr() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_context_repr"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_context_repr"]], "add_inference_layer() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_inference_layer"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_inference_layer"]], "add_pretrained_word_embeddings() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_pretrained_word_embeddings"]], "add_training_op() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.add_training_op"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.add_training_op"]], "close() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.close"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.close"]], "fill() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.fill"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.fill"]], "get_char_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_char_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_char_ids"]], "get_from_batch() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_from_batch"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_from_batch"]], "get_sentence_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_lengths"]], "get_sentence_token_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_sentence_token_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_sentence_token_lengths"]], "get_softmax() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_softmax"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_softmax"]], "get_tag_ids() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_tag_ids"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_tag_ids"]], "get_word_embeddings() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_embeddings"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_embeddings"]], "get_word_lengths() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.get_word_lengths"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.get_word_lengths"]], "init_variables() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.init_variables"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.init_variables"]], "measure() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.measure"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.measure"]], "num_trues() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.num_trues"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.num_trues"]], "predict() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.predict"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.predict"]], "slice() (nermodel static method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.slice"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model": [[15, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model"]], "train() (nermodel method)": [[15, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model.NerModel.train"], [38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel.train"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver"]], "restore_tensorflow_state() (nermodelsaver static method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.restore_tensorflow_state"]], "save() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save"]], "save_models() (nermodelsaver method)": [[16, "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver.NerModelSaver.save_models"], [39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver.save_models"]], "sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver": [[16, "module-sparknlp_jsl._tf_graph_builders.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper"]], "get_bucket_id() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.get_bucket_id"]], "slice() (sentencegrouper method)": [[17, "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper.SentenceGrouper.slice"], [40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper.slice"]], "sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper": [[17, "module-sparknlp_jsl._tf_graph_builders.ner_dl.sentence_grouper"]], "embeddingwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper"]], "inputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper"]], "outputprojectionwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper"]], "rnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.RNNCell"]], "call() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.call"]], "call() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.call"]], "call() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell": [[18, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell"]], "zero_state() (embeddingwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.EmbeddingWrapper.zero_state"]], "zero_state() (inputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.InputProjectionWrapper.zero_state"]], "zero_state() (outputprojectionwrapper method)": [[18, "sparknlp_jsl._tf_graph_builders.tf2contrib.core_rnn_cell.OutputProjectionWrapper.zero_state"]], "fusedrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCell"]], "fusedrnncelladaptor (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.FusedRNNCellAdaptor"]], "timereversedfusedrnn (class in sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell)": [[19, "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell.TimeReversedFusedRNN"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell": [[19, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.fused_rnn_cell"]], "grublockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell"]], "grublockcellv2 (class in sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.LayerRNNCell"]], "build() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.build"]], "build() (grublockcellv2 method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCellV2.build"]], "call() (grublockcell method)": [[20, "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops.GRUBlockCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops": [[20, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.gru_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib": [[21, "module-sparknlp_jsl._tf_graph_builders.tf2contrib"]], "tf (in module sparknlp_jsl._tf_graph_builders.tf2contrib)": [[21, "sparknlp_jsl._tf_graph_builders.tf2contrib.tf"]], "lstmblockcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell"]], "lstmblockfusedcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell"]], "lstmblockwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper"]], "layerrnncell (in module sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LayerRNNCell"]], "build() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.build"]], "build() (lstmblockfusedcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockFusedCell.build"]], "call() (lstmblockcell method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockCell.call"]], "call() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.call"]], "num_units() (lstmblockwrapper method)": [[22, "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops.LSTMBlockWrapper.num_units"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops": [[22, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.lstm_ops"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn": [[23, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn"]], "stack_bidirectional_dynamic_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_dynamic_rnn"]], "stack_bidirectional_rnn() (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn)": [[23, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn.stack_bidirectional_rnn"]], "attentioncellwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper"]], "bidirectionalgridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell"]], "cfncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell"]], "compiledwrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper"]], "conv1dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv1DLSTMCell"]], "conv2dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv2DLSTMCell"]], "conv3dlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.Conv3DLSTMCell"]], "convlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell"]], "coupledinputforgetgatelstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell"]], "glstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell"]], "gridlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell"]], "highwaywrapper (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper"]], "indrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell"]], "indygrucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell"]], "indylstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell"]], "intersectionrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell"]], "layernormbasiclstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell"]], "layernormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell"]], "minimalrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell"]], "nascell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell"]], "ntmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell"]], "ntmcontrollerstate (in module sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMControllerState"]], "phasedlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell"]], "srucell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell"]], "timefreqlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell"]], "ugrnncell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell"]], "weightnormlstmcell (class in sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell"]], "build() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.build"]], "build() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.build"]], "build() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.build"]], "build() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.build"]], "build() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.build"]], "build() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.build"]], "build() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.build"]], "build() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.build"]], "call() (attentioncellwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.AttentionCellWrapper.call"]], "call() (bidirectionalgridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.BidirectionalGridLSTMCell.call"]], "call() (cfncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CFNCell.call"]], "call() (convlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.ConvLSTMCell.call"]], "call() (coupledinputforgetgatelstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CoupledInputForgetGateLSTMCell.call"]], "call() (glstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GLSTMCell.call"]], "call() (gridlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.GridLSTMCell.call"]], "call() (indrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndRNNCell.call"]], "call() (indygrucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyGRUCell.call"]], "call() (indylstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IndyLSTMCell.call"]], "call() (intersectionrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.IntersectionRNNCell.call"]], "call() (layernormbasiclstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormBasicLSTMCell.call"]], "call() (layernormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.LayerNormLSTMCell.call"]], "call() (minimalrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.MinimalRNNCell.call"]], "call() (nascell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NASCell.call"]], "call() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.call"]], "call() (phasedlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.PhasedLSTMCell.call"]], "call() (srucell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.SRUCell.call"]], "call() (timefreqlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.TimeFreqLSTMCell.call"]], "call() (ugrnncell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.UGRNNCell.call"]], "call() (weightnormlstmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.WeightNormLSTMCell.call"]], "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell": [[24, "module-sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell"]], "zero_state() (compiledwrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.CompiledWrapper.zero_state"]], "zero_state() (highwaywrapper method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.HighwayWrapper.zero_state"]], "zero_state() (ntmcell method)": [[24, "sparknlp_jsl._tf_graph_builders.tf2contrib.rnn_cell.NTMCell.zero_state"]], "assertionmodel (class in sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model)": [[25, "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model.AssertionModel"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model": [[25, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl.assertion_model"]], "sparknlp_jsl._tf_graph_builders_1x.assertion_dl": [[26, "module-sparknlp_jsl._tf_graph_builders_1x.assertion_dl"]], "basetfmodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel)": [[27, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel.BaseTFModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel": [[27, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.basetfmodel"]], "build_params (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.build_params"]], "model (in module sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model)": [[28, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model.model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model": [[28, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.build_model"]], "genericclassifiermodel (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model)": [[29, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model.GenericClassifierModel"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model": [[29, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.generic_classifier_model"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier": [[30, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier"]], "progresstracker (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker)": [[31, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker.ProgressTracker"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker": [[31, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.progresstracker"]], "model_ops (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_OPS"]], "model_tensors (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.MODEL_TENSORS"]], "run_types (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.RUN_TYPES"]], "settings (class in sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings)": [[32, "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings.Settings"]], "sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings": [[32, "module-sparknlp_jsl._tf_graph_builders_1x.generic_classifier.settings"]], "assertiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.AssertionTFGraphBuilder"]], "genericclassifiertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.GenericClassifierTFGraphBuilder"]], "nertfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.NerTFGraphBuilder"]], "relationextractiontfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.RelationExtractionTFGraphBuilder"]], "tfgraphbuilder (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilder"]], "tfgraphbuilderfactory (class in sparknlp_jsl._tf_graph_builders_1x.graph_builders)": [[33, "sparknlp_jsl._tf_graph_builders_1x.graph_builders.TFGraphBuilderFactory"]], "sparknlp_jsl._tf_graph_builders_1x.graph_builders": [[33, "module-sparknlp_jsl._tf_graph_builders_1x.graph_builders"]], "sparknlp_jsl._tf_graph_builders_1x": [[34, "module-sparknlp_jsl._tf_graph_builders_1x"]], "create_graph() (in module sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph)": [[35, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph.create_graph"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph": [[35, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.create_graph"]], "datasetencoder (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder)": [[36, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder.DatasetEncoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder": [[36, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.dataset_encoder"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl": [[37, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl"]], "nermodel (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model)": [[38, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model.NerModel"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model": [[38, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model"]], "nermodelsaver (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver)": [[39, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver.NerModelSaver"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver": [[39, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.ner_model_saver"]], "sentencegrouper (class in sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper)": [[40, "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper.SentenceGrouper"]], "sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper": [[40, "module-sparknlp_jsl._tf_graph_builders_1x.ner_dl.sentence_grouper"]], "annotationlab (class in sparknlp_jsl.alab)": [[41, "sparknlp_jsl.alab.AnnotationLab"]], "create_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.create_project"]], "delete_project() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_project"]], "delete_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.delete_tasks"]], "generate_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.generate_preannotations"]], "get_iaa_metrics() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_IAA_metrics"]], "get_all_projects() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_all_projects"]], "get_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_annotations"]], "get_assertion_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_assertion_data"]], "get_classification_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_classification_data"]], "get_conll_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_conll_data"]], "get_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_project_config"]], "get_relation_extraction_data() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.get_relation_extraction_data"]], "review_annotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.review_annotations"]], "set_credentials() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_credentials"]], "set_project_config() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.set_project_config"]], "sparknlp_jsl.alab": [[41, "module-sparknlp_jsl.alab"]], "upload_preannotations() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_preannotations"]], "upload_tasks() (annotationlab method)": [[41, "sparknlp_jsl.alab.AnnotationLab.upload_tasks"]], "annotationmerger (class in sparknlp_jsl.annotator.annotation_merger)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger"]], "inputannotatortypes (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputAnnotatorTypes"]], "inputtype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.inputType"]], "name (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.name"]], "outputannotatortype (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.outputAnnotatorType"]], "setinputcols() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputCols"]], "setinputtype() (annotationmerger method)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.setInputType"]], "skiplpinputcolsvalidation (annotationmerger attribute)": [[42, "sparknlp_jsl.annotator.annotation_merger.AnnotationMerger.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.annotation_merger": [[42, "module-sparknlp_jsl.annotator.annotation_merger"]], "assertiondlapproach (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.annotator.assertion.assertiondl)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel"]], "batchsize (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.batchSize"]], "classes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.classes"]], "configprotobytes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.configProtoBytes"]], "configprotobytes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.configProtoBytes"]], "dropout (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.dropout"]], "enableoutputlogs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.enableOutputLogs"]], "endcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.endCol"]], "epochs (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.epochs"]], "graphfile (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFile"]], "graphfolder (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.graphFolder"]], "includeconfidence (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.includeConfidence"]], "includeconfidence (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.includeConfidence"]], "inputannotatortypes (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.inputAnnotatorTypes"]], "label (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.label"]], "learningrate (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.learningRate"]], "maxsentlen (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.maxSentLen"]], "maxsentlen (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.maxSentLen"]], "name (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.name"], [129, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.name"], [162, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.name"]], "outputannotatortype (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputAnnotatorType"]], "outputannotatortype (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.outputAnnotatorType"]], "outputlogspath (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.outputLogsPath"]], "pretrained() (assertiondlmodel static method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.pretrained"], [129, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"], [162, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel.pretrained"]], "scopewindow (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.scopeWindow"]], "scopewindow (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.scopeWindow"]], "setbatchsize() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setBatchSize"]], "setconfigprotobytes() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setConfigProtoBytes"]], "setconfigprotobytes() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setConfigProtoBytes"]], "setdropout() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setDropout"]], "setenableoutputlogs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEnableOutputLogs"]], "setendcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEndCol"]], "setepochs() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setEpochs"]], "setgraphfile() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFile"]], "setgraphfolder() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setGraphFolder"]], "setincludeconfidence() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setIncludeConfidence"]], "setincludeconfidence() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setIncludeConfidence"]], "setlabelcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLabelCol"]], "setlearningrate() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setLearningRate"]], "setmaxsentlen() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setMaxSentLen"]], "setoutputlogspath() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setOutputLogsPath"]], "setscopewindow() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setScopeWindow"]], "setscopewindow() (assertiondlmodel method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.setScopeWindow"]], "setstartcol() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setStartCol"]], "settestdataset() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setTestDataset"]], "setvalidationsplit() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setValidationSplit"]], "setverbose() (assertiondlapproach method)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.setVerbose"]], "sparknlp_jsl.annotator.assertion.assertiondl": [[43, "module-sparknlp_jsl.annotator.assertion.assertionDL"]], "startcol (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.startCol"]], "targetnerlabels (assertiondlmodel attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLModel.targetNerLabels"]], "testdataset (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.testDataset"]], "validationsplit (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.validationSplit"]], "verbose (assertiondlapproach attribute)": [[43, "sparknlp_jsl.annotator.assertion.assertionDL.AssertionDLApproach.verbose"]], "assertionchunkconverter (class in sparknlp_jsl.annotator.assertion.assertion_chunk_converter)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter"]], "chunkbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkBeginCol"]], "chunkendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkEndCol"]], "chunktextcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.chunkTextCol"]], "inputannotatortypes (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputAnnotatorTypes"]], "inputcols (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.inputCols"]], "name (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.name"]], "outputannotatortype (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputAnnotatorType"]], "outputcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputCol"]], "outputtokenbegincol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenBeginCol"]], "outputtokenendcol (assertionchunkconverter attribute)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.outputTokenEndCol"]], "setchunkbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkBeginCol"]], "setchunkendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkEndCol"]], "setchunktextcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setChunkTextCol"]], "setinputcols() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setInputCols"]], "setoutputcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputCol"]], "setoutputtokenbegincol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenBeginCol"]], "setoutputtokenendcol() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setOutputTokenEndCol"]], "setparams() (assertionchunkconverter method)": [[44, "sparknlp_jsl.annotator.assertion.assertion_chunk_converter.AssertionChunkConverter.setParams"]], "sparknlp_jsl.annotator.assertion.assertion_chunk_converter": [[44, "module-sparknlp_jsl.annotator.assertion.assertion_chunk_converter"]], "assertionlogregapproach (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach"]], "assertionlogregmodel (class in sparknlp_jsl.annotator.assertion.assertion_dl_reg)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel"]], "afterparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.afterParam"]], "afterparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.afterParam"]], "beforeparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.beforeParam"]], "beforeparam (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.beforeParam"]], "enetparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.eNetParam"]], "endcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.endCol"]], "endcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.endCol"]], "inputannotatortypes (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.inputAnnotatorTypes"]], "inputannotatortypes (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.inputAnnotatorTypes"]], "label (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.label"]], "maxiter (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.maxIter"]], "name (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.name"]], "nercol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.nerCol"]], "nercol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.nerCol"]], "outputannotatortype (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.outputAnnotatorType"]], "outputannotatortype (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.outputAnnotatorType"]], "pretrained() (assertionlogregmodel static method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.pretrained"]], "regparam (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.regParam"]], "setafter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setAfter"]], "setbefore() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setBefore"]], "setendcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEndCol"]], "setenet() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setEnet"]], "setlabelcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setLabelCol"]], "setmaxiter() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setMaxIter"]], "setnercol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setNerCol"]], "setreg() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setReg"]], "setstartcol() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setStartCol"]], "settargetnerlabels() (assertionlogregapproach method)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.setTargetNerLabels"]], "sparknlp_jsl.annotator.assertion.assertion_dl_reg": [[45, "module-sparknlp_jsl.annotator.assertion.assertion_dl_reg"]], "startcol (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.startCol"]], "startcol (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.startCol"]], "targetnerlabels (assertionlogregapproach attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegApproach.targetNerLabels"]], "targetnerlabels (assertionlogregmodel attribute)": [[45, "sparknlp_jsl.annotator.assertion.assertion_dl_reg.AssertionLogRegModel.targetNerLabels"]], "sparknlp_jsl.annotator.assertion": [[46, "module-sparknlp_jsl.annotator.assertion"]], "chunk2token (class in sparknlp_jsl.annotator.chunk2_token)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token"]], "inputannotatortypes (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.inputAnnotatorTypes"]], "name (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.name"]], "outputannotatortype (chunk2token attribute)": [[47, "sparknlp_jsl.annotator.chunk2_token.Chunk2Token.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunk2_token": [[47, "module-sparknlp_jsl.annotator.chunk2_token"]], "assertionfilterer (class in sparknlp_jsl.annotator.chunker.assertion_filterer)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer"]], "casesensitive (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.caseSensitive"]], "criteria (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.criteria"]], "entitiesconfidence (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.entitiesConfidence"]], "inputannotatortypes (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.inputAnnotatorTypes"]], "name (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.name"]], "outputannotatortype (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.outputAnnotatorType"]], "regex (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.regex"]], "setcasesensitive() (assertionfilterer method)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.setCaseSensitive"]], "sparknlp_jsl.annotator.chunker.assertion_filterer": [[48, "module-sparknlp_jsl.annotator.chunker.assertion_filterer"]], "whitelist (assertionfilterer attribute)": [[48, "sparknlp_jsl.annotator.chunker.assertion_filterer.AssertionFilterer.whiteList"]], "chunkconverter (class in sparknlp_jsl.annotator.chunker.chunk_converter)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter"]], "inputannotatortypes (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.inputAnnotatorTypes"]], "name (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.name"]], "outputannotatortype (chunkconverter attribute)": [[49, "sparknlp_jsl.annotator.chunker.chunk_converter.ChunkConverter.outputAnnotatorType"]], "sparknlp_jsl.annotator.chunker.chunk_converter": [[49, "module-sparknlp_jsl.annotator.chunker.chunk_converter"]], "chunkkeyphraseextraction (class in sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction"]], "concatenatesentences (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.concatenateSentences"]], "divergence (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.divergence"]], "documentlevelprocessing (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.documentLevelProcessing"]], "droppunctuation (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.dropPunctuation"]], "inputannotatortypes (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.inputAnnotatorTypes"]], "name (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.name"]], "outputannotatortype (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.outputAnnotatorType"]], "pretrained() (chunkkeyphraseextraction static method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.pretrained"]], "selectmostdifferent (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.selectMostDifferent"]], "setconcatenatesentences() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setConcatenateSentences"]], "setdivergence() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDivergence"]], "setdocumentlevelprocessing() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDocumentLevelProcessing"]], "setdroppunctuation() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setDropPunctuation"]], "setselectmostdifferent() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setSelectMostDifferent"]], "settopn() (chunkkeyphraseextraction method)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.setTopN"]], "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction": [[50, "module-sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction"]], "topn (chunkkeyphraseextraction attribute)": [[50, "sparknlp_jsl.annotator.chunker.chunk_key_phrase_extraction.ChunkKeyPhraseExtraction.topN"]], "chunksentencesplitter (class in sparknlp_jsl.annotator.chunker.chunk_sentence_splitter)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter"]], "defaultentity (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.defaultEntity"]], "groupbysentences (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.groupBySentences"]], "inputannotatortypes (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.inputAnnotatorTypes"]], "insertchunk (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.insertChunk"]], "name (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.name"]], "outputannotatortype (chunksentencesplitter attribute)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.outputAnnotatorType"]], "setdefaultentity() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setDefaultEntity"]], "setgroupbysentences() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setGroupBySentences"]], "setinsertchunk() (chunksentencesplitter method)": [[51, "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter.ChunkSentenceSplitter.setInsertChunk"]], "sparknlp_jsl.annotator.chunker.chunk_sentence_splitter": [[51, "module-sparknlp_jsl.annotator.chunker.chunk_sentence_splitter"]], "chunkfilterer (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer"]], "chunkfiltererapproach (class in sparknlp_jsl.annotator.chunker.chunker_filterer)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach"]], "blacklist (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.blackList"]], "blacklist (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.blackList"]], "criteria (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.criteria"]], "criteria (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.criteria"]], "entitiesconfidence (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.entitiesConfidence"]], "entitiesconfidenceresource (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.entitiesConfidenceResource"]], "filtervalue (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.filterValue"]], "filtervalue (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.filterValue"]], "inputannotatortypes (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.inputAnnotatorTypes"]], "inputannotatortypes (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.inputAnnotatorTypes"]], "name (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.name"]], "name (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.name"]], "outputannotatortype (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.outputAnnotatorType"]], "outputannotatortype (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.outputAnnotatorType"]], "regex (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.regex"]], "regex (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.regex"]], "setblacklist() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setBlackList"]], "setblacklist() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setBlackList"]], "setcriteria() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setCriteria"]], "setcriteria() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setCriteria"]], "setentitiesconfidence() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setEntitiesConfidence"]], "setentitiesconfidenceresource() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setEntitiesConfidenceResource"]], "setfilterentity() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setFilterEntity"]], "setfilterentity() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setFilterEntity"]], "setregex() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setRegex"]], "setregex() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setRegex"]], "setwhitelist() (chunkfilterer method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.setWhiteList"]], "setwhitelist() (chunkfiltererapproach method)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.setWhiteList"]], "sparknlp_jsl.annotator.chunker.chunker_filterer": [[52, "module-sparknlp_jsl.annotator.chunker.chunker_filterer"]], "whitelist (chunkfilterer attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFilterer.whiteList"]], "whitelist (chunkfiltererapproach attribute)": [[52, "sparknlp_jsl.annotator.chunker.chunker_filterer.ChunkFiltererApproach.whiteList"]], "chunkmapperapproach (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach"]], "chunkmapperfuzzymatchingparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams"]], "chunkmappermodel (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel"]], "commonchunkmapperparams (class in sparknlp_jsl.annotator.chunker.chunkmapper)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams"]], "allowmultitokenchunk (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.allowMultiTokenChunk"]], "dictionary (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.dictionary"]], "enablecharfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableCharFingerprintMatching"]], "enablefuzzymatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableFuzzyMatching"]], "enabletokenfingerprintmatching (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.enableTokenFingerprintMatching"]], "fuzzydistancescalingmode (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyDistanceScalingMode"]], "fuzzymatchingdistancethresholds (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistanceThresholds"]], "fuzzymatchingdistances (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.fuzzyMatchingDistances"]], "inputannotatortypes (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.inputAnnotatorTypes"]], "lowercase (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.lowerCase"]], "maxcharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxCharNgramFingerprint"]], "maxtokenngramdroppingcharsratio (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingCharsRatio"]], "maxtokenngramdroppingoperator (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingOperator"]], "maxtokenngramdroppingtokens (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramDroppingTokens"]], "maxtokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.maxTokenNgramFingerprint"]], "mincharngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minCharNgramFingerprint"]], "mintokenngramfingerprint (chunkmapperfuzzymatchingparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.minTokenNgramFingerprint"]], "multivaluesrelations (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.multivaluesRelations"]], "name (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.name"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach.name"]], "name (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.name"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.name"]], "outputannotatortype (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.outputAnnotatorType"]], "outputannotatortype (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.outputAnnotatorType"]], "pretrained() (chunkmappermodel static method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.pretrained"], [135, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"], [168, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel.pretrained"]], "rel (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rel"]], "rels (commonchunkmapperparams attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.rels"]], "setallowmultitokenchunk() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setAllowMultiTokenChunk"]], "setdictionary() (chunkmapperapproach method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.setDictionary"]], "setenablecharfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableCharFingerprintMatching"]], "setenablefuzzymatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableFuzzyMatching"]], "setenabletokenfingerprintmatching() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setEnableTokenFingerprintMatching"]], "setfuzzydistancescalingmode() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyDistanceScalingMode"]], "setfuzzymatchingdistancethresholds() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistanceThresholds"]], "setfuzzymatchingdistances() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setFuzzyMatchingDistances"]], "setlowercase() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setLowerCase"]], "setmaxcharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxCharNgramFingerprint"]], "setmaxtokenngramdroppingcharsratio() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingCharsRatio"]], "setmaxtokenngramdroppingoperator() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingOperator"]], "setmaxtokenngramdroppingtokens() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramDroppingTokens"]], "setmaxtokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMaxTokenNgramFingerprint"]], "setmincharngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinCharNgramFingerprint"]], "setmintokenngramfingerprint() (chunkmapperfuzzymatchingparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperFuzzyMatchingParams.setMinTokenNgramFingerprint"]], "setmultivaluesrelations() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setMultivaluesRelations"]], "setrel() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRel"]], "setrels() (commonchunkmapperparams method)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.CommonChunkMapperParams.setRels"]], "skiplpinputcolsvalidation (chunkmapperapproach attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperApproach.skipLPInputColsValidation"]], "skiplpinputcolsvalidation (chunkmappermodel attribute)": [[53, "sparknlp_jsl.annotator.chunker.chunkmapper.ChunkMapperModel.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.chunker.chunkmapper": [[53, "module-sparknlp_jsl.annotator.chunker.chunkmapper"]], "chunkmapperfilterer (class in sparknlp_jsl.annotator.chunker.chunkmapper_filterer)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer"]], "inputannotatortypes (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.inputAnnotatorTypes"]], "name (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.name"]], "outputannotatortype (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.outputAnnotatorType"]], "returncriteria (chunkmapperfilterer attribute)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.returnCriteria"]], "setreturncriteria() (chunkmapperfilterer method)": [[54, "sparknlp_jsl.annotator.chunker.chunkmapper_filterer.ChunkMapperFilterer.setReturnCriteria"]], "sparknlp_jsl.annotator.chunker.chunkmapper_filterer": [[54, "module-sparknlp_jsl.annotator.chunker.chunkmapper_filterer"]], "docmapperapproach (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.annotator.chunker.docmapper)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel"]], "dictionary (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.dictionary"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.dictionary"]], "inputannotatortypes (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.inputAnnotatorTypes"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.inputAnnotatorTypes"]], "inputannotatortypes (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.inputAnnotatorTypes"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.inputAnnotatorTypes"]], "name (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.name"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.name"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.name"]], "name (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.name"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.name"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.name"]], "outputannotatortype (docmapperapproach attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.outputAnnotatorType"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.outputAnnotatorType"]], "outputannotatortype (docmappermodel attribute)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.outputAnnotatorType"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.outputAnnotatorType"]], "pretrained() (docmappermodel static method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperModel.pretrained"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel.pretrained"]], "setdictionary() (docmapperapproach method)": [[55, "sparknlp_jsl.annotator.chunker.docmapper.DocMapperApproach.setDictionary"], [136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"], [169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach.setDictionary"]], "sparknlp_jsl.annotator.chunker.docmapper": [[55, "module-sparknlp_jsl.annotator.chunker.docmapper"]], "sparknlp_jsl.annotator.chunker": [[56, "module-sparknlp_jsl.annotator.chunker"]], "documentlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach"]], "documentlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.document_log_classifier)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel"]], "classificationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.classificationModel"]], "classificationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.classificationModelPath"]], "fitintercept (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.fitIntercept"]], "inputannotatortypes (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.inputAnnotatorTypes"]], "labelcol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labelCol"]], "labels (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.labels"]], "labels (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.labels"]], "maxiter (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.maxIter"]], "mergechunks (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.mergeChunks"]], "name (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.name"]], "outputannotatortype (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (documentlogregclassifiermodel static method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.pretrained"]], "setclassificationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setClassificationModel"]], "setclassificationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setFitIntercept"]], "setlabelcolumn() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabelColumn"]], "setlabels() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setLabels"]], "setlabels() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setLabels"]], "setmaxiter() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setMaxIter"]], "setmergechunks() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setMergeChunks"]], "settol() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setTol"]], "setvectorizationmodel() (documentlogregclassifiermodel method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentlogregclassifierapproach method)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_log_classifier": [[57, "module-sparknlp_jsl.annotator.classification.document_log_classifier"]], "tol (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.tol"]], "vectorizationmodel (documentlogregclassifiermodel attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentlogregclassifierapproach attribute)": [[57, "sparknlp_jsl.annotator.classification.document_log_classifier.DocumentLogRegClassifierApproach.vectorizationModelPath"]], "documentmlclassifierapproach (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach"]], "documentmlclassifiermodel (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel"]], "documentmlclassifierparams (class in sparknlp_jsl.annotator.classification.document_ml_classifier)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams"]], "classificationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.classificationModel"]], "classificationmodelclass (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelClass"]], "classificationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.classificationModelPath"]], "fitintercept (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.fitIntercept"]], "inputannotatortypes (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.inputAnnotatorTypes"]], "labelcol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.labelCol"]], "labels (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.labels"]], "labels (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.labels"]], "maxiter (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.maxIter"]], "maxtokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.maxTokenNgram"]], "mergechunks (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.mergeChunks"]], "mintokenngram (documentmlclassifierparams attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.minTokenNgram"]], "name (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.name"]], "outputannotatortype (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.outputAnnotatorType"]], "outputannotatortype (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.outputAnnotatorType"]], "pretrained() (documentmlclassifiermodel static method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.pretrained"]], "setclassificationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setClassificationModel"]], "setclassificationmodelclass() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelClass"]], "setclassificationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setClassificationModelPath"]], "setfitintercept() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setFitIntercept"]], "setlabelcol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setLabelCol"]], "setlabels() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setLabels"]], "setlabels() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setLabels"]], "setmaxiter() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxIter"]], "setmaxtokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMaxTokenNgram"]], "setmergechunks() (documentmlclassifierparams method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierParams.setMergeChunks"]], "setmintokenngram() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setMinTokenNgram"]], "settol() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setTol"]], "setvectorizationmodel() (documentmlclassifiermodel method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.setVectorizationModel"]], "setvectorizationmodelpath() (documentmlclassifierapproach method)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.setVectorizationModelPath"]], "sparknlp_jsl.annotator.classification.document_ml_classifier": [[58, "module-sparknlp_jsl.annotator.classification.document_ml_classifier"]], "tol (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.tol"]], "vectorizationmodel (documentmlclassifiermodel attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierModel.vectorizationModel"]], "vectorizationmodelpath (documentmlclassifierapproach attribute)": [[58, "sparknlp_jsl.annotator.classification.document_ml_classifier.DocumentMLClassifierApproach.vectorizationModelPath"]], "genericlogregclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach"]], "genericlogregclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_log_reg_classifier)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel"]], "inputannotatortypes (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.inputAnnotatorTypes"]], "name (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.name"]], "name (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.name"]], "outputannotatortype (genericlogregclassifierapproach attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericlogregclassifiermodel attribute)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.outputAnnotatorType"]], "pretrained() (genericlogregclassifiermodel static method)": [[59, "sparknlp_jsl.annotator.classification.generic_log_reg_classifier.GenericLogRegClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_log_reg_classifier": [[59, "module-sparknlp_jsl.annotator.classification.generic_log_reg_classifier"]], "genericsvmclassifierapproach (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach"]], "genericsvmclassifiermodel (class in sparknlp_jsl.annotator.classification.generic_svm_classifier)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel"]], "inputannotatortypes (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.inputAnnotatorTypes"]], "name (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.name"]], "name (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.name"]], "outputannotatortype (genericsvmclassifierapproach attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericsvmclassifiermodel attribute)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.outputAnnotatorType"]], "pretrained() (genericsvmclassifiermodel static method)": [[60, "sparknlp_jsl.annotator.classification.generic_svm_classifier.GenericSVMClassifierModel.pretrained"]], "sparknlp_jsl.annotator.classification.generic_svm_classifier": [[60, "module-sparknlp_jsl.annotator.classification.generic_svm_classifier"]], "sparknlp_jsl.annotator.classification": [[61, "module-sparknlp_jsl.annotator.classification"]], "medicalbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification"]], "coalescesentences (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.maxSentenceLength"]], "name (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.name"]], "outputannotatortype (medicalbertforsequenceclassification attribute)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicalbertforsequenceclassification static method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertforsequenceclassification method)": [[62, "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification.MedicalBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification": [[62, "module-sparknlp_jsl.annotator.classification.medical_bert_for_sequence_classification"]], "medicalbertfortokenclassifier (class in sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier"]], "configprotobytes (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.configProtoBytes"]], "getclasses() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.getClasses"]], "inputannotatortypes (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.inputAnnotatorTypes"]], "loadsavedmodel() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModel"]], "loadsavedmodelopensource() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.loadSavedModelOpenSource"]], "maxsentencelength (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.maxSentenceLength"]], "name (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.name"]], "outputannotatortype (medicalbertfortokenclassifier attribute)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.outputAnnotatorType"]], "pretrained() (medicalbertfortokenclassifier static method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.pretrained"]], "setconfigprotobytes() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setConfigProtoBytes"]], "setmaxsentencelength() (medicalbertfortokenclassifier method)": [[63, "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier.MedicalBertForTokenClassifier.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier": [[63, "module-sparknlp_jsl.annotator.classification.medical_bert_for_token_classifier"]], "medicaldistilbertforsequenceclassification (class in sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification"]], "coalescesentences (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.coalesceSentences"]], "configprotobytes (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.configProtoBytes"]], "getclasses() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.getClasses"]], "inputannotatortypes (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.inputAnnotatorTypes"]], "loadsavedmodel() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.loadSavedModelOpenSource"]], "maxsentencelength (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.maxSentenceLength"]], "name (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.name"]], "outputannotatortype (medicaldistilbertforsequenceclassification attribute)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.outputAnnotatorType"]], "pretrained() (medicaldistilbertforsequenceclassification static method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.pretrained"]], "setcoalescesentences() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setCoalesceSentences"]], "setconfigprotobytes() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setConfigProtoBytes"]], "setmaxsentencelength() (medicaldistilbertforsequenceclassification method)": [[64, "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification.MedicalDistilBertForSequenceClassification.setMaxSentenceLength"]], "sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification": [[64, "module-sparknlp_jsl.annotator.classification.medical_distilbert_for_sequence_classification"]], "contextualparserapproach (class in sparknlp_jsl.annotator.context.contextual_parser)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach"]], "contextualparsermodel (class in sparknlp_jsl.annotator.context.contextual_parser)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel"]], "casesensitive (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.caseSensitive"]], "casesensitive (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.caseSensitive"]], "completecontextmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.completeContextMatch"]], "dictionary (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.dictionary"]], "inputannotatortypes (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.inputAnnotatorTypes"]], "inputannotatortypes (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.inputAnnotatorTypes"]], "jsonpath (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.jsonPath"]], "optionalcontextrules (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.optionalContextRules"]], "optionalcontextrules (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.optionalContextRules"]], "outputannotatortype (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.outputAnnotatorType"]], "outputannotatortype (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.outputAnnotatorType"]], "prefixandsuffixmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.prefixAndSuffixMatch"]], "prefixandsuffixmatch (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.prefixAndSuffixMatch"]], "setcasesensitive() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCaseSensitive"]], "setcasesensitive() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setCaseSensitive"]], "setcompletecontextmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setCompleteContextMatch"]], "setdictionary() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setDictionary"]], "setjsonpath() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setJsonPath"]], "setoptionalcontextrules() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setOptionalContextRules"]], "setoptionalcontextrules() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setOptionalContextRules"]], "setprefixandsuffixmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setPrefixAndSuffixMatch"]], "setprefixandsuffixmatch() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setPrefixAndSuffixMatch"]], "setshortestcontextmatch() (contextualparserapproach method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.setShortestContextMatch"]], "setshortestcontextmatch() (contextualparsermodel method)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.setShortestContextMatch"]], "shortestcontextmatch (contextualparserapproach attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserApproach.shortestContextMatch"]], "shortestcontextmatch (contextualparsermodel attribute)": [[65, "sparknlp_jsl.annotator.context.contextual_parser.ContextualParserModel.shortestContextMatch"]], "sparknlp_jsl.annotator.context.contextual_parser": [[65, "module-sparknlp_jsl.annotator.context.contextual_parser"]], "sparknlp_jsl.annotator.context": [[66, "module-sparknlp_jsl.annotator.context"]], "deidentification (class in sparknlp_jsl.annotator.deid.deidentification)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.annotator.deid.deidentification)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel"]], "ageranges (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ageRanges"]], "ageranges (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ageRanges"]], "blacklist (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.blackList"]], "blacklist (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.blackList"]], "consistentobfuscation (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.consistentObfuscation"]], "consistentobfuscation (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.consistentObfuscation"]], "dateformats (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateFormats"]], "dateformats (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateFormats"]], "datetag (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateTag"]], "datetag (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateTag"]], "datetoyear (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.dateToYear"]], "datetoyear (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.dateToYear"]], "days (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.days"]], "days (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.days"]], "entitycasingmodespath (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.entityCasingModesPath"]], "fixedmasklength (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.fixedMaskLength"]], "fixedmasklength (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.fixedMaskLength"]], "genderawareness (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.genderAwareness"]], "genderawareness (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.genderAwareness"]], "getblacklist() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getBlackList"]], "getblacklist() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getBlackList"]], "getregexentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getRegexEntities"]], "getsamelengthformattedentities() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.getSameLengthFormattedEntities"]], "getsamelengthformattedentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.getSameLengthFormattedEntities"]], "ignoreregex (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.ignoreRegex"]], "ignoreregex (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.ignoreRegex"]], "inputannotatortypes (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.inputAnnotatorTypes"]], "inputannotatortypes (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.inputAnnotatorTypes"]], "israndomdatedisplacement (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.isRandomDateDisplacement"]], "israndomdatedisplacement (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.isRandomDateDisplacement"]], "language (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.language"]], "language (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.language"]], "mappingscolumn (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mappingsColumn"]], "mappingscolumn (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mappingsColumn"]], "maskingpolicy (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.maskingPolicy"]], "maskingpolicy (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.maskingPolicy"]], "minyear (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.minYear"]], "minyear (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.minYear"]], "mode (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.mode"]], "mode (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.mode"]], "name (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.name"], [131, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification.name"], [164, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification.name"]], "name (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.name"], [131, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.name"], [164, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.name"]], "obfuscatedate (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateDate"]], "obfuscatedate (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateDate"]], "obfuscatereffile (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefFile"]], "obfuscaterefsource (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.obfuscateRefSource"]], "obfuscaterefsource (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.obfuscateRefSource"]], "outputannotatortype (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAnnotatorType"]], "outputannotatortype (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAnnotatorType"]], "outputasdocument (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.outputAsDocument"]], "outputasdocument (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.outputAsDocument"]], "pretrained() (deidentificationmodel static method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.pretrained"], [131, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"], [164, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel.pretrained"]], "reffileformat (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refFileFormat"]], "refsep (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.refSep"]], "regexentities (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexEntities"]], "regexoverride (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexOverride"]], "regexoverride (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.regexOverride"]], "regexpatternsdictionary (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.regexPatternsDictionary"]], "region (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.region"]], "region (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.region"]], "returnentitymappings (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.returnEntityMappings"]], "returnentitymappings (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.returnEntityMappings"]], "sameentitythreshold (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameEntityThreshold"]], "sameentitythreshold (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameEntityThreshold"]], "samelengthformattedentities (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.sameLengthFormattedEntities"]], "samelengthformattedentities (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.sameLengthFormattedEntities"]], "seed (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.seed"]], "seed (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.seed"]], "selectiveobfuscationmodespath (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.selectiveObfuscationModesPath"]], "setageranges() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setAgeRanges"]], "setageranges() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setAgeRanges"]], "setblacklist() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setBlackList"]], "setblacklist() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setBlackList"]], "setconsistentobfuscation() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setConsistentObfuscation"]], "setconsistentobfuscation() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setConsistentObfuscation"]], "setdateformats() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateFormats"]], "setdateformats() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateFormats"]], "setdatetag() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateTag"]], "setdatetag() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateTag"]], "setdatetoyear() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDateToYear"]], "setdatetoyear() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDateToYear"]], "setdays() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setDays"]], "setdays() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setDays"]], "setentitycasingmodes() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setEntityCasingModes"]], "setfixedmasklength() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setFixedMaskLength"]], "setfixedmasklength() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setFixedMaskLength"]], "setgenderawareness() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setGenderAwareness"]], "setgenderawareness() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setGenderAwareness"]], "setignoreregex() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIgnoreRegex"]], "setignoreregex() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIgnoreRegex"]], "setisrandomdatedisplacement() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setIsRandomDateDisplacement"]], "setisrandomdatedisplacement() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setIsRandomDateDisplacement"]], "setlanguage() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setLanguage"]], "setlanguage() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setLanguage"]], "setmappingscolumn() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMappingsColumn"]], "setmappingscolumn() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMappingsColumn"]], "setmaskingpolicy() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMaskingPolicy"]], "setmaskingpolicy() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMaskingPolicy"]], "setminyear() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMinYear"]], "setminyear() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMinYear"]], "setmode() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setMode"]], "setmode() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setMode"]], "setobfuscatedate() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateDate"]], "setobfuscatedate() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateDate"]], "setobfuscatereffile() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefFile"]], "setobfuscaterefsource() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setObfuscateRefSource"]], "setobfuscaterefsource() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setObfuscateRefSource"]], "setoutputasdocument() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setOutputAsDocument"]], "setoutputasdocument() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setOutputAsDocument"]], "setreffileformat() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefFileFormat"]], "setrefsep() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRefSep"]], "setregexoverride() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexOverride"]], "setregexoverride() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegexOverride"]], "setregexpatternsdictionary() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegexPatternsDictionary"]], "setregion() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setRegion"]], "setregion() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setRegion"]], "setreturnentitymappings() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setReturnEntityMappings"]], "setreturnentitymappings() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setReturnEntityMappings"]], "setsameentitythreshold() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameEntityThreshold"]], "setsameentitythreshold() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameEntityThreshold"]], "setsamelengthformattedentities() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSameLengthFormattedEntities"]], "setsamelengthformattedentities() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSameLengthFormattedEntities"]], "setseed() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSeed"]], "setseed() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setSeed"]], "setselectiveobfuscationmodes() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setSelectiveObfuscationModes"]], "setunnormalizeddatemode() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUnnormalizedDateMode"]], "setunnormalizeddatemode() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUnnormalizedDateMode"]], "setuseshifdays() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setUseShifDays"]], "setuseshifdays() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setUseShifDays"]], "setzipcodetag() (deidentification method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.setZipCodeTag"]], "setzipcodetag() (deidentificationmodel method)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.setZipCodeTag"]], "sparknlp_jsl.annotator.deid.deidentification": [[67, "module-sparknlp_jsl.annotator.deid.deIdentification"]], "unnormalizeddatemode (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.unnormalizedDateMode"]], "unnormalizeddatemode (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.unnormalizedDateMode"]], "useshifdays (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.useShifDays"]], "useshifdays (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.useShifDays"]], "zipcodetag (deidentification attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentification.zipCodeTag"]], "zipcodetag (deidentificationmodel attribute)": [[67, "sparknlp_jsl.annotator.deid.deIdentification.DeIdentificationModel.zipCodeTag"]], "documenthashcoder (class in sparknlp_jsl.annotator.deid.doccument_hashcoder)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder"]], "dateshiftcolumn (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.dateShiftColumn"]], "inputannotatortypes (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.inputAnnotatorTypes"]], "name (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.name"]], "newdateshift (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.newDateShift"]], "outputannotatortype (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.outputAnnotatorType"]], "patientidcolumn (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.patientIdColumn"]], "rangedays (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.rangeDays"]], "seed (documenthashcoder attribute)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.seed"]], "setdateshiftcolumn() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setDateShiftColumn"]], "setnewdateshift() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setNewDateShift"]], "setparams() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setParams"]], "setpatientidcolumn() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setPatientIdColumn"]], "setrangedays() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setRangeDays"]], "setseed() (documenthashcoder method)": [[68, "sparknlp_jsl.annotator.deid.doccument_hashcoder.DocumentHashCoder.setSeed"]], "sparknlp_jsl.annotator.deid.doccument_hashcoder": [[68, "module-sparknlp_jsl.annotator.deid.doccument_hashcoder"]], "sparknlp_jsl.annotator.deid": [[69, "module-sparknlp_jsl.annotator.deid"]], "namechunkobfuscator (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator"]], "namechunkobfuscatorapproach (class in sparknlp_jsl.annotator.deid.name_obfuscator)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach"]], "genderawareness (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.genderAwareness"]], "genderawareness (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.genderAwareness"]], "inputannotatortypes (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.inputAnnotatorTypes"]], "inputannotatortypes (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.inputAnnotatorTypes"]], "language (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.language"]], "language (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.language"]], "nameentities (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.nameEntities"]], "nameentities (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.nameEntities"]], "obfuscatereffile (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefFile"]], "obfuscaterefsource (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.obfuscateRefSource"]], "obfuscaterefsource (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.obfuscateRefSource"]], "outputannotatortype (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.outputAnnotatorType"]], "outputannotatortype (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.outputAnnotatorType"]], "reffileformat (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refFileFormat"]], "refsep (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.refSep"]], "samelength (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.sameLength"]], "samelength (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.sameLength"]], "seed (namechunkobfuscator attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.seed"]], "seed (namechunkobfuscatorapproach attribute)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.seed"]], "setgenderawareness() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setGenderAwareness"]], "setgenderawareness() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setGenderAwareness"]], "setlanguage() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setLanguage"]], "setlanguage() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setLanguage"]], "setnameentities() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setNameEntities"]], "setnameentities() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setNameEntities"]], "setobfuscatereffile() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefFile"]], "setobfuscaterefsource() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setObfuscateRefSource"]], "setobfuscaterefsource() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setObfuscateRefSource"]], "setreffileformat() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefFileFormat"]], "setrefsep() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setRefSep"]], "setsamelength() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSameLength"]], "setsamelength() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSameLength"]], "setseed() (namechunkobfuscator method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscator.setSeed"]], "setseed() (namechunkobfuscatorapproach method)": [[70, "sparknlp_jsl.annotator.deid.name_obfuscator.NameChunkObfuscatorApproach.setSeed"]], "sparknlp_jsl.annotator.deid.name_obfuscator": [[70, "module-sparknlp_jsl.annotator.deid.name_obfuscator"]], "reidentification (class in sparknlp_jsl.annotator.deid.reidentification)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification"]], "inputannotatortypes (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.inputAnnotatorTypes"]], "name (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.name"]], "outputannotatortype (reidentification attribute)": [[71, "sparknlp_jsl.annotator.deid.reIdentification.ReIdentification.outputAnnotatorType"]], "sparknlp_jsl.annotator.deid.reidentification": [[71, "module-sparknlp_jsl.annotator.deid.reIdentification"]], "replacer (class in sparknlp_jsl.annotator.deid.replacer)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer"]], "getusereplacement() (replacer method)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.getUseReplacement"]], "inputannotatortypes (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.inputAnnotatorTypes"]], "name (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.name"]], "outputannotatortype (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.outputAnnotatorType"]], "setusereplacement() (replacer method)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.setUseReplacement"]], "sparknlp_jsl.annotator.deid.replacer": [[72, "module-sparknlp_jsl.annotator.deid.replacer"]], "usereplacement (replacer attribute)": [[72, "sparknlp_jsl.annotator.deid.replacer.Replacer.useReplacement"]], "sparknlp_jsl.annotator.disambiguation": [[73, "module-sparknlp_jsl.annotator.disambiguation"]], "nerdisambiguator (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator"]], "nerdisambiguatormodel (class in sparknlp_jsl.annotator.disambiguation.ner_disambiguator)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel"]], "embeddingtypeparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.embeddingTypeParam"]], "embeddingtypeparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.embeddingTypeParam"]], "inputannotatortypes (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.inputAnnotatorTypes"]], "inputannotatortypes (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.inputAnnotatorTypes"]], "levenshteindistancethresholdparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.levenshteinDistanceThresholdParam"]], "levenshteindistancethresholdparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.levenshteinDistanceThresholdParam"]], "name (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.name"]], "narrowwithapproximatematching (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.narrowWithApproximateMatching"]], "narrowwithapproximatematching (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.narrowWithApproximateMatching"]], "nearmatchinggapparam (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.nearMatchingGapParam"]], "nearmatchinggapparam (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.nearMatchingGapParam"]], "numfirstchars (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.numFirstChars"]], "numfirstchars (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.numFirstChars"]], "outputannotatortype (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.outputAnnotatorType"]], "outputannotatortype (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.outputAnnotatorType"]], "predictionslimit (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.predictionsLimit"]], "predictionslimit (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.predictionsLimit"]], "pretrained() (nerdisambiguatormodel static method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.pretrained"]], "s3knowledgebasename (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.s3KnowledgeBaseName"]], "setembeddingtype() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setEmbeddingType"]], "setembeddingtype() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setEmbeddingType"]], "setlevenshteindistancethresholdparam() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setLevenshteinDistanceThresholdParam"]], "setlevenshteindistancethresholdparam() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setLevenshteinDistanceThresholdParam"]], "setnarrowwithapproximatematching() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNarrowWithApproximateMatching"]], "setnarrowwithapproximatematching() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNarrowWithApproximateMatching"]], "setnearmatchinggapparam() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNearMatchingGapParam"]], "setnearmatchinggapparam() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNearMatchingGapParam"]], "setnumfirstchars() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setNumFirstChars"]], "setnumfirstchars() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setNumFirstChars"]], "setpredictionlimit() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setPredictionLimit"]], "setpredictionlimit() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setPredictionLimit"]], "sets3knowledgebasename() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setS3KnowledgeBaseName"]], "settokensearch() (nerdisambiguator method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.setTokenSearch"]], "settokensearch() (nerdisambiguatormodel method)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.setTokenSearch"]], "sparknlp_jsl.annotator.disambiguation.ner_disambiguator": [[74, "module-sparknlp_jsl.annotator.disambiguation.ner_disambiguator"]], "tokensearch (nerdisambiguator attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguator.tokenSearch"]], "tokensearch (nerdisambiguatormodel attribute)": [[74, "sparknlp_jsl.annotator.disambiguation.ner_disambiguator.NerDisambiguatorModel.tokenSearch"]], "doc2chunkinternal (class in sparknlp_jsl.annotator.doc2_chunk_internal)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal"]], "chunkcol (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.chunkCol"]], "failonmissing (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.failOnMissing"]], "inputannotatortypes (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.inputAnnotatorTypes"]], "isarray (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.isArray"]], "lowercase (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.lowerCase"]], "name (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.name"]], "setchunkcol() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setChunkCol"]], "setfailonmissing() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setFailOnMissing"]], "setisarray() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setIsArray"]], "setlowercase() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setLowerCase"]], "setparams() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setParams"]], "setstartcol() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartCol"]], "setstartcolbytokenindex() (doc2chunkinternal method)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.setStartColByTokenIndex"]], "sparknlp_jsl.annotator.doc2_chunk_internal": [[75, "module-sparknlp_jsl.annotator.doc2_chunk_internal"]], "startcol (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startCol"]], "startcolbytokenindex (doc2chunkinternal attribute)": [[75, "sparknlp_jsl.annotator.doc2_chunk_internal.Doc2ChunkInternal.startColByTokenIndex"]], "averageembeddings (class in sparknlp_jsl.annotator.embeddings.average_embeddings)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings"]], "inputannotatortypes (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.inputAnnotatorTypes"]], "name (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.name"]], "outputannotatortype (averageembeddings attribute)": [[76, "sparknlp_jsl.annotator.embeddings.average_embeddings.AverageEmbeddings.outputAnnotatorType"]], "sparknlp_jsl.annotator.embeddings.average_embeddings": [[76, "module-sparknlp_jsl.annotator.embeddings.average_embeddings"]], "bertsentencechunkembeddings (class in sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings"]], "chunkweight (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.chunkWeight"]], "inputannotatortypes (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.inputAnnotatorTypes"]], "load() (bertsentencechunkembeddings static method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.load"]], "name (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.name"]], "outputannotatortype (bertsentencechunkembeddings attribute)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.outputAnnotatorType"]], "pretrained() (bertsentencechunkembeddings static method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.pretrained"]], "setchunkweight() (bertsentencechunkembeddings method)": [[77, "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings.BertSentenceChunkEmbeddings.setChunkWeight"]], "sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings": [[77, "module-sparknlp_jsl.annotator.embeddings.bert_sentence_embeddings"]], "entitychunkembeddings (class in sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings"]], "entityweights (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.entityWeights"]], "inputannotatortypes (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.inputAnnotatorTypes"]], "maxsyntacticdistance (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.maxSyntacticDistance"]], "name (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.name"]], "outputannotatortype (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.outputAnnotatorType"]], "pretrained() (entitychunkembeddings static method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.pretrained"]], "setentityweights() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setEntityWeights"]], "setmaxsyntacticdistance() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setMaxSyntacticDistance"]], "settargetentities() (entitychunkembeddings method)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.setTargetEntities"]], "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings": [[78, "module-sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings"]], "targetentities (entitychunkembeddings attribute)": [[78, "sparknlp_jsl.annotator.embeddings.entity_chunk_embeddings.EntityChunkEmbeddings.targetEntities"]], "extractivesummarization (class in sparknlp_jsl.annotator.embeddings.extractive_summarization)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization"]], "inputannotatortypes (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.inputAnnotatorTypes"]], "name (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.name"]], "outputannotatortype (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.outputAnnotatorType"]], "returnsingledocument (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.returnSingleDocument"]], "setreturnsingledocument() (extractivesummarization method)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setReturnSingleDocument"]], "setsimilaritythreshold() (extractivesummarization method)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSimilarityThreshold"]], "setsummarysize() (extractivesummarization method)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.setSummarySize"]], "similaritythreshold (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.similarityThreshold"]], "sparknlp_jsl.annotator.embeddings.extractive_summarization": [[79, "module-sparknlp_jsl.annotator.embeddings.extractive_summarization"]], "summarysize (extractivesummarization attribute)": [[79, "sparknlp_jsl.annotator.embeddings.extractive_summarization.ExtractiveSummarization.summarySize"]], "sparknlp_jsl.annotator.embeddings": [[80, "module-sparknlp_jsl.annotator.embeddings"]], "featuresassembler (class in sparknlp_jsl.annotator.feature_assembler)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler"]], "inputannotatortypes (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputAnnotatorTypes"]], "inputcols (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.inputCols"]], "name (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.name"]], "outputannotatortype (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputAnnotatorType"]], "outputcol (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.outputCol"]], "setinputcols() (featuresassembler method)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setInputCols"]], "setoutputcol() (featuresassembler method)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setOutputCol"]], "setparams() (featuresassembler method)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.setParams"]], "skiplpinputcolsvalidation (featuresassembler attribute)": [[81, "sparknlp_jsl.annotator.feature_assembler.FeaturesAssembler.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.feature_assembler": [[81, "module-sparknlp_jsl.annotator.feature_assembler"]], "filteringparams (class in sparknlp_jsl.annotator.filtering_params)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams"]], "blacklist (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.blackList"]], "criteria (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.criteria"]], "entitiesconfidence (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.entitiesConfidence"]], "filtervalue (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.filterValue"]], "regex (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.regex"]], "setallowlist() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setAllowList"]], "setblacklist() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setBlackList"]], "setcriteria() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setCriteria"]], "setdenylist() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setDenyList"]], "setfiltervalue() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setFilterValue"]], "setregex() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setRegex"]], "setwhitelist() (filteringparams method)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.setWhiteList"]], "sparknlp_jsl.annotator.filtering_params": [[82, "module-sparknlp_jsl.annotator.filtering_params"]], "whitelist (filteringparams attribute)": [[82, "sparknlp_jsl.annotator.filtering_params.FilteringParams.whiteList"]], "genericclassifierapproach (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach"]], "genericclassifiermodel (class in sparknlp_jsl.annotator.generic_classifier.generic_classifier)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel"]], "batchsize (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.batchSize"]], "classes (genericclassifiermodel attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.classes"]], "dropout (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.dropout"]], "epochsn (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.epochsN"]], "featurescaling (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.featureScaling"]], "fiximbalance (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.fixImbalance"]], "inputannotatortypes (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.inputAnnotatorTypes"]], "inputannotatortypes (genericclassifiermodel attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.inputAnnotatorTypes"]], "labelcolumn (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.labelColumn"]], "learningrate (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.learningRate"]], "modelfile (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.modelFile"]], "multiclass (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.multiClass"]], "multiclass (genericclassifiermodel attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.multiClass"]], "name (genericclassifiermodel attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.name"]], "outputannotatortype (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputAnnotatorType"]], "outputannotatortype (genericclassifiermodel attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.outputAnnotatorType"]], "outputlogspath (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.outputLogsPath"]], "pretrained() (genericclassifiermodel static method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.pretrained"]], "setbatchsize() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setBatchSize"]], "setdropout() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setDropout"]], "setepochsnumber() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setEpochsNumber"]], "setfeaturescaling() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFeatureScaling"]], "setfiximbalance() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setFixImbalance"]], "setlabelcol() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLabelCol"]], "setlearningrate() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setLearningRate"]], "setmodelfile() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setModelFile"]], "setmulticlass() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setMultiClass"]], "setmulticlass() (genericclassifiermodel method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierModel.setMultiClass"]], "setoutputlogspath() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setOutputLogsPath"]], "setvalidationsplit() (genericclassifierapproach method)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.setValidationSplit"]], "sparknlp_jsl.annotator.generic_classifier.generic_classifier": [[83, "module-sparknlp_jsl.annotator.generic_classifier.generic_classifier"]], "validationsplit (genericclassifierapproach attribute)": [[83, "sparknlp_jsl.annotator.generic_classifier.generic_classifier.GenericClassifierApproach.validationSplit"]], "sparknlp_jsl.annotator.generic_classifier": [[84, "module-sparknlp_jsl.annotator.generic_classifier"]], "assertion (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.assertion"]], "chunker (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.chunker"]], "classification (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.classification"]], "context (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.context"]], "deid (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.deid"]], "disambiguation (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.disambiguation"]], "generic_classifier (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.generic_classifier"]], "keyword (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.keyword"]], "merge (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.merge"]], "ner (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.ner"]], "qa (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.qa"]], "re (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.re"]], "resolution (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.resolution"]], "seq2seq (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.seq2seq"]], "sparknlp_jsl.annotator": [[85, "module-sparknlp_jsl.annotator"]], "windowed (in module sparknlp_jsl.annotator)": [[85, "sparknlp_jsl.annotator.windowed"]], "chunkmergeapproach (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach"]], "chunkmergemodel (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel"]], "mergecommonparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams"]], "mergeprioritizationparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams"]], "mergeresourceparams (class in sparknlp_jsl.annotator.merge.chunk_merge)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams"]], "chunkprecedence (mergeprioritizationparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedence"]], "chunkprecedencevalueprioritization (mergeprioritizationparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.chunkPrecedenceValuePrioritization"]], "defaultconfidence (mergeprioritizationparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.defaultConfidence"]], "entitiesconfidenceresource (mergeresourceparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.entitiesConfidenceResource"]], "falsepositivesresource (mergeresourceparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.falsePositivesResource"]], "inputannotatortypes (chunkmergeapproach attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.inputAnnotatorTypes"]], "inputannotatortypes (chunkmergemodel attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.inputAnnotatorTypes"]], "mergeoverlapping (mergecommonparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.mergeOverlapping"]], "name (chunkmergeapproach attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.name"]], "name (chunkmergemodel attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.name"]], "orderingfeatures (mergeprioritizationparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.orderingFeatures"]], "outputannotatortype (chunkmergeapproach attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.outputAnnotatorType"]], "outputannotatortype (chunkmergemodel attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.outputAnnotatorType"]], "pretrained() (chunkmergemodel static method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.pretrained"]], "replacedictresource (mergeresourceparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.replaceDictResource"]], "selectionstrategy (mergeprioritizationparams attribute)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.selectionStrategy"]], "setchunkprecedence() (mergeprioritizationparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedence"]], "setchunkprecedencevalueprioritization() (mergeprioritizationparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setChunkPrecedenceValuePrioritization"]], "setdefaultconfidence() (mergeprioritizationparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setDefaultConfidence"]], "setentitiesconfidenceresource() (mergeresourceparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setEntitiesConfidenceResource"]], "setfalsepositivesresource() (mergeresourceparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setFalsePositivesResource"]], "setinputcols() (chunkmergeapproach method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeApproach.setInputCols"]], "setinputcols() (chunkmergemodel method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.ChunkMergeModel.setInputCols"]], "setmergeoverlapping() (mergecommonparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeCommonParams.setMergeOverlapping"]], "setorderingfeatures() (mergeprioritizationparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setOrderingFeatures"]], "setreplacedictresource() (mergeresourceparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergeResourceParams.setReplaceDictResource"]], "setselectionstrategy() (mergeprioritizationparams method)": [[86, "sparknlp_jsl.annotator.merge.chunk_merge.MergePrioritizationParams.setSelectionStrategy"]], "sparknlp_jsl.annotator.merge.chunk_merge": [[86, "module-sparknlp_jsl.annotator.merge.chunk_merge"]], "sparknlp_jsl.annotator.merge": [[87, "module-sparknlp_jsl.annotator.merge"]], "sparknlp_jsl.annotator.ner": [[88, "module-sparknlp_jsl.annotator.ner"]], "iobtagger (class in sparknlp_jsl.annotator.ner.iob_tagger)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger"]], "inputannotatortypes (iobtagger attribute)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.inputAnnotatorTypes"]], "name (iobtagger attribute)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.name"]], "outputannotatortype (iobtagger attribute)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.outputAnnotatorType"]], "scheme (iobtagger attribute)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.scheme"]], "setscheme() (iobtagger method)": [[89, "sparknlp_jsl.annotator.ner.iob_tagger.IOBTagger.setScheme"]], "sparknlp_jsl.annotator.ner.iob_tagger": [[89, "module-sparknlp_jsl.annotator.ner.iob_tagger"]], "medicalnerapproach (class in sparknlp_jsl.annotator.ner.medical_ner)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach"]], "medicalnermodel (class in sparknlp_jsl.annotator.ner.medical_ner)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel"]], "batchsize (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.batchSize"]], "classes (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.classes"]], "configprotobytes (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.configProtoBytes"]], "configprotobytes (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.configProtoBytes"]], "dropout (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.dropout"]], "earlystoppingcriterion (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingCriterion"]], "earlystoppingpatience (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.earlyStoppingPatience"]], "enablememoryoptimizer (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.enableMemoryOptimizer"]], "getclasses() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getClasses"]], "gettrainingclassdistribution() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.getTrainingClassDistribution"]], "graphfile (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFile"]], "graphfolder (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.graphFolder"]], "includeallconfidencescores (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeAllConfidenceScores"]], "includeallconfidencescores (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeAllConfidenceScores"]], "includeconfidence (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.includeConfidence"]], "includeconfidence (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.includeConfidence"]], "inferencebatchsize (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inferenceBatchSize"]], "inputannotatortypes (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.inputAnnotatorTypes"]], "inputannotatortypes (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.inputAnnotatorTypes"]], "labelcasing (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.labelCasing"]], "loadsavedmodel() (medicalnermodel static method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.loadSavedModel"]], "logprefix (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.logPrefix"]], "lr (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.lr"]], "name (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.name"]], "outputannotatortype (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.outputAnnotatorType"]], "outputannotatortype (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.outputAnnotatorType"]], "overrideexistingtags (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.overrideExistingTags"]], "po (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.po"]], "pretrained() (medicalnermodel static method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.pretrained"]], "pretrainedmodelpath (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.pretrainedModelPath"]], "randomvalidationsplitperepoch (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.randomValidationSplitPerEpoch"]], "sentencetokenindex (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.sentenceTokenIndex"]], "sentencetokenindex (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.sentenceTokenIndex"]], "setbatchsize() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setBatchSize"]], "setconfigprotobytes() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setConfigProtoBytes"]], "setconfigprotobytes() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setConfigProtoBytes"]], "setdropout() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setDropout"]], "setearlystoppingcriterion() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingCriterion"]], "setearlystoppingpatience() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEarlyStoppingPatience"]], "setenablememoryoptimizer() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setEnableMemoryOptimizer"]], "setgraphfile() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFile"]], "setgraphfolder() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setGraphFolder"]], "setincludeallconfidencescores() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeAllConfidenceScores"]], "setincludeconfidence() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setIncludeConfidence"]], "setincludeconfidence() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setIncludeConfidence"]], "setinferencebatchsize() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setInferenceBatchSize"]], "setlabelcasing() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setLabelCasing"]], "setlogprefix() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLogPrefix"]], "setlr() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setLr"]], "setoverrideexistingtags() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setOverrideExistingTags"]], "setpo() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPo"]], "setpretrainedmodelpath() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setPretrainedModelPath"]], "setrandomvalidationsplitperepoch() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setRandomValidationSplitPerEpoch"]], "setsentencetokenindex() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setSentenceTokenIndex"]], "setsentencetokenindex() (medicalnermodel method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.setSentenceTokenIndex"]], "settagsmapping() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setTagsMapping"]], "setusebestmodel() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseBestModel"]], "setusecontrib() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setUseContrib"]], "setvalidationsplit() (medicalnerapproach method)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.setValidationSplit"]], "sparknlp_jsl.annotator.ner.medical_ner": [[90, "module-sparknlp_jsl.annotator.ner.medical_ner"]], "trainingclassdistribution (medicalnermodel attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerModel.trainingClassDistribution"]], "usebestmodel (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useBestModel"]], "usecontrib (medicalnerapproach attribute)": [[90, "sparknlp_jsl.annotator.ner.medical_ner.MedicalNerApproach.useContrib"]], "nerchunker (class in sparknlp_jsl.annotator.ner.ner_chunker)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker"]], "inputannotatortypes (nerchunker attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.inputAnnotatorTypes"]], "name (nerchunker attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.name"]], "outputannotatortype (nerchunker attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.outputAnnotatorType"]], "regexparsers (nerchunker attribute)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.regexParsers"]], "setregexparsers() (nerchunker method)": [[91, "sparknlp_jsl.annotator.ner.ner_chunker.NerChunker.setRegexParsers"]], "sparknlp_jsl.annotator.ner.ner_chunker": [[91, "module-sparknlp_jsl.annotator.ner.ner_chunker"]], "commonnerconverterinternalparams (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams"]], "nerconverterinternal (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal"]], "nerconverterinternalmodel (class in sparknlp_jsl.annotator.ner.ner_converter_internal)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel"]], "greedymode (commonnerconverterinternalparams attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.greedyMode"]], "ignorestopwords (commonnerconverterinternalparams attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.ignoreStopWords"]], "inputannotatortypes (nerconverterinternal attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.inputAnnotatorTypes"]], "inputannotatortypes (nerconverterinternalmodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.inputAnnotatorTypes"]], "name (nerconverterinternal attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.name"]], "name (nerconverterinternalmodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.name"]], "outputannotatortype (nerconverterinternal attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.outputAnnotatorType"]], "outputannotatortype (nerconverterinternalmodel attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternalModel.outputAnnotatorType"]], "preserveposition (commonnerconverterinternalparams attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.preservePosition"]], "replacedictresource (nerconverterinternal attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceDictResource"]], "replacelabels (nerconverterinternal attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.replaceLabels"]], "setallowlist() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setAllowList"]], "setdenylist() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setDenyList"]], "setgreedymode() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setGreedyMode"]], "setignorestopwords() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setIgnoreStopWords"]], "setpreserveposition() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setPreservePosition"]], "setreplacedictresource() (nerconverterinternal method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceDictResource"]], "setreplacelabels() (nerconverterinternal method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.NerConverterInternal.setReplaceLabels"]], "setthreshold() (commonnerconverterinternalparams method)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.setThreshold"]], "sparknlp_jsl.annotator.ner.ner_converter_internal": [[92, "module-sparknlp_jsl.annotator.ner.ner_converter_internal"]], "threshold (commonnerconverterinternalparams attribute)": [[92, "sparknlp_jsl.annotator.ner.ner_converter_internal.CommonNerConverterInternalParams.threshold"]], "nertemplaterendermodel (class in sparknlp_jsl.annotator.ner.ner_template_render)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel"]], "combineentities (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.combineEntities"]], "entityscopes (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.entityScopes"]], "inputannotatortypes (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.inputAnnotatorTypes"]], "outputannotatortype (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.outputAnnotatorType"]], "permuteentities (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.permuteEntities"]], "pretrained() (nertemplaterendermodel static method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.pretrained"]], "randomseed (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.randomSeed"]], "resampleentities (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.resampleEntities"]], "setcombineentities() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setCombineEntities"]], "setentityscopes() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setEntityScopes"]], "setpermuteentities() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setPermuteEntities"]], "setrandomseed() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setRandomSeed"]], "setresampleentities() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setResampleEntities"]], "settemplates() (nertemplaterendermodel method)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.setTemplates"]], "sparknlp_jsl.annotator.ner.ner_template_render": [[93, "module-sparknlp_jsl.annotator.ner.ner_template_render"]], "templates (nertemplaterendermodel attribute)": [[93, "sparknlp_jsl.annotator.ner.ner_template_render.NerTemplateRenderModel.templates"]], "zeroshotnermodel (class in sparknlp_jsl.annotator.ner.zero_shot_ner)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel"]], "getclasses() (zeroshotnermodel method)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.getClasses"]], "ignoreentities (zeroshotnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.ignoreEntities"]], "inputannotatortypes (zeroshotnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.inputAnnotatorTypes"]], "load() (zeroshotnermodel static method)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.load"], [158, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"], [191, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.load"]], "name (zeroshotnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.name"], [158, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"], [191, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.name"]], "outputannotatortype (zeroshotnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.outputAnnotatorType"]], "predictionthreshold (zeroshotnermodel attribute)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.predictionThreshold"]], "pretrained() (zeroshotnermodel static method)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [158, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"], [191, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel.pretrained"]], "setentitydefinitions() (zeroshotnermodel method)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setEntityDefinitions"]], "setpredictionthreshold() (zeroshotnermodel method)": [[94, "sparknlp_jsl.annotator.ner.zero_shot_ner.ZeroShotNerModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.ner.zero_shot_ner": [[94, "module-sparknlp_jsl.annotator.ner.zero_shot_ner"]], "datenormalizer (class in sparknlp_jsl.annotator.normalizer.date_normalizer)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer"]], "anchordateday (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateDay"]], "anchordatemonth (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateMonth"]], "anchordateyear (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.anchorDateYear"]], "defaultreplacementday (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementDay"]], "defaultreplacementmonth (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementMonth"]], "defaultreplacementyear (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.defaultReplacementYear"]], "inputannotatortypes (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.inputAnnotatorTypes"]], "name (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.name"]], "outputannotatortype (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputAnnotatorType"]], "outputdateformat (datenormalizer attribute)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.outputDateFormat"]], "setanchordateday() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateDay"]], "setanchordatemonth() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateMonth"]], "setanchordateyear() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setAnchorDateYear"]], "setdefaultreplacementday() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementDay"]], "setdefaultreplacementmonth() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementMonth"]], "setdefaultreplacementyear() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setDefaultReplacementYear"]], "setoutputdateformat() (datenormalizer method)": [[95, "sparknlp_jsl.annotator.normalizer.date_normalizer.DateNormalizer.setOutputDateformat"]], "sparknlp_jsl.annotator.normalizer.date_normalizer": [[95, "module-sparknlp_jsl.annotator.normalizer.date_normalizer"]], "drugnormalizer (class in sparknlp_jsl.annotator.normalizer.drug_normalizer)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer"]], "inputannotatortypes (drugnormalizer attribute)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.inputAnnotatorTypes"]], "lowercase (drugnormalizer attribute)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.lowercase"]], "outputannotatortype (drugnormalizer attribute)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.outputAnnotatorType"]], "policy (drugnormalizer attribute)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.policy"]], "setlowercase() (drugnormalizer method)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setLowercase"]], "setpolicy() (drugnormalizer method)": [[96, "sparknlp_jsl.annotator.normalizer.drug_normalizer.DrugNormalizer.setPolicy"]], "sparknlp_jsl.annotator.normalizer.drug_normalizer": [[96, "module-sparknlp_jsl.annotator.normalizer.drug_normalizer"]], "sparknlp_jsl.annotator.normalizer": [[97, "module-sparknlp_jsl.annotator.normalizer"]], "beamsearchparams (class in sparknlp_jsl.annotator.qa.beam_search_params)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams"]], "dosample (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.doSample"]], "ignoretokenids (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.ignoreTokenIds"]], "maxcontextlength (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxContextLength"]], "maxnewtokens (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.maxNewTokens"]], "norepeatngramsize (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.noRepeatNgramSize"]], "setdosample() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setDoSample"]], "setignoretokenids() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setIgnoreTokenIds"]], "setmaxcontextlength() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxContextLength"]], "setmaxnewtokens() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setMaxNewTokens"]], "setnorepeatngramsize() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setNoRepeatNgramSize"]], "setrandomseed() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setRandomSeed"]], "settopk() (beamsearchparams method)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.setTopK"]], "sparknlp_jsl.annotator.qa.beam_search_params": [[98, "module-sparknlp_jsl.annotator.qa.beam_search_params"]], "topk (beamsearchparams attribute)": [[98, "sparknlp_jsl.annotator.qa.beam_search_params.BeamSearchParams.topK"]], "sparknlp_jsl.annotator.qa": [[99, "module-sparknlp_jsl.annotator.qa"]], "medicalquestionanswering (class in sparknlp_jsl.annotator.qa.medical_qa)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering"]], "configprotobytes (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.configProtoBytes"]], "customprompt (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.customPrompt"]], "getquestiontypes() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.getQuestionTypes"]], "inputannotatortypes (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.inputAnnotatorTypes"]], "loadmedicaltextgenerator() (medicalquestionanswering static method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadMedicalTextGenerator"]], "loadsavedmodel() (medicalquestionanswering static method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.loadSavedModel"]], "name (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.name"]], "outputannotatortype (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.outputAnnotatorType"]], "pretrained() (medicalquestionanswering static method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.pretrained"]], "questiontype (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.questionType"]], "setconfigprotobytes() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setConfigProtoBytes"]], "setcustomprompt() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setCustomPrompt"]], "setquestionanswerterminals() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionAnswerTerminals"]], "setquestionprompts() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionPrompts"]], "setquestionskiplasttoken() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionSkipLastToken"]], "setquestiontype() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setQuestionType"]], "setusecache() (medicalquestionanswering method)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.setUseCache"]], "sparknlp_jsl.annotator.qa.medical_qa": [[100, "module-sparknlp_jsl.annotator.qa.medical_qa"]], "usecache (medicalquestionanswering attribute)": [[100, "sparknlp_jsl.annotator.qa.medical_qa.MedicalQuestionAnswering.useCache"]], "nerquestiongenerator (class in sparknlp_jsl.annotator.qa.qa_ner_generator)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator"]], "entities1 (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities1"]], "entities2 (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.entities2"]], "inputannotatortypes (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.inputAnnotatorTypes"]], "name (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.name"]], "outputannotatortype (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.outputAnnotatorType"]], "questionmark (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionMark"]], "questionpronoun (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.questionPronoun"]], "setentities1() (nerquestiongenerator method)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities1"]], "setentities2() (nerquestiongenerator method)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setEntities2"]], "setquestionmark() (nerquestiongenerator method)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionMark"]], "setquestionpronoun() (nerquestiongenerator method)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setQuestionPronoun"]], "setstrategytype() (nerquestiongenerator method)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.setStrategyType"]], "sparknlp_jsl.annotator.qa.qa_ner_generator": [[101, "module-sparknlp_jsl.annotator.qa.qa_ner_generator"]], "strategytype (nerquestiongenerator attribute)": [[101, "sparknlp_jsl.annotator.qa.qa_ner_generator.NerQuestionGenerator.strategyType"]], "sparknlp_jsl.annotator.re": [[102, "module-sparknlp_jsl.annotator.re"]], "genericremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.GenericREModel"]], "posologyremodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.PosologyREModel"]], "relationextractionapproach (class in sparknlp_jsl.annotator.re.relation_extraction)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach"]], "relationextractionmodel (class in sparknlp_jsl.annotator.re.relation_extraction)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel"]], "classes (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.classes"]], "customlabels (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.customLabels"]], "customlabels (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.customLabels"]], "fromentitybegincol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityBeginCol"]], "fromentityendcol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityEndCol"]], "fromentitylabelcol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.fromEntityLabelCol"]], "getclasses() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getClasses"]], "getrelationtypeperpair() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.getRelationTypePerPair"]], "inputannotatortypes (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.inputAnnotatorTypes"]], "inputannotatortypes (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.inputAnnotatorTypes"]], "maxsyntacticdistance (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.maxSyntacticDistance"]], "maxsyntacticdistance (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.maxSyntacticDistance"]], "name (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.name"]], "name (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.name"]], "outputannotatortype (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.outputAnnotatorType"]], "outputannotatortype (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.outputAnnotatorType"]], "overrideexistinglabels (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.overrideExistingLabels"]], "predictionthreshold (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.predictionThreshold"]], "pretrained() (relationextractionmodel static method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.pretrained"]], "pretrainedmodelpath (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.pretrainedModelPath"]], "relationdirectioncol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.relationDirectionCol"]], "relationpairs (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairs"]], "relationpairscasesensitive (relationextractionmodel attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.relationPairsCaseSensitive"]], "setcustomlabels() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setCustomLabels"]], "setcustomlabels() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setCustomLabels"]], "setfromentity() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setFromEntity"]], "setmaxsyntacticdistance() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setMaxSyntacticDistance"]], "setmaxsyntacticdistance() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setMaxSyntacticDistance"]], "setpredictionthreshold() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setPredictionThreshold"]], "setpretrainedmodelpath() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setPretrainedModelPath"]], "setrelationdirectioncol() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setRelationDirectionCol"]], "setrelationpairs() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairs"]], "setrelationpairscasesensitive() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationPairsCaseSensitive"]], "setrelationtypeperpair() (relationextractionmodel method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionModel.setRelationTypePerPair"]], "settoentity() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setToEntity"]], "set\u043everrideexistinglabels() (relationextractionapproach method)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.setverrideExistingLabels"]], "sparknlp_jsl.annotator.re.relation_extraction": [[103, "module-sparknlp_jsl.annotator.re.relation_extraction"]], "toentitybegincol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityBeginCol"]], "toentityendcol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityEndCol"]], "toentitylabelcol (relationextractionapproach attribute)": [[103, "sparknlp_jsl.annotator.re.relation_extraction.RelationExtractionApproach.toEntityLabelCol"]], "relationextractiondlmodel (class in sparknlp_jsl.annotator.re.relation_extraction_dl)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel"]], "batchsize (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.batchSize"]], "classes (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.classes"]], "customlabels (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.customLabels"]], "getclasses() (relationextractiondlmodel method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.getClasses"]], "inputannotatortypes (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.inputAnnotatorTypes"]], "loadsavedmodel() (relationextractiondlmodel static method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [141, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"], [174, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.loadSavedModel"]], "name (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.name"], [141, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"], [174, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.name"]], "outputannotatortype (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.outputAnnotatorType"]], "predictionthreshold (relationextractiondlmodel attribute)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.predictionThreshold"]], "pretrained() (relationextractiondlmodel static method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [141, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"], [174, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel.pretrained"]], "setbatchsize() (relationextractiondlmodel method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setBatchSize"]], "setcasesensitive() (relationextractiondlmodel method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCaseSensitive"]], "setcustomlabels() (relationextractiondlmodel method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setCustomLabels"]], "setpredictionthreshold() (relationextractiondlmodel method)": [[104, "sparknlp_jsl.annotator.re.relation_extraction_dl.RelationExtractionDLModel.setPredictionThreshold"]], "sparknlp_jsl.annotator.re.relation_extraction_dl": [[104, "module-sparknlp_jsl.annotator.re.relation_extraction_dl"]], "renerchunksfilter (class in sparknlp_jsl.annotator.re.relation_ner_chunk_filter)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter"]], "doclevelrelations (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.docLevelRelations"]], "inputannotatortypes (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.inputAnnotatorTypes"]], "maxsyntacticdistance (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.maxSyntacticDistance"]], "name (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.name"]], "outputannotatortype (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.outputAnnotatorType"]], "relationpairs (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairs"]], "relationpairscasesensitive (renerchunksfilter attribute)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.relationPairsCaseSensitive"]], "setdoclevelrelations() (renerchunksfilter method)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setDocLevelRelations"]], "setmaxsyntacticdistance() (renerchunksfilter method)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setMaxSyntacticDistance"]], "setrelationpairs() (renerchunksfilter method)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairs"]], "setrelationpairscasesensitive() (renerchunksfilter method)": [[105, "sparknlp_jsl.annotator.re.relation_ner_chunk_filter.RENerChunksFilter.setRelationPairsCaseSensitive"]], "sparknlp_jsl.annotator.re.relation_ner_chunk_filter": [[105, "module-sparknlp_jsl.annotator.re.relation_ner_chunk_filter"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.annotator.re.zero_shot_relation_extraction)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "getclasses() (zeroshotrelationextractionmodel method)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.getClasses"]], "inputannotatortypes (zeroshotrelationextractionmodel attribute)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.inputAnnotatorTypes"]], "loadsavedmodel() (zeroshotrelationextractionmodel static method)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [142, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"], [175, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.loadSavedModel"]], "multilabel (zeroshotrelationextractionmodel attribute)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.multiLabel"]], "negativerelationships (zeroshotrelationextractionmodel attribute)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.negativeRelationships"]], "outputannotatortype (zeroshotrelationextractionmodel attribute)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.outputAnnotatorType"]], "predictionthreshold (zeroshotrelationextractionmodel attribute)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.predictionThreshold"]], "pretrained() (zeroshotrelationextractionmodel static method)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [142, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"], [175, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.pretrained"]], "setnegativerelationships() (zeroshotrelationextractionmodel method)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setNegativeRelationships"]], "setrelationalcategories() (zeroshotrelationextractionmodel method)": [[106, "sparknlp_jsl.annotator.re.zero_shot_relation_extraction.ZeroShotRelationExtractionModel.setRelationalCategories"]], "sparknlp_jsl.annotator.re.zero_shot_relation_extraction": [[106, "module-sparknlp_jsl.annotator.re.zero_shot_relation_extraction"]], "sparknlp_jsl.annotator.resolution": [[107, "module-sparknlp_jsl.annotator.resolution"]], "resolvermerger (class in sparknlp_jsl.annotator.resolution.resolver_merger)": [[108, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger"]], "inputannotatortypes (resolvermerger attribute)": [[108, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.inputAnnotatorTypes"]], "name (resolvermerger attribute)": [[108, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.name"]], "outputannotatortype (resolvermerger attribute)": [[108, "sparknlp_jsl.annotator.resolution.resolver_merger.ResolverMerger.outputAnnotatorType"]], "sparknlp_jsl.annotator.resolution.resolver_merger": [[108, "module-sparknlp_jsl.annotator.resolution.resolver_merger"]], "sentenceentityresolverapproach (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sentenceresolverparams (class in sparknlp_jsl.annotator.resolution.sentence_entity_resolver)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams"]], "aux_label_col (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.aux_label_col"]], "aux_label_col (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.aux_label_col"]], "confidencefunction (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.confidenceFunction"]], "distancefunction (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.distanceFunction"]], "dropcodeslist (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.dropCodesList"]], "inputannotatortypes (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.inputAnnotatorTypes"]], "inputannotatortypes (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.inputAnnotatorTypes"]], "inputannotatortypes (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.inputAnnotatorTypes"]], "labelcol (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.labelCol"]], "missasempty (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.missAsEmpty"]], "name (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"], [171, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.name"]], "neighbours (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.neighbours"]], "normalizedcol (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.normalizedCol"]], "outputannotatortype (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.outputAnnotatorType"]], "outputannotatortype (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.outputAnnotatorType"]], "overrideexistingcodes (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.overrideExistingCodes"]], "pretrained() (sentenceentityresolvermodel static method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [138, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"], [171, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel.pretrained"]], "pretrainedmodelpath (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.pretrainedModelPath"]], "returncosinedistances (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.returnCosineDistances"]], "returncosinedistances (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.returnCosineDistances"]], "searchtree (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.searchTree"]], "setauxlabelcol() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setAuxLabelCol"]], "setauxlabelcol() (sentenceentityresolvermodel method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setAuxLabelCol"]], "setconfidencefunction() (sentenceresolverparams method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setConfidenceFunction"]], "setdistancefunction() (sentenceresolverparams method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setDistanceFunction"]], "setdropcodeslist() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setDropCodesList"]], "setextractcosinedistances() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setExtractCosineDistances"]], "setlabelcol() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setLabelCol"]], "setmissasempty() (sentenceresolverparams method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setMissAsEmpty"]], "setneighbours() (sentenceresolverparams method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setNeighbours"]], "setnormalizedcol() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setNormalizedCol"]], "setoverrideexistingcodes() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setOverrideExistingCodes"]], "setpretrainedmodelpath() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setPretrainedModelPath"]], "setsearchtree() (sentenceentityresolvermodel method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setSearchTree"]], "setthreshold() (sentenceresolverparams method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.setThreshold"]], "setuseauxlabel() (sentenceentityresolverapproach method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.setUseAuxLabel"]], "setuseauxlabel() (sentenceentityresolvermodel method)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.setUseAuxLabel"]], "sparknlp_jsl.annotator.resolution.sentence_entity_resolver": [[109, "module-sparknlp_jsl.annotator.resolution.sentence_entity_resolver"]], "threshold (sentenceresolverparams attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceResolverParams.threshold"]], "useauxlabel (sentenceentityresolverapproach attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverApproach.useAuxLabel"]], "useauxlabel (sentenceentityresolvermodel attribute)": [[109, "sparknlp_jsl.annotator.resolution.sentence_entity_resolver.SentenceEntityResolverModel.useAuxLabel"]], "resolution2chunk (class in sparknlp_jsl.annotator.resolution2_chunk)": [[110, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk"]], "inputannotatortypes (resolution2chunk attribute)": [[110, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.inputAnnotatorTypes"]], "name (resolution2chunk attribute)": [[110, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.name"]], "outputannotatortype (resolution2chunk attribute)": [[110, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.outputAnnotatorType"]], "setparams() (resolution2chunk method)": [[110, "sparknlp_jsl.annotator.resolution2_chunk.Resolution2Chunk.setParams"]], "sparknlp_jsl.annotator.resolution2_chunk": [[110, "module-sparknlp_jsl.annotator.resolution2_chunk"]], "router (class in sparknlp_jsl.annotator.router)": [[111, "sparknlp_jsl.annotator.router.Router"]], "filterfieldselements (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.filterFieldsElements"]], "inputannotatortypes (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.inputAnnotatorTypes"]], "inputtype (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.inputType"]], "metadatafield (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.metadataField"]], "name (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.name"]], "outputannotatortype (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.outputAnnotatorType"]], "setfilterfieldselements() (router method)": [[111, "sparknlp_jsl.annotator.router.Router.setFilterFieldsElements"]], "setinputcols() (router method)": [[111, "sparknlp_jsl.annotator.router.Router.setInputCols"]], "setinputtype() (router method)": [[111, "sparknlp_jsl.annotator.router.Router.setInputType"]], "setmetadatafield() (router method)": [[111, "sparknlp_jsl.annotator.router.Router.setMetadataField"]], "skiplpinputcolsvalidation (router attribute)": [[111, "sparknlp_jsl.annotator.router.Router.skipLPInputColsValidation"]], "sparknlp_jsl.annotator.router": [[111, "module-sparknlp_jsl.annotator.router"]], "sparknlp_jsl.annotator.seq2seq": [[112, "module-sparknlp_jsl.annotator.seq2seq"]], "medicalencoderdecoder (class in sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder"]], "configprotobytes (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.configProtoBytes"]], "dosample (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.doSample"]], "ignoretokenids (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.ignoreTokenIds"]], "inputannotatortypes (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.inputAnnotatorTypes"]], "maxnewtokens (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxNewTokens"]], "maxtextlength (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.maxTextLength"]], "name (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.name"]], "norepeatngramsize (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.noRepeatNgramSize"]], "outputannotatortype (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.outputAnnotatorType"]], "randomseed (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.randomSeed"]], "refinechunksize (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineChunkSize"]], "refinemaxattempts (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineMaxAttempts"]], "refinesummary (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummary"]], "refinesummarytargetlength (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.refineSummaryTargetLength"]], "setconfigprotobytes() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setConfigProtoBytes"]], "setdosample() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setDoSample"]], "setignoretokenids() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setIgnoreTokenIds"]], "setmaxnewtokens() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxNewTokens"]], "setmaxtextlength() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setMaxTextLength"]], "setnorepeatngramsize() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setNoRepeatNgramSize"]], "setrandomseed() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRandomSeed"]], "setrefinechunksize() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineChunkSize"]], "setrefinemaxattempts() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineMaxAttempts"]], "setrefinesummary() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummary"]], "setrefinesummarytargetlength() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setRefineSummaryTargetLength"]], "setstopateos() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setStopAtEos"]], "settopk() (medicalencoderdecoder method)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.setTopK"]], "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder": [[113, "module-sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder"]], "stopateos (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.stopAtEos"]], "task (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.task"]], "topk (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.topK"]], "usecache (medicalencoderdecoder attribute)": [[113, "sparknlp_jsl.annotator.seq2seq.medical_encoder_decoder.MedicalEncoderDecoder.useCache"]], "medicalsummarizer (class in sparknlp_jsl.annotator.seq2seq.medical_summarizer)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer"]], "loadsavedmodel() (medicalsummarizer static method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.loadSavedModel"]], "name (medicalsummarizer attribute)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.name"]], "pretrained() (medicalsummarizer static method)": [[114, "sparknlp_jsl.annotator.seq2seq.medical_summarizer.MedicalSummarizer.pretrained"]], "sparknlp_jsl.annotator.seq2seq.medical_summarizer": [[114, "module-sparknlp_jsl.annotator.seq2seq.medical_summarizer"]], "medicaltextgenerator (class in sparknlp_jsl.annotator.seq2seq.medical_text_generator)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator"]], "configprotobytes (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.configProtoBytes"]], "customprompt (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.customPrompt"]], "inputannotatortypes (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.inputAnnotatorTypes"]], "loadsavedmodel() (medicaltextgenerator static method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.loadSavedModel"]], "maxtextlength (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.maxTextLength"]], "modeltype (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.modelType"]], "name (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.name"]], "outputannotatortype (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.outputAnnotatorType"]], "pretrained() (medicaltextgenerator static method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.pretrained"]], "setconfigprotobytes() (medicaltextgenerator method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setConfigProtoBytes"]], "setcustomprompt() (medicaltextgenerator method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setCustomPrompt"]], "setmaxtextlength() (medicaltextgenerator method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setMaxTextLength"]], "setstopateos() (medicaltextgenerator method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setStopAtEos"]], "setusecache() (medicaltextgenerator method)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.setUseCache"]], "sparknlp_jsl.annotator.seq2seq.medical_text_generator": [[115, "module-sparknlp_jsl.annotator.seq2seq.medical_text_generator"]], "stopateos (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.stopAtEos"]], "usecache (medicaltextgenerator attribute)": [[115, "sparknlp_jsl.annotator.seq2seq.medical_text_generator.MedicalTextGenerator.useCache"]], "sourcetrackingmetadataparams (class in sparknlp_jsl.annotator.source_tracking_metadata_params)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams"]], "allpossiblefieldstostandardize (sourcetrackingmetadataparams attribute)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.allPossibleFieldsToStandardize"]], "includeoutputcolumn (sourcetrackingmetadataparams attribute)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeOutputColumn"]], "includestandardfield (sourcetrackingmetadataparams attribute)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.includeStandardField"]], "outputcolumnkey (sourcetrackingmetadataparams attribute)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.outputColumnKey"]], "setallpossiblefieldstostandardize() (sourcetrackingmetadataparams method)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setAllPossibleFieldsToStandardize"]], "setincludeoutputcolumn() (sourcetrackingmetadataparams method)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeOutputColumn"]], "setincludestandardfield() (sourcetrackingmetadataparams method)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setIncludeStandardField"]], "setoutputcolumnkey() (sourcetrackingmetadataparams method)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setOutputColumnKey"]], "setstandardfieldkey() (sourcetrackingmetadataparams method)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.setStandardFieldKey"]], "sparknlp_jsl.annotator.source_tracking_metadata_params": [[116, "module-sparknlp_jsl.annotator.source_tracking_metadata_params"]], "standardfieldkey (sourcetrackingmetadataparams attribute)": [[116, "sparknlp_jsl.annotator.source_tracking_metadata_params.SourceTrackingMetadataParams.standardFieldKey"]], "tfgraphbuilder (class in sparknlp_jsl.annotator.tf_graph_builder)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder"]], "tfgraphbuildermodel (class in sparknlp_jsl.annotator.tf_graph_builder)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilderModel"]], "batchnorm (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.batchNorm"]], "getbatchnorm() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getBatchNorm"]], "getgraphfile() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFile"]], "getgraphfolder() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getGraphFolder"]], "gethiddenact() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenAct"]], "gethiddenactl2() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenActL2"]], "gethiddenlayers() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenLayers"]], "gethiddenunitsnumber() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenUnitsNumber"]], "gethiddenweightsl2() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getHiddenWeightsL2"]], "getinputcols() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getInputCols"]], "getislicensed() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getIsLicensed"]], "getlabelcolumn() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getLabelColumn"]], "getmaxsequencelength() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getMaxSequenceLength"]], "getmodelname() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getModelName"]], "getoutputact() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getOutputAct"]], "getuserelationdirection() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.getUseRelationDirection"]], "graphfile (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFile"]], "graphfolder (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.graphFolder"]], "hiddenact (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenAct"]], "hiddenactl2 (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenActL2"]], "hiddenlayers (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenLayers"]], "hiddenunitsnumber (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenUnitsNumber"]], "hiddenweightsl2 (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.hiddenWeightsL2"]], "inputcols (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.inputCols"]], "islicensed (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.isLicensed"]], "labelcolumn (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.labelColumn"]], "maxsequencelength (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.maxSequenceLength"]], "modelname (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.modelName"]], "outputact (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.outputAct"]], "setbatchnorm() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setBatchNorm"]], "setgraphfile() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFile"]], "setgraphfolder() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setGraphFolder"]], "sethiddenact() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenAct"]], "sethiddenactl2() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenActL2"]], "sethiddenlayers() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenLayers"]], "sethiddenunitsnumber() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenUnitsNumber"]], "sethiddenweightsl2() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setHiddenWeightsL2"]], "setinputcols() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setInputCols"]], "setislicensed() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setIsLicensed"]], "setlabelcolumn() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setLabelColumn"]], "setmaxsequencelength() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setMaxSequenceLength"]], "setmodelname() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setModelName"]], "setuserelationdirection() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.setUseRelationDirection"]], "settoutputact() (tfgraphbuilder method)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.settOutputAct"]], "sparknlp_jsl.annotator.tf_graph_builder": [[117, "module-sparknlp_jsl.annotator.tf_graph_builder"]], "userelationdirection (tfgraphbuilder attribute)": [[117, "sparknlp_jsl.annotator.tf_graph_builder.TFGraphBuilder.useRelationDirection"]], "sparknlp_jsl.annotator.windowed": [[118, "module-sparknlp_jsl.annotator.windowed"]], "windowedparams (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams"]], "windowedsentencemodel (class in sparknlp_jsl.annotator.windowed.windowed_sentence)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel"]], "gluestring (windowedparams attribute)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.glueString"]], "inputannotatortypes (windowedsentencemodel attribute)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.inputAnnotatorTypes"]], "outputannotatortype (windowedsentencemodel attribute)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedSentenceModel.outputAnnotatorType"]], "setgluestring() (windowedparams method)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setGlueString"]], "setwindowsize() (windowedparams method)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.setWindowSize"]], "sparknlp_jsl.annotator.windowed.windowed_sentence": [[119, "module-sparknlp_jsl.annotator.windowed.windowed_sentence"]], "windowsize (windowedparams attribute)": [[119, "sparknlp_jsl.annotator.windowed.windowed_sentence.WindowedParams.windowSize"]], "sparknlp_jsl.base": [[120, "module-sparknlp_jsl.base"]], "annotatorapproachinternal (class in sparknlp_jsl.common.annotator_approach_internal)": [[121, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal"]], "inputannotatortypes (annotatorapproachinternal attribute)": [[121, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatorapproachinternal attribute)": [[121, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.outputAnnotatorType"]], "skiplpinputcolsvalidation (annotatorapproachinternal attribute)": [[121, "sparknlp_jsl.common.annotator_approach_internal.AnnotatorApproachInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_approach_internal": [[121, "module-sparknlp_jsl.common.annotator_approach_internal"]], "annotatormodelinternal (class in sparknlp_jsl.common.annotator_model_internal)": [[122, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal"]], "inputannotatortypes (annotatormodelinternal attribute)": [[122, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.inputAnnotatorTypes"]], "outputannotatortype (annotatormodelinternal attribute)": [[122, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.outputAnnotatorType"]], "setparams() (annotatormodelinternal method)": [[122, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.setParams"]], "skiplpinputcolsvalidation (annotatormodelinternal attribute)": [[122, "sparknlp_jsl.common.annotator_model_internal.AnnotatorModelInternal.skipLPInputColsValidation"]], "sparknlp_jsl.common.annotator_model_internal": [[122, "module-sparknlp_jsl.common.annotator_model_internal"]], "annotatorpropertiesinternal (class in sparknlp_jsl.common.annotator_properties_internal)": [[123, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal"]], "inputcolsvalidation() (annotatorpropertiesinternal method)": [[123, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.inputColsValidation"]], "setforceinputtypevalidation() (annotatorpropertiesinternal method)": [[123, "sparknlp_jsl.common.annotator_properties_internal.AnnotatorPropertiesInternal.setForceInputTypeValidation"]], "sparknlp_jsl.common.annotator_properties_internal": [[123, "module-sparknlp_jsl.common.annotator_properties_internal"]], "sparknlp_jsl.common": [[124, "module-sparknlp_jsl.common"]], "compatibility (class in sparknlp_jsl.compatibility)": [[125, "sparknlp_jsl.compatibility.Compatibility"]], "findversion() (compatibility method)": [[125, "sparknlp_jsl.compatibility.Compatibility.findVersion"]], "showversion() (compatibility method)": [[125, "sparknlp_jsl.compatibility.Compatibility.showVersion"]], "sparknlp_jsl.compatibility": [[125, "module-sparknlp_jsl.compatibility"]], "customtransformer (class in sparknlp_jsl.custom_transformer)": [[126, "sparknlp_jsl.custom_transformer.CustomTransformer"]], "f (customtransformer attribute)": [[126, "sparknlp_jsl.custom_transformer.CustomTransformer.f"]], "setinputcol() (customtransformer method)": [[126, "sparknlp_jsl.custom_transformer.CustomTransformer.setInputCol"]], "setoutputcol() (customtransformer method)": [[126, "sparknlp_jsl.custom_transformer.CustomTransformer.setOutputCol"]], "sparknlp_jsl.custom_transformer": [[126, "module-sparknlp_jsl.custom_transformer"]], "deidentifier (class in sparknlp_jsl.deidentification_module)": [[127, "sparknlp_jsl.deidentification_module.Deidentifier"]], "deid_with_custom_pipeline() (deidentifier method)": [[127, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_custom_pipeline"]], "deid_with_pretrained_pipeline() (deidentifier method)": [[127, "sparknlp_jsl.deidentification_module.Deidentifier.deid_with_pretrained_pipeline"]], "deidentify() (deidentifier method)": [[127, "sparknlp_jsl.deidentification_module.Deidentifier.deidentify"]], "sparknlp_jsl.deidentification_module": [[127, "module-sparknlp_jsl.deidentification_module"]], "nercrfevaluation (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.NerCrfEvaluation"]], "nerdlevaluation (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.NerDLEvaluation"]], "nerdlmetrics (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.NerDLMetrics"]], "norvigspellevaluation (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.NorvigSpellEvaluation"]], "posevaluation (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.POSEvaluation"]], "symspellevaluation (class in sparknlp_jsl.eval)": [[128, "sparknlp_jsl.eval.SymSpellEvaluation"]], "computeaccuracyannotator() (nercrfevaluation method)": [[128, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (nerdlevaluation method)": [[128, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (norvigspellevaluation method)": [[128, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (posevaluation method)": [[128, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyAnnotator"]], "computeaccuracyannotator() (symspellevaluation method)": [[128, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyAnnotator"]], "computeaccuracymodel() (nercrfevaluation method)": [[128, "sparknlp_jsl.eval.NerCrfEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (nerdlevaluation method)": [[128, "sparknlp_jsl.eval.NerDLEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (norvigspellevaluation method)": [[128, "sparknlp_jsl.eval.NorvigSpellEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (posevaluation method)": [[128, "sparknlp_jsl.eval.POSEvaluation.computeAccuracyModel"]], "computeaccuracymodel() (symspellevaluation method)": [[128, "sparknlp_jsl.eval.SymSpellEvaluation.computeAccuracyModel"]], "computemetricsfromdf() (nerdlmetrics method)": [[128, "sparknlp_jsl.eval.NerDLMetrics.computeMetricsFromDF"]], "sparknlp_jsl.eval": [[128, "module-sparknlp_jsl.eval"]], "assertiondlapproach (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[129, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.finance.chunk_classification.assertion.assertiondl)": [[129, "sparknlp_jsl.finance.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.finance.chunk_classification.assertion.assertiondl": [[129, "module-sparknlp_jsl.finance.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.finance.chunk_classification.assertion": [[130, "module-sparknlp_jsl.finance.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[131, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.finance.chunk_classification.deid.deidentification)": [[131, "sparknlp_jsl.finance.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.finance.chunk_classification.deid.deidentification": [[131, "module-sparknlp_jsl.finance.chunk_classification.deid.deIdentification"]], "financedocumenthashcoder (class in sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder)": [[132, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder"]], "setidcolumn() (financedocumenthashcoder method)": [[132, "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder.FinanceDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder": [[132, "module-sparknlp_jsl.finance.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.finance.chunk_classification.deid": [[133, "module-sparknlp_jsl.finance.chunk_classification.deid"]], "sparknlp_jsl.finance.chunk_classification": [[134, "module-sparknlp_jsl.finance.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[135, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper)": [[135, "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper": [[135, "module-sparknlp_jsl.finance.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.docmapper)": [[136, "sparknlp_jsl.finance.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.docmapper": [[136, "module-sparknlp_jsl.finance.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.finance.chunk_classification.resolution": [[137, "module-sparknlp_jsl.finance.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[138, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver)": [[138, "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver": [[138, "module-sparknlp_jsl.finance.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.finance.graph": [[139, "module-sparknlp_jsl.finance.graph"]], "sparknlp_jsl.finance.graph.relation_extraction": [[140, "module-sparknlp_jsl.finance.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl)": [[141, "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl": [[141, "module-sparknlp_jsl.finance.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction)": [[142, "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction": [[142, "module-sparknlp_jsl.finance.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.finance": [[143, "module-sparknlp_jsl.finance"]], "financebertforsequenceclassification (class in sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification"]], "loadsavedmodel() (financebertforsequenceclassification static method)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertforsequenceclassification static method)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.loadSavedModelOpenSource"]], "name (financebertforsequenceclassification attribute)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.name"]], "pretrained() (financebertforsequenceclassification static method)": [[144, "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification.FinanceBertForSequenceClassification.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification": [[144, "module-sparknlp_jsl.finance.sequence_classification.finance_bert_for_sequence_classification"]], "financeclassifierdlapproach (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLApproach"]], "financeclassifierdlmodel (class in sparknlp_jsl.finance.sequence_classification.finance_classifier_dl)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel"]], "name (financeclassifierdlmodel attribute)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.name"]], "pretrained() (financeclassifierdlmodel static method)": [[145, "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl.FinanceClassifierDLModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_classifier_dl": [[145, "module-sparknlp_jsl.finance.sequence_classification.finance_classifier_dl"]], "financedocumentmlclassifierapproach (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[146, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierApproach"]], "financedocumentmlclassifiermodel (class in sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier)": [[146, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel"]], "name (financedocumentmlclassifiermodel attribute)": [[146, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.name"]], "pretrained() (financedocumentmlclassifiermodel static method)": [[146, "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier.FinanceDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier": [[146, "module-sparknlp_jsl.finance.sequence_classification.finance_document_ml_classifier"]], "sparknlp_jsl.finance.sequence_classification": [[147, "module-sparknlp_jsl.finance.sequence_classification"]], "financeencoderdecoder (class in sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder"]], "name (financeencoderdecoder attribute)": [[148, "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder.FinanceEncoderDecoder.name"]], "sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder": [[148, "module-sparknlp_jsl.finance.sequence_generation.finance_encoder_decoder"]], "financequestionanswering (class in sparknlp_jsl.finance.sequence_generation.finance_qa)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering"]], "loadsavedmodel() (financequestionanswering static method)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.loadSavedModel"]], "name (financequestionanswering attribute)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.name"]], "pretrained() (financequestionanswering static method)": [[149, "sparknlp_jsl.finance.sequence_generation.finance_qa.FinanceQuestionAnswering.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_qa": [[149, "module-sparknlp_jsl.finance.sequence_generation.finance_qa"]], "financesummarizer (class in sparknlp_jsl.finance.sequence_generation.finance_summarizer)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer"]], "loadsavedmodel() (financesummarizer static method)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.loadSavedModel"]], "name (financesummarizer attribute)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.name"]], "pretrained() (financesummarizer static method)": [[150, "sparknlp_jsl.finance.sequence_generation.finance_summarizer.FinanceSummarizer.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_summarizer": [[150, "module-sparknlp_jsl.finance.sequence_generation.finance_summarizer"]], "financetextgenerator (class in sparknlp_jsl.finance.sequence_generation.finance_text_generator)": [[151, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator"]], "loadsavedmodel() (financetextgenerator static method)": [[151, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.loadSavedModel"]], "name (financetextgenerator attribute)": [[151, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.name"]], "pretrained() (financetextgenerator static method)": [[151, "sparknlp_jsl.finance.sequence_generation.finance_text_generator.FinanceTextGenerator.pretrained"]], "sparknlp_jsl.finance.sequence_generation.finance_text_generator": [[151, "module-sparknlp_jsl.finance.sequence_generation.finance_text_generator"]], "sparknlp_jsl.finance.sequence_generation": [[152, "module-sparknlp_jsl.finance.sequence_generation"]], "financenerquestiongenerator (class in sparknlp_jsl.finance.sequence_generation.qa_ner_generator)": [[153, "sparknlp_jsl.finance.sequence_generation.qa_ner_generator.FinanceNerQuestionGenerator"]], "sparknlp_jsl.finance.sequence_generation.qa_ner_generator": [[153, "module-sparknlp_jsl.finance.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.finance.token_classification": [[154, "module-sparknlp_jsl.finance.token_classification"]], "financebertfortokenclassification (class in sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification"]], "loadsavedmodel() (financebertfortokenclassification static method)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (financebertfortokenclassification static method)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.loadSavedModelOpenSource"]], "name (financebertfortokenclassification attribute)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.name"]], "pretrained() (financebertfortokenclassification static method)": [[155, "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier.FinanceBertForTokenClassification.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier": [[155, "module-sparknlp_jsl.finance.token_classification.ner.finance_bert_for_token_classifier"]], "financenerapproach (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[156, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerApproach"]], "financenermodel (class in sparknlp_jsl.finance.token_classification.ner.finance_ner)": [[156, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel"]], "loadsavedmodel() (financenermodel static method)": [[156, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.loadSavedModel"]], "name (financenermodel attribute)": [[156, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.name"]], "pretrained() (financenermodel static method)": [[156, "sparknlp_jsl.finance.token_classification.ner.finance_ner.FinanceNerModel.pretrained"]], "sparknlp_jsl.finance.token_classification.ner.finance_ner": [[156, "module-sparknlp_jsl.finance.token_classification.ner.finance_ner"]], "sparknlp_jsl.finance.token_classification.ner": [[157, "module-sparknlp_jsl.finance.token_classification.ner"]], "zeroshotnermodel (class in sparknlp_jsl.finance.token_classification.ner.zero_shot_ner)": [[158, "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.finance.token_classification.ner.zero_shot_ner": [[158, "module-sparknlp_jsl.finance.token_classification.ner.zero_shot_ner"]], "profile() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profile"]], "profileesrdv21y19() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileESRDV21Y19"]], "profilev22() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22"]], "profilev22y17() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y17"]], "profilev22y18() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y18"]], "profilev22y19() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y19"]], "profilev22y20() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y20"]], "profilev22y21() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y21"]], "profilev22y22() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV22Y22"]], "profilev23() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV23"]], "profilev23y18() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV23Y18"]], "profilev23y19() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV23Y19"]], "profilev24() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24"]], "profilev24y17() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y17"]], "profilev24y18() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y18"]], "profilev24y19() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y19"]], "profilev24y20() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y20"]], "profilev24y21() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y21"]], "profilev24y22() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV24Y22"]], "profilev28() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV28"]], "profilev28y24() (in module sparknlp_jsl.functions)": [[159, "sparknlp_jsl.functions.profileV28Y24"]], "sparknlp_jsl.functions": [[159, "module-sparknlp_jsl.functions"]], "annotators (in module sparknlp_jsl)": [[160, "sparknlp_jsl.annotators"]], "get_credentials() (in module sparknlp_jsl)": [[160, "sparknlp_jsl.get_credentials"]], "library_settings() (in module sparknlp_jsl)": [[160, "sparknlp_jsl.library_settings"]], "pub_version() (in module sparknlp_jsl)": [[160, "sparknlp_jsl.pub_version"]], "size_regex (in module sparknlp_jsl)": [[160, "sparknlp_jsl.size_regex"]], "sparknlp_jsl": [[160, "module-sparknlp_jsl"]], "start() (in module sparknlp_jsl)": [[160, "sparknlp_jsl.start"]], "transformer_seq_classification (in module sparknlp_jsl)": [[160, "sparknlp_jsl.transformer_seq_classification"]], "version() (in module sparknlp_jsl)": [[160, "sparknlp_jsl.version"]], "version_regex (in module sparknlp_jsl)": [[160, "sparknlp_jsl.version_regex"]], "customlabels() (in module sparknlp_jsl.internal)": [[161, "sparknlp_jsl.internal.CustomLabels"]], "entityweights() (in module sparknlp_jsl.internal)": [[161, "sparknlp_jsl.internal.EntityWeights"]], "relationalcategories() (in module sparknlp_jsl.internal)": [[161, "sparknlp_jsl.internal.RelationalCategories"]], "targetentities() (in module sparknlp_jsl.internal)": [[161, "sparknlp_jsl.internal.TargetEntities"]], "sparknlp_jsl.internal": [[161, "module-sparknlp_jsl.internal"]], "assertiondlapproach (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[162, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLApproach"]], "assertiondlmodel (class in sparknlp_jsl.legal.chunk_classification.assertion.assertiondl)": [[162, "sparknlp_jsl.legal.chunk_classification.assertion.assertionDL.AssertionDLModel"]], "sparknlp_jsl.legal.chunk_classification.assertion.assertiondl": [[162, "module-sparknlp_jsl.legal.chunk_classification.assertion.assertionDL"]], "sparknlp_jsl.legal.chunk_classification.assertion": [[163, "module-sparknlp_jsl.legal.chunk_classification.assertion"]], "deidentification (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[164, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentification"]], "deidentificationmodel (class in sparknlp_jsl.legal.chunk_classification.deid.deidentification)": [[164, "sparknlp_jsl.legal.chunk_classification.deid.deIdentification.DeIdentificationModel"]], "sparknlp_jsl.legal.chunk_classification.deid.deidentification": [[164, "module-sparknlp_jsl.legal.chunk_classification.deid.deIdentification"]], "legaldocumenthashcoder (class in sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder)": [[165, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder"]], "setidcolumn() (legaldocumenthashcoder method)": [[165, "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder.LegalDocumentHashCoder.setIdColumn"]], "sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder": [[165, "module-sparknlp_jsl.legal.chunk_classification.deid.document_hashcoder"]], "sparknlp_jsl.legal.chunk_classification.deid": [[166, "module-sparknlp_jsl.legal.chunk_classification.deid"]], "sparknlp_jsl.legal.chunk_classification": [[167, "module-sparknlp_jsl.legal.chunk_classification"]], "chunkmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[168, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperApproach"]], "chunkmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper)": [[168, "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper.ChunkMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper": [[168, "module-sparknlp_jsl.legal.chunk_classification.resolution.chunkmapper"]], "docmapperapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperApproach"]], "docmappermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.docmapper)": [[169, "sparknlp_jsl.legal.chunk_classification.resolution.docmapper.DocMapperModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.docmapper": [[169, "module-sparknlp_jsl.legal.chunk_classification.resolution.docmapper"]], "sparknlp_jsl.legal.chunk_classification.resolution": [[170, "module-sparknlp_jsl.legal.chunk_classification.resolution"]], "sentenceentityresolverapproach (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[171, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverApproach"]], "sentenceentityresolvermodel (class in sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver)": [[171, "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver.SentenceEntityResolverModel"]], "sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver": [[171, "module-sparknlp_jsl.legal.chunk_classification.resolution.sentence_entity_resolver"]], "sparknlp_jsl.legal.graph": [[172, "module-sparknlp_jsl.legal.graph"]], "sparknlp_jsl.legal.graph.relation_extraction": [[173, "module-sparknlp_jsl.legal.graph.relation_extraction"]], "relationextractiondlmodel (class in sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl)": [[174, "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl.RelationExtractionDLModel"]], "sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl": [[174, "module-sparknlp_jsl.legal.graph.relation_extraction.relation_extraction_dl"]], "zeroshotrelationextractionmodel (class in sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction)": [[175, "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction.ZeroShotRelationExtractionModel"]], "sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction": [[175, "module-sparknlp_jsl.legal.graph.relation_extraction.zero_shot_relation_extraction"]], "sparknlp_jsl.legal": [[176, "module-sparknlp_jsl.legal"]], "sparknlp_jsl.legal.sequence_classification": [[177, "module-sparknlp_jsl.legal.sequence_classification"]], "legalbertforsequenceclassification (class in sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification"]], "loadsavedmodel() (legalbertforsequenceclassification static method)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertforsequenceclassification static method)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.loadSavedModelOpenSource"]], "name (legalbertforsequenceclassification attribute)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.name"]], "pretrained() (legalbertforsequenceclassification static method)": [[178, "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification.LegalBertForSequenceClassification.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification": [[178, "module-sparknlp_jsl.legal.sequence_classification.legal_bert_for_sequence_classification"]], "legalclassifierdlapproach (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLApproach"]], "legalclassifierdlmodel (class in sparknlp_jsl.legal.sequence_classification.legal_classifier_dl)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel"]], "name (legalclassifierdlmodel attribute)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.name"]], "pretrained() (legalclassifierdlmodel static method)": [[179, "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl.LegalClassifierDLModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_classifier_dl": [[179, "module-sparknlp_jsl.legal.sequence_classification.legal_classifier_dl"]], "legaldocumentmlclassifierapproach (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[180, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierApproach"]], "legaldocumentmlclassifiermodel (class in sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier)": [[180, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel"]], "name (legaldocumentmlclassifiermodel attribute)": [[180, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.name"]], "pretrained() (legaldocumentmlclassifiermodel static method)": [[180, "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier.LegalDocumentMLClassifierModel.pretrained"]], "sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier": [[180, "module-sparknlp_jsl.legal.sequence_classification.legal_document_ml_classifier"]], "sparknlp_jsl.legal.sequence_generation": [[181, "module-sparknlp_jsl.legal.sequence_generation"]], "legalencoderdecoder (class in sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder"]], "name (legalencoderdecoder attribute)": [[182, "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder.LegalEncoderDecoder.name"]], "sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder": [[182, "module-sparknlp_jsl.legal.sequence_generation.legal_encoder_decoder"]], "legalquestionanswering (class in sparknlp_jsl.legal.sequence_generation.legal_qa)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering"]], "loadsavedmodel() (legalquestionanswering static method)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.loadSavedModel"]], "name (legalquestionanswering attribute)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.name"]], "pretrained() (legalquestionanswering static method)": [[183, "sparknlp_jsl.legal.sequence_generation.legal_qa.LegalQuestionAnswering.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_qa": [[183, "module-sparknlp_jsl.legal.sequence_generation.legal_qa"]], "legalsummarizer (class in sparknlp_jsl.legal.sequence_generation.legal_summarizer)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer"]], "loadsavedmodel() (legalsummarizer static method)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.loadSavedModel"]], "name (legalsummarizer attribute)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.name"]], "pretrained() (legalsummarizer static method)": [[184, "sparknlp_jsl.legal.sequence_generation.legal_summarizer.LegalSummarizer.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_summarizer": [[184, "module-sparknlp_jsl.legal.sequence_generation.legal_summarizer"]], "legaltextgenerator (class in sparknlp_jsl.legal.sequence_generation.legal_text_generator)": [[185, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator"]], "loadsavedmodel() (legaltextgenerator static method)": [[185, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.loadSavedModel"]], "name (legaltextgenerator attribute)": [[185, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.name"]], "pretrained() (legaltextgenerator static method)": [[185, "sparknlp_jsl.legal.sequence_generation.legal_text_generator.LegalTextGenerator.pretrained"]], "sparknlp_jsl.legal.sequence_generation.legal_text_generator": [[185, "module-sparknlp_jsl.legal.sequence_generation.legal_text_generator"]], "legalnerquestiongenerator (class in sparknlp_jsl.legal.sequence_generation.qa_ner_generator)": [[186, "sparknlp_jsl.legal.sequence_generation.qa_ner_generator.LegalNerQuestionGenerator"]], "sparknlp_jsl.legal.sequence_generation.qa_ner_generator": [[186, "module-sparknlp_jsl.legal.sequence_generation.qa_ner_generator"]], "sparknlp_jsl.legal.token_classification": [[187, "module-sparknlp_jsl.legal.token_classification"]], "sparknlp_jsl.legal.token_classification.ner": [[188, "module-sparknlp_jsl.legal.token_classification.ner"]], "legalbertfortokenclassification (class in sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification"]], "loadsavedmodel() (legalbertfortokenclassification static method)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModel"]], "loadsavedmodelopensource() (legalbertfortokenclassification static method)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.loadSavedModelOpenSource"]], "name (legalbertfortokenclassification attribute)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.name"]], "pretrained() (legalbertfortokenclassification static method)": [[189, "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier.LegalBertForTokenClassification.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier": [[189, "module-sparknlp_jsl.legal.token_classification.ner.legal_bert_for_token_classifier"]], "legalnerapproach (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[190, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerApproach"]], "legalnermodel (class in sparknlp_jsl.legal.token_classification.ner.legal_ner)": [[190, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel"]], "loadsavedmodel() (legalnermodel static method)": [[190, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.loadSavedModel"]], "name (legalnermodel attribute)": [[190, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.name"]], "pretrained() (legalnermodel static method)": [[190, "sparknlp_jsl.legal.token_classification.ner.legal_ner.LegalNerModel.pretrained"]], "sparknlp_jsl.legal.token_classification.ner.legal_ner": [[190, "module-sparknlp_jsl.legal.token_classification.ner.legal_ner"]], "zeroshotnermodel (class in sparknlp_jsl.legal.token_classification.ner.zero_shot_ner)": [[191, "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner.ZeroShotNerModel"]], "sparknlp_jsl.legal.token_classification.ner.zero_shot_ner": [[191, "module-sparknlp_jsl.legal.token_classification.ner.zero_shot_ner"]], "modeltracer (class in sparknlp_jsl.modeltracer)": [[192, "sparknlp_jsl.modelTracer.ModelTracer"]], "adduidcols() (modeltracer method)": [[192, "sparknlp_jsl.modelTracer.ModelTracer.addUidCols"]], "sparknlp_jsl.modeltracer": [[192, "module-sparknlp_jsl.modelTracer"]], "rulebasedclassifier (class in sparknlp_jsl.nlp_test.bias.bias_testing)": [[193, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier"]], "init_medical_gender_classifier() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[193, "sparknlp_jsl.nlp_test.bias.bias_testing.init_medical_gender_classifier"]], "sparknlp_jsl.nlp_test.bias.bias_testing": [[193, "module-sparknlp_jsl.nlp_test.bias.bias_testing"]], "test_gender_bias() (in module sparknlp_jsl.nlp_test.bias.bias_testing)": [[193, "sparknlp_jsl.nlp_test.bias.bias_testing.test_gender_bias"]], "transform() (rulebasedclassifier method)": [[193, "sparknlp_jsl.nlp_test.bias.bias_testing.RuleBasedClassifier.transform"]], "sparknlp_jsl.nlp_test.bias": [[194, "module-sparknlp_jsl.nlp_test.bias"]], "sparknlp_jsl.nlp_test": [[195, "module-sparknlp_jsl.nlp_test"]], "sparknlp_jsl.nlp_test.noisy_labels": [[196, "module-sparknlp_jsl.nlp_test.noisy_labels"]], "interactivefix (class in sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix"]], "add_flag_to_conll() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.add_flag_to_conll"]], "adjust_page_size() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.adjust_page_size"]], "apply_fixes() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.apply_fixes"]], "apply_label_fixes() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.apply_label_fixes"]], "conll_reader() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_reader"]], "conll_writer() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.conll_writer"]], "create_grid() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.create_grid"]], "display() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.display"]], "empty_grid() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.empty_grid"]], "fill_grid() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fill_grid"]], "fix_all() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_all"]], "fix_label() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.fix_label"]], "get_cell_element() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_cell_element"]], "get_central_grid() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_central_grid"]], "get_classes() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_classes"]], "get_default_indx() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_default_indx"]], "get_drop_down() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down"]], "get_drop_down_title() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_drop_down_title"]], "get_footer() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_footer"]], "get_header() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_header"]], "get_page_control_buttons() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_control_buttons"]], "get_page_number() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_page_number"]], "get_sentence() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_sentence"]], "get_title_html() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.get_title_html"]], "next_page() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.next_page"]], "num_sample_drop_down() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.num_sample_drop_down"]], "prev_page() (interactivefix method)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.InteractiveFix.prev_page"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing": [[197, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing"]], "update_with_model_predictions() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing)": [[197, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_fixing.update_with_model_predictions"]], "calculate_label_error_score() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[198, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.calculate_label_error_score"]], "get_label_quality_scores() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[198, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_label_quality_scores"]], "get_unique_entities() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[198, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.get_unique_entities"]], "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing": [[198, "module-sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing"]], "test_label_errors() (in module sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing)": [[198, "sparknlp_jsl.nlp_test.noisy_labels.noisy_label_testing.test_label_errors"]], "sparknlp_jsl.nlp_test.noisy_labels.utils": [[199, "module-sparknlp_jsl.nlp_test.noisy_labels.utils"]], "stylesheet (in module sparknlp_jsl.nlp_test.noisy_labels.utils)": [[199, "sparknlp_jsl.nlp_test.noisy_labels.utils.stylesheet"]], "sparknlp_jsl.nlp_test.robustness": [[200, "module-sparknlp_jsl.nlp_test.robustness"]], "add_context_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_context_to_data"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_contractions"]], "add_punctuation_to_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_punctuation_to_data"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.add_typo_to_sentence"]], "augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.augment_robustness"]], "conll_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.conll_reader"]], "convert_accent() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.convert_accent"]], "create_dataframe() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_dataframe"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.create_terminology"]], "filter_by_entity_type() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.filter_by_entity_type"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_cohyponyms_wordnet"]], "get_sample() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.get_sample"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.introduce_typos"]], "modify_capitalization_lower() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_lower"]], "modify_capitalization_title() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_title"]], "modify_capitalization_upper() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.modify_capitalization_upper"]], "sparknlp_jsl.nlp_test.robustness.robustness_fixing": [[201, "module-sparknlp_jsl.nlp_test.robustness.robustness_fixing"]], "strip_punctuation_from_data() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.strip_punctuation_from_data"]], "swap_entities_with_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_entities_with_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.swap_with_cohyponym"]], "test_and_augment_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_fixing)": [[201, "sparknlp_jsl.nlp_test.robustness.robustness_fixing.test_and_augment_robustness"]], "add_context() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_context"]], "add_contractions() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_contractions"]], "add_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_punctuation"]], "add_typo_to_sentence() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.add_typo_to_sentence"]], "american_to_british() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.american_to_british"]], "british_to_american() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.british_to_american"]], "calculate_metrics() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.calculate_metrics"]], "conll_sentence_reader() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.conll_sentence_reader"]], "create_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.create_terminology"]], "get_cohyponyms_wordnet() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.get_cohyponyms_wordnet"]], "introduce_typos() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.introduce_typos"]], "modify_capitalization() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.modify_capitalization"]], "remove_context_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_context_tokens"]], "remove_contraction_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_contraction_tokens"]], "remove_punctuation_tokens() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.remove_punctuation_tokens"]], "run_test() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.run_test"]], "sparknlp_jsl.nlp_test.robustness.robustness_testing": [[202, "module-sparknlp_jsl.nlp_test.robustness.robustness_testing"]], "strip_punctuation() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.strip_punctuation"]], "swap_named_entities_from_terminology() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_named_entities_from_terminology"]], "swap_with_cohyponym() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.swap_with_cohyponym"]], "test_robustness() (in module sparknlp_jsl.nlp_test.robustness.robustness_testing)": [[202, "sparknlp_jsl.nlp_test.robustness.robustness_testing.test_robustness"]], "calculate_proportion() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[203, "sparknlp_jsl.nlp_test.robustness.utils.calculate_proportion"]], "get_augmentation_proportions() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[203, "sparknlp_jsl.nlp_test.robustness.utils.get_augmentation_proportions"]], "sparknlp_jsl.nlp_test.robustness.utils": [[203, "module-sparknlp_jsl.nlp_test.robustness.utils"]], "suggest_perturbations() (in module sparknlp_jsl.nlp_test.robustness.utils)": [[203, "sparknlp_jsl.nlp_test.robustness.utils.suggest_perturbations"]], "internalresourcedownloader (class in sparknlp_jsl.pretrained)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader"]], "downloadmodel() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.downloadModel"]], "printprogress() (in module sparknlp_jsl.pretrained)": [[204, "sparknlp_jsl.pretrained.printProgress"]], "returnprivatemodels() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivateModels"]], "returnprivatepipelines() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.returnPrivatePipelines"]], "showavailableannotators() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.showAvailableAnnotators"]], "showprivatemodels() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivateModels"]], "showprivatepipelines() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.showPrivatePipelines"]], "showuncategorizedresources() (internalresourcedownloader static method)": [[204, "sparknlp_jsl.pretrained.InternalResourceDownloader.showUnCategorizedResources"]], "sparknlp_jsl.pretrained": [[204, "module-sparknlp_jsl.pretrained"]], "structureddeidentification (class in sparknlp_jsl.structured_deidentification)": [[205, "sparknlp_jsl.structured_deidentification.StructuredDeidentification"]], "obfuscatecolumns() (structureddeidentification method)": [[205, "sparknlp_jsl.structured_deidentification.StructuredDeidentification.obfuscateColumns"]], "sparknlp_jsl.structured_deidentification": [[205, "module-sparknlp_jsl.structured_deidentification"]], "texttodocumentscolumns (class in sparknlp_jsl.text_to_documents_columns)": [[206, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns"]], "sparknlp_jsl.text_to_documents_columns": [[206, "module-sparknlp_jsl.text_to_documents_columns"]], "todocumentscolumns() (texttodocumentscolumns method)": [[206, "sparknlp_jsl.text_to_documents_columns.TextToDocumentsColumns.toDocumentsColumns"]], "annotationtooljsonreader (class in sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.AnnotationToolJsonReader"]], "cantemistreader (class in sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.CantemistReader"]], "codiespreader (class in sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.CodiEspReader"]], "redatasethelper (class in sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.REDatasetHelper"]], "synonymaugmentationumls (class in sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.SynonymAugmentationUMLS"]], "augmentcsv() (synonymaugmentationumls method)": [[207, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentCsv"]], "augmentdataframe() (synonymaugmentationumls method)": [[207, "sparknlp_jsl.training.SynonymAugmentationUMLS.augmentDataFrame"]], "create_annotation_column() (redatasethelper method)": [[207, "sparknlp_jsl.training.REDatasetHelper.create_annotation_column"]], "generateassertiontrainset() (annotationtooljsonreader method)": [[207, "sparknlp_jsl.training.AnnotationToolJsonReader.generateAssertionTrainSet"]], "generateconll() (annotationtooljsonreader method)": [[207, "sparknlp_jsl.training.AnnotationToolJsonReader.generateConll"]], "generateplainassertiontrainset() (annotationtooljsonreader method)": [[207, "sparknlp_jsl.training.AnnotationToolJsonReader.generatePlainAssertionTrainSet"]], "readdataset() (annotationtooljsonreader method)": [[207, "sparknlp_jsl.training.AnnotationToolJsonReader.readDataset"]], "readdatasettaskner() (cantemistreader method)": [[207, "sparknlp_jsl.training.CantemistReader.readDatasetTaskNer"]], "readdatasettaskx() (codiespreader method)": [[207, "sparknlp_jsl.training.CodiEspReader.readDatasetTaskX"]], "sparknlp_jsl.training": [[207, "module-sparknlp_jsl.training"]], "tf_graph (in module sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.tf_graph"]], "tf_graph_1x (in module sparknlp_jsl.training)": [[207, "sparknlp_jsl.training.tf_graph_1x"]], "assertion_log_parser (class in sparknlp_jsl.training_log_parser)": [[208, "sparknlp_jsl.training_log_parser.assertion_log_parser"]], "evaluate() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate"]], "evaluate_conll_file() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.evaluate_conll_file"]], "get_best_f1_scores() (assertion_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_best_f1_scores"]], "get_best_f1_scores() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.get_best_f1_scores"]], "get_charts() (assertion_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.assertion_log_parser.get_charts"]], "get_charts() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.get_charts"]], "loss_plot() (assertion_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.assertion_log_parser.loss_plot"]], "loss_plot() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.loss_plot"]], "ner_log_parser (class in sparknlp_jsl.training_log_parser)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser"]], "parse_logfile() (assertion_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.assertion_log_parser.parse_logfile"]], "parse_logfile() (ner_log_parser method)": [[208, "sparknlp_jsl.training_log_parser.ner_log_parser.parse_logfile"]], "sparknlp_jsl.training_log_parser": [[208, "module-sparknlp_jsl.training_log_parser"]], "updatemodels (class in sparknlp_jsl.updatemodels)": [[209, "sparknlp_jsl.updateModels.UpdateModels"]], "sparknlp_jsl.updatemodels": [[209, "module-sparknlp_jsl.updateModels"]], "updatecachemodels() (updatemodels static method)": [[209, "sparknlp_jsl.updateModels.UpdateModels.updateCacheModels"]], "updatemodels() (updatemodels static method)": [[209, "sparknlp_jsl.updateModels.UpdateModels.updateModels"]], "get_mt_samples() (in module sparknlp_jsl.util)": [[210, "sparknlp_jsl.util.get_mt_samples"]], "sparknlp_jsl.util": [[210, "module-sparknlp_jsl.util"]], "document_assembler (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.document_assembler"]], "empty_df (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.empty_df"]], "get_doc_assembler() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_doc_assembler"]], "get_empty_df() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_empty_df"]], "get_ner_df() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_ner_df"]], "get_ner_sentence_borders() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_ner_sentence_borders"]], "get_nlp_pos_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_nlp_pos_pipeline"]], "get_nlp_token_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_nlp_token_pipeline"]], "get_pos() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_pos"]], "get_regex_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_regex_tokenizer"]], "get_regular_tokenizer() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_regular_tokenizer"]], "get_rel_df() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_rel_df"]], "get_sent_detector() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_sent_detector"]], "get_sentence_pipeline() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_sentence_pipeline"]], "get_single_task_conll() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_single_task_conll"]], "get_token_df() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.get_token_df"]], "nlp_pos_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.nlp_pos_pipeline"]], "nlp_token_pipeline (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.nlp_token_pipeline"]], "pos (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.pos"]], "pos_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.pos_pipeline_initialized"]], "read_conll() (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.read_conll"]], "regex_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.regex_tokenizer"]], "regular_tokenizer (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.regular_tokenizer"]], "sentence_detector (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.sentence_detector"]], "sparknlp_jsl.utils.alab_utils": [[211, "module-sparknlp_jsl.utils.alab_utils"]], "token_pipeline_initialized (in module sparknlp_jsl.utils.alab_utils)": [[211, "sparknlp_jsl.utils.alab_utils.token_pipeline_initialized"]], "sparknlp_jsl.utils.conll_parse": [[212, "module-sparknlp_jsl.utils.conll_parse"]], "sparknlp_jsl.utils.deidentification_utils": [[213, "module-sparknlp_jsl.utils.deidentification_utils"]], "structured_deidentifier() (in module sparknlp_jsl.utils.deidentification_utils)": [[213, "sparknlp_jsl.utils.deidentification_utils.structured_deidentifier"]], "is_module_importable() (in module sparknlp_jsl.utils.imports)": [[214, "sparknlp_jsl.utils.imports.is_module_importable"]], "sparknlp_jsl.utils.imports": [[214, "module-sparknlp_jsl.utils.imports"]], "sparknlp_jsl.utils": [[215, "module-sparknlp_jsl.utils"]], "assertion (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.ASSERTION"]], "disambiguation (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.DISAMBIGUATION"]], "feature_vector (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.FEATURE_VECTOR"]], "internalannotatortype (class in sparknlp_jsl.utils.licensed_annotator_type)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType"]], "keyword (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.KEYWORD"]], "selector (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SELECTOR"]], "sql (internalannotatortype attribute)": [[216, "sparknlp_jsl.utils.licensed_annotator_type.InternalAnnotatorType.SQL"]], "sparknlp_jsl.utils.licensed_annotator_type": [[216, "module-sparknlp_jsl.utils.licensed_annotator_type"]], "sparknlp_jsl.utils.log_parse": [[217, "module-sparknlp_jsl.utils.log_parse"]], "evaluate() (in module sparknlp_jsl.utils.ner_utils)": [[218, "sparknlp_jsl.utils.ner_utils.evaluate"]], "evaluate_conll_file() (in module sparknlp_jsl.utils.ner_utils)": [[218, "sparknlp_jsl.utils.ner_utils.evaluate_conll_file"]], "get_charts() (in module sparknlp_jsl.utils.ner_utils)": [[218, "sparknlp_jsl.utils.ner_utils.get_charts"]], "loss_plot() (in module sparknlp_jsl.utils.ner_utils)": [[218, "sparknlp_jsl.utils.ner_utils.loss_plot"]], "sparknlp_jsl.utils.ner_utils": [[218, "module-sparknlp_jsl.utils.ner_utils"]], "colors (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[219, "sparknlp_jsl.utils.ocr_nlp_processor.colors"]], "ocr_entity_processor() (in module sparknlp_jsl.utils.ocr_nlp_processor)": [[219, "sparknlp_jsl.utils.ocr_nlp_processor.ocr_entity_processor"]], "sparknlp_jsl.utils.ocr_nlp_processor": [[219, "module-sparknlp_jsl.utils.ocr_nlp_processor"]], "colors (in module sparknlp_jsl.utils.ocr_utils)": [[220, "sparknlp_jsl.utils.ocr_utils.colors"]], "colors_rgb (in module sparknlp_jsl.utils.ocr_utils)": [[220, "sparknlp_jsl.utils.ocr_utils.colors_rgb"]], "label2color (in module sparknlp_jsl.utils.ocr_utils)": [[220, "sparknlp_jsl.utils.ocr_utils.label2color"]], "label2rgb (in module sparknlp_jsl.utils.ocr_utils)": [[220, "sparknlp_jsl.utils.ocr_utils.label2rgb"]], "sparknlp_jsl.utils.ocr_utils": [[220, "module-sparknlp_jsl.utils.ocr_utils"]], "aggregate_entities() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.aggregate_entities"]], "calc_metrics() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.calc_metrics"]], "count_chunks() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.count_chunks"]], "get_result() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.get_result"]], "is_chunk_end() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_end"]], "is_chunk_start() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.is_chunk_start"]], "sparknlp_jsl.utils.training_log_parser_utils": [[221, "module-sparknlp_jsl.utils.training_log_parser_utils"]], "split_tag() (in module sparknlp_jsl.utils.training_log_parser_utils)": [[221, "sparknlp_jsl.utils.training_log_parser_utils.split_tag"]]}})